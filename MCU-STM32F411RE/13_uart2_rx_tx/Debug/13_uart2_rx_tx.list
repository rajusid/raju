
13_uart2_rx_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000480  08000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000484  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000488  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000488  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001460  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000054d  00000000  00000000  00021494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  000219e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a0  00000000  00000000  00021bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f12  00000000  00000000  00021d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f35  00000000  00000000  00035c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000805f2  00000000  00000000  00037bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b81a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005dc  00000000  00000000  000b81fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000464 	.word	0x08000464

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000464 	.word	0x08000464

080001d8 <main>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

int main()
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	char c;

	uart2_init();
 80001de:	f000 f809 	bl	80001f4 <uart2_init>
	while(1)
	{
		c = uart2_read();
 80001e2:	f000 f875 	bl	80002d0 <uart2_read>
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]
		  uart2_write(c);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f883 	bl	80002f8 <uart2_write>
		c = uart2_read();
 80001f2:	e7f6      	b.n	80001e2 <main+0xa>

080001f4 <uart2_init>:
	return 0;
}


void uart2_init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0

	/**Configure uart gpio pin***/
		/*Enable clock access to gpioa */
		RCC->AHB1ENR |= GPIOAEN;
 80001f8:	4b1e      	ldr	r3, [pc, #120]	; (8000274 <uart2_init+0x80>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	4a1d      	ldr	r2, [pc, #116]	; (8000274 <uart2_init+0x80>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6313      	str	r3, [r2, #48]	; 0x30

    	//Set PA2 mode to alternate function mode/
    	GPIOA->MODER  |= PA2MOD;
 8000204:	4b1c      	ldr	r3, [pc, #112]	; (8000278 <uart2_init+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1b      	ldr	r2, [pc, #108]	; (8000278 <uart2_init+0x84>)
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	6013      	str	r3, [r2, #0]

		//Set PA2 mode to alternate function mode/
		GPIOA->MODER  |= PA3MOD;
 8000210:	4b19      	ldr	r3, [pc, #100]	; (8000278 <uart2_init+0x84>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a18      	ldr	r2, [pc, #96]	; (8000278 <uart2_init+0x84>)
 8000216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800021a:	6013      	str	r3, [r2, #0]

    	//Set PA2 alternate function type to UART_TX (AF07)/
        GPIOA->AFR[0] |= PA2AF;
 800021c:	4b16      	ldr	r3, [pc, #88]	; (8000278 <uart2_init+0x84>)
 800021e:	6a1b      	ldr	r3, [r3, #32]
 8000220:	4a15      	ldr	r2, [pc, #84]	; (8000278 <uart2_init+0x84>)
 8000222:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000226:	6213      	str	r3, [r2, #32]

		//Set PA3 alternate function type to UART_RX (AF07)/
        GPIOA->AFR[0] |= PA3AF;
 8000228:	4b13      	ldr	r3, [pc, #76]	; (8000278 <uart2_init+0x84>)
 800022a:	6a1b      	ldr	r3, [r3, #32]
 800022c:	4a12      	ldr	r2, [pc, #72]	; (8000278 <uart2_init+0x84>)
 800022e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000232:	6213      	str	r3, [r2, #32]

		/**Configure uart module ***/
		/*Enable clock access to uart2 */
         RCC->APB1ENR |= APB1EN;
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <uart2_init+0x80>)
 8000236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000238:	4a0e      	ldr	r2, [pc, #56]	; (8000274 <uart2_init+0x80>)
 800023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800023e:	6413      	str	r3, [r2, #64]	; 0x40

		//Configure baudrate/
		uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000240:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000244:	490d      	ldr	r1, [pc, #52]	; (800027c <uart2_init+0x88>)
 8000246:	480e      	ldr	r0, [pc, #56]	; (8000280 <uart2_init+0x8c>)
 8000248:	f000 f81c 	bl	8000284 <uart_set_baudrate>
		//USART2->BRR = ((APB1_CLK + (BaudRate/2U))/BaudRate) ;

		//Configure the transfer direction/
		USART2->CR1 |= USART2_TX;
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <uart2_init+0x8c>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a0b      	ldr	r2, [pc, #44]	; (8000280 <uart2_init+0x8c>)
 8000252:	f043 0308 	orr.w	r3, r3, #8
 8000256:	60d3      	str	r3, [r2, #12]

        //Configure the transfer direction/
    	USART2->CR1 |= USART2_RX;
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <uart2_init+0x8c>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	4a08      	ldr	r2, [pc, #32]	; (8000280 <uart2_init+0x8c>)
 800025e:	f043 0304 	orr.w	r3, r3, #4
 8000262:	60d3      	str	r3, [r2, #12]

		//Enable uart module/
        USART2->CR1 |= USART2EN;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <uart2_init+0x8c>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	4a05      	ldr	r2, [pc, #20]	; (8000280 <uart2_init+0x8c>)
 800026a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800026e:	60d3      	str	r3, [r2, #12]

}
 8000270:	bf00      	nop
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40023800 	.word	0x40023800
 8000278:	40020000 	.word	0x40020000
 800027c:	00f42400 	.word	0x00f42400
 8000280:	40004400 	.word	0x40004400

08000284 <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	60f8      	str	r0, [r7, #12]
 800028c:	60b9      	str	r1, [r7, #8]
 800028e:	607a      	str	r2, [r7, #4]
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000290:	6879      	ldr	r1, [r7, #4]
 8000292:	68b8      	ldr	r0, [r7, #8]
 8000294:	f000 f808 	bl	80002a8 <compute_uart_bd>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	609a      	str	r2, [r3, #8]
}
 80002a0:	bf00      	nop
 80002a2:	3710      	adds	r7, #16
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	085a      	lsrs	r2, r3, #1
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	441a      	add	r2, r3
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002c0:	b29b      	uxth	r3, r3
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
	...

080002d0 <uart2_read>:




char uart2_read(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  //Make sure the transmit data register is empty/
	while(!(USART2->SR & SR_RXNE)){}
 80002d4:	bf00      	nop
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <uart2_read+0x24>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f003 0320 	and.w	r3, r3, #32
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f9      	beq.n	80002d6 <uart2_read+0x6>

  //Write to transmit data register/
	return USART2->DR;
 80002e2:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <uart2_read+0x24>)
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	b2db      	uxtb	r3, r3
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40004400 	.word	0x40004400

080002f8 <uart2_write>:


void uart2_write(int ch)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  //Make sure the transmit data register is empty/
	while(!(USART2->SR & SR_TXE)){}
 8000300:	bf00      	nop
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <uart2_write+0x2c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f9      	beq.n	8000302 <uart2_write+0xa>

  //Write to transmit data register/
	USART2->DR	=  (ch & 0xFF);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <uart2_write+0x2c>)
 8000312:	b2db      	uxtb	r3, r3
 8000314:	6053      	str	r3, [r2, #4]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40004400 	.word	0x40004400

08000328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800032c:	e7fe      	b.n	800032c <NMI_Handler+0x4>

0800032e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000332:	e7fe      	b.n	8000332 <HardFault_Handler+0x4>

08000334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000338:	e7fe      	b.n	8000338 <MemManage_Handler+0x4>

0800033a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800033e:	e7fe      	b.n	800033e <BusFault_Handler+0x4>

08000340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000344:	e7fe      	b.n	8000344 <UsageFault_Handler+0x4>

08000346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000366:	bf00      	nop
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000374:	f000 f83e 	bl	80003f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}

0800037c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <SystemInit+0x20>)
 8000382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000386:	4a05      	ldr	r2, [pc, #20]	; (800039c <SystemInit+0x20>)
 8000388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800038c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003a6:	490e      	ldr	r1, [pc, #56]	; (80003e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003a8:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003bc:	4c0b      	ldr	r4, [pc, #44]	; (80003ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003ca:	f7ff ffd7 	bl	800037c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ce:	f000 f825 	bl	800041c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003d2:	f7ff ff01 	bl	80001d8 <main>
  bx  lr    
 80003d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003e4:	08000484 	.word	0x08000484
  ldr r2, =_sbss
 80003e8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003ec:	20000024 	.word	0x20000024

080003f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC_IRQHandler>
	...

080003f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <HAL_IncTick+0x20>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_IncTick+0x24>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4413      	add	r3, r2
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_IncTick+0x24>)
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	20000000 	.word	0x20000000
 8000418:	20000020 	.word	0x20000020

0800041c <__libc_init_array>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	4d0d      	ldr	r5, [pc, #52]	; (8000454 <__libc_init_array+0x38>)
 8000420:	4c0d      	ldr	r4, [pc, #52]	; (8000458 <__libc_init_array+0x3c>)
 8000422:	1b64      	subs	r4, r4, r5
 8000424:	10a4      	asrs	r4, r4, #2
 8000426:	2600      	movs	r6, #0
 8000428:	42a6      	cmp	r6, r4
 800042a:	d109      	bne.n	8000440 <__libc_init_array+0x24>
 800042c:	4d0b      	ldr	r5, [pc, #44]	; (800045c <__libc_init_array+0x40>)
 800042e:	4c0c      	ldr	r4, [pc, #48]	; (8000460 <__libc_init_array+0x44>)
 8000430:	f000 f818 	bl	8000464 <_init>
 8000434:	1b64      	subs	r4, r4, r5
 8000436:	10a4      	asrs	r4, r4, #2
 8000438:	2600      	movs	r6, #0
 800043a:	42a6      	cmp	r6, r4
 800043c:	d105      	bne.n	800044a <__libc_init_array+0x2e>
 800043e:	bd70      	pop	{r4, r5, r6, pc}
 8000440:	f855 3b04 	ldr.w	r3, [r5], #4
 8000444:	4798      	blx	r3
 8000446:	3601      	adds	r6, #1
 8000448:	e7ee      	b.n	8000428 <__libc_init_array+0xc>
 800044a:	f855 3b04 	ldr.w	r3, [r5], #4
 800044e:	4798      	blx	r3
 8000450:	3601      	adds	r6, #1
 8000452:	e7f2      	b.n	800043a <__libc_init_array+0x1e>
 8000454:	0800047c 	.word	0x0800047c
 8000458:	0800047c 	.word	0x0800047c
 800045c:	0800047c 	.word	0x0800047c
 8000460:	08000480 	.word	0x08000480

08000464 <_init>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr

08000470 <_fini>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr
