
14_ButtonPressModeChange.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000510  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080006a8  080006a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006c4  080006c4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080006c4  080006c4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006c4  080006c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006c4  080006c4  000106c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006c8  080006c8  000106c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006cc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080006d0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080006d0  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e61  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000875  00000000  00000000  00021e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000260  00000000  00000000  00022710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  00022970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001452c  00000000  00000000  00022b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000033b5  00000000  00000000  00037084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000807c2  00000000  00000000  0003a439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000babfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006dc  00000000  00000000  000bac4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000690 	.word	0x08000690

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000690 	.word	0x08000690

080001d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	db0b      	blt.n	8000202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 021f 	and.w	r2, r3, #31
 80001f0:	4907      	ldr	r1, [pc, #28]	; (8000210 <__NVIC_EnableIRQ+0x38>)
 80001f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f6:	095b      	lsrs	r3, r3, #5
 80001f8:	2001      	movs	r0, #1
 80001fa:	fa00 f202 	lsl.w	r2, r0, r2
 80001fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000e100 	.word	0xe000e100

08000214 <pc13_exit_init>:
// Set timer reload value for 1-second time period
const uint32_t TIMER_RELOAD_VALUE = 1000000; // assuming 1 MHz timer clock


void pc13_exit_init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000218:	b672      	cpsid	i
}
 800021a:	bf00      	nop
	//disable global interrupts
	__disable_irq();

	//enable clock access for GPIOC
	RCC->AHB1ENR |= GPIOCEN;
 800021c:	4b1e      	ldr	r3, [pc, #120]	; (8000298 <pc13_exit_init+0x84>)
 800021e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000220:	4a1d      	ldr	r2, [pc, #116]	; (8000298 <pc13_exit_init+0x84>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PC13 as input
	GPIOC->MODER &= ~(3U<<(2*13)); // Clear bits 27:26 (13*2)
 8000228:	4b1c      	ldr	r3, [pc, #112]	; (800029c <pc13_exit_init+0x88>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a1b      	ldr	r2, [pc, #108]	; (800029c <pc13_exit_init+0x88>)
 800022e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000232:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(3U<<(2*13)); // Clear bits 27:26 (13*2)
 8000234:	4b19      	ldr	r3, [pc, #100]	; (800029c <pc13_exit_init+0x88>)
 8000236:	68db      	ldr	r3, [r3, #12]
 8000238:	4a18      	ldr	r2, [pc, #96]	; (800029c <pc13_exit_init+0x88>)
 800023a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800023e:	60d3      	str	r3, [r2, #12]


	//Enable clock access to SYSCFG
	RCC->APB2ENR |= SYSCFGEN;
 8000240:	4b15      	ldr	r3, [pc, #84]	; (8000298 <pc13_exit_init+0x84>)
 8000242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000244:	4a14      	ldr	r2, [pc, #80]	; (8000298 <pc13_exit_init+0x84>)
 8000246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800024a:	6453      	str	r3, [r2, #68]	; 0x44

	//Select PORTC for EXTI13
	SYSCFG->EXTICR[3] &= ~(15U<<4); // Clear bits 7:4
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <pc13_exit_init+0x8c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a13      	ldr	r2, [pc, #76]	; (80002a0 <pc13_exit_init+0x8c>)
 8000252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000256:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= 2U<<4;    // Set bits 7:4 to 0b0010
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <pc13_exit_init+0x8c>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a10      	ldr	r2, [pc, #64]	; (80002a0 <pc13_exit_init+0x8c>)
 800025e:	f043 0320 	orr.w	r3, r3, #32
 8000262:	6153      	str	r3, [r2, #20]


	//Unmask EXTI13
	EXTI->IMR |= LINE13;
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <pc13_exit_init+0x90>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <pc13_exit_init+0x90>)
 800026a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800026e:	6013      	str	r3, [r2, #0]


	//Select falling edge trigger
	EXTI->FTSR |= LINE13;
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <pc13_exit_init+0x90>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <pc13_exit_init+0x90>)
 8000276:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800027a:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~LINE13;
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <pc13_exit_init+0x90>)
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	4a08      	ldr	r2, [pc, #32]	; (80002a4 <pc13_exit_init+0x90>)
 8000282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000286:	6093      	str	r3, [r2, #8]

	//Enable EXTI13 line in NVIC
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000288:	2028      	movs	r0, #40	; 0x28
 800028a:	f7ff ffa5 	bl	80001d8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800028e:	b662      	cpsie	i
}
 8000290:	bf00      	nop

	//Enable global interrupts
	__enable_irq();
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40023800 	.word	0x40023800
 800029c:	40020800 	.word	0x40020800
 80002a0:	40013800 	.word	0x40013800
 80002a4:	40013c00 	.word	0x40013c00

080002a8 <pa5_out_init>:

void pa5_out_init(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	/*1.Enable clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002ac:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <pa5_out_init+0x34>)
 80002ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b0:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <pa5_out_init+0x34>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6313      	str	r3, [r2, #48]	; 0x30

	/*2.Set PA5 as output pin*/
	GPIOA->MODER |= (1U<<10);
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <pa5_out_init+0x38>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a08      	ldr	r2, [pc, #32]	; (80002e0 <pa5_out_init+0x38>)
 80002be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002c2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <pa5_out_init+0x38>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <pa5_out_init+0x38>)
 80002ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002ce:	6013      	str	r3, [r2, #0]
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40020000 	.word	0x40020000

080002e4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
	// Initialize timer
	uint32_t timer = TIMER_RELOAD_VALUE;
 80002ea:	4b29      	ldr	r3, [pc, #164]	; (8000390 <EXTI15_10_IRQHandler+0xac>)
 80002ec:	607b      	str	r3, [r7, #4]
	count=0;
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <EXTI15_10_IRQHandler+0xb0>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]

	while (timer > 0)
 80002f4:	e015      	b.n	8000322 <EXTI15_10_IRQHandler+0x3e>
	{
	    // Check EXTI line 13 pending flag
	    if ((EXTI->PR & LINE13) != 0)
 80002f6:	4b28      	ldr	r3, [pc, #160]	; (8000398 <EXTI15_10_IRQHandler+0xb4>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d00c      	beq.n	800031c <EXTI15_10_IRQHandler+0x38>
	    {
	        // Clear PR flag
	        EXTI->PR |= LINE13;
 8000302:	4b25      	ldr	r3, [pc, #148]	; (8000398 <EXTI15_10_IRQHandler+0xb4>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a24      	ldr	r2, [pc, #144]	; (8000398 <EXTI15_10_IRQHandler+0xb4>)
 8000308:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800030c:	6153      	str	r3, [r2, #20]

	        // Increment count
	        count++;
 800030e:	4b21      	ldr	r3, [pc, #132]	; (8000394 <EXTI15_10_IRQHandler+0xb0>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3301      	adds	r3, #1
 8000314:	4a1f      	ldr	r2, [pc, #124]	; (8000394 <EXTI15_10_IRQHandler+0xb0>)
 8000316:	6013      	str	r3, [r2, #0]

	        // Reset timer
	        timer = TIMER_RELOAD_VALUE;
 8000318:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <EXTI15_10_IRQHandler+0xac>)
 800031a:	607b      	str	r3, [r7, #4]
	    }

	    // Decrement timer
	    timer--;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	3b01      	subs	r3, #1
 8000320:	607b      	str	r3, [r7, #4]
	while (timer > 0)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d1e6      	bne.n	80002f6 <EXTI15_10_IRQHandler+0x12>
	}

	// Exit the loop
		//Do something

		systickDelayMs(500);
 8000328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032c:	f000 f896 	bl	800045c <systickDelayMs>
		if(count==1U)
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <EXTI15_10_IRQHandler+0xb0>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	d105      	bne.n	8000344 <EXTI15_10_IRQHandler+0x60>
		{
			uart_str("ON.\r\n");
 8000338:	4818      	ldr	r0, [pc, #96]	; (800039c <EXTI15_10_IRQHandler+0xb8>)
 800033a:	f000 f905 	bl	8000548 <uart_str>
			exti_callback();
 800033e:	f000 f835 	bl	80003ac <exti_callback>
		else
		{
			GPIOA->ODR &= ~LED;
		}

}
 8000342:	e021      	b.n	8000388 <EXTI15_10_IRQHandler+0xa4>
		else if(count==2)
 8000344:	4b13      	ldr	r3, [pc, #76]	; (8000394 <EXTI15_10_IRQHandler+0xb0>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d109      	bne.n	8000360 <EXTI15_10_IRQHandler+0x7c>
			uart_str("OFF.\r\n");
 800034c:	4814      	ldr	r0, [pc, #80]	; (80003a0 <EXTI15_10_IRQHandler+0xbc>)
 800034e:	f000 f8fb 	bl	8000548 <uart_str>
			GPIOA->ODR &= ~LED;
 8000352:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <EXTI15_10_IRQHandler+0xc0>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a13      	ldr	r2, [pc, #76]	; (80003a4 <EXTI15_10_IRQHandler+0xc0>)
 8000358:	f023 0320 	bic.w	r3, r3, #32
 800035c:	6153      	str	r3, [r2, #20]
}
 800035e:	e013      	b.n	8000388 <EXTI15_10_IRQHandler+0xa4>
		else if(count>=2)
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <EXTI15_10_IRQHandler+0xb0>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b01      	cmp	r3, #1
 8000366:	dd09      	ble.n	800037c <EXTI15_10_IRQHandler+0x98>
			uart_str("INVALID.\r\n");
 8000368:	480f      	ldr	r0, [pc, #60]	; (80003a8 <EXTI15_10_IRQHandler+0xc4>)
 800036a:	f000 f8ed 	bl	8000548 <uart_str>
			GPIOA->ODR &= ~LED;
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <EXTI15_10_IRQHandler+0xc0>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a0c      	ldr	r2, [pc, #48]	; (80003a4 <EXTI15_10_IRQHandler+0xc0>)
 8000374:	f023 0320 	bic.w	r3, r3, #32
 8000378:	6153      	str	r3, [r2, #20]
}
 800037a:	e005      	b.n	8000388 <EXTI15_10_IRQHandler+0xa4>
			GPIOA->ODR &= ~LED;
 800037c:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <EXTI15_10_IRQHandler+0xc0>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <EXTI15_10_IRQHandler+0xc0>)
 8000382:	f023 0320 	bic.w	r3, r3, #32
 8000386:	6153      	str	r3, [r2, #20]
}
 8000388:	bf00      	nop
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	000f4240 	.word	0x000f4240
 8000394:	20000020 	.word	0x20000020
 8000398:	40013c00 	.word	0x40013c00
 800039c:	080006a8 	.word	0x080006a8
 80003a0:	080006b0 	.word	0x080006b0
 80003a4:	40020000 	.word	0x40020000
 80003a8:	080006b8 	.word	0x080006b8

080003ac <exti_callback>:

static void exti_callback(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0

	GPIOA->ODR |=LED;
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <exti_callback+0x1c>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <exti_callback+0x1c>)
 80003b6:	f043 0320 	orr.w	r3, r3, #32
 80003ba:	6153      	str	r3, [r2, #20]
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40020000 	.word	0x40020000

080003cc <main>:
#include "exit.h"
#include "uart.h"
#include "systick.h"

int main()
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
    uart2_init();
 80003d0:	f000 f86e 	bl	80004b0 <uart2_init>
    pc13_exit_init();
 80003d4:	f7ff ff1e 	bl	8000214 <pc13_exit_init>
    pa5_out_init();
 80003d8:	f7ff ff66 	bl	80002a8 <pa5_out_init>
    while(1)
    {
    	EXTI15_10_IRQHandler();
 80003dc:	f7ff ff82 	bl	80002e4 <EXTI15_10_IRQHandler>
 80003e0:	e7fc      	b.n	80003dc <main+0x10>

080003e2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e6:	e7fe      	b.n	80003e6 <NMI_Handler+0x4>

080003e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <HardFault_Handler+0x4>

080003ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <MemManage_Handler+0x4>

080003f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <BusFault_Handler+0x4>

080003fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <UsageFault_Handler+0x4>

08000400 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr

0800040e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800042e:	f000 f8f7 	bl	8000620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <SystemInit+0x20>)
 800043e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000442:	4a05      	ldr	r2, [pc, #20]	; (8000458 <SystemInit+0x20>)
 8000444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	e000ed00 	.word	0xe000ed00

0800045c <systickDelayMs>:
#include "systick.h"


void systickDelayMs(int delay) {
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
    /*Reload with number of clocks per millisecond*/
    SysTick->LOAD    = SYSTICK_LOAD_VAL;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <systickDelayMs+0x50>)
 8000466:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800046a:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register */
    SysTick->VAL = 0;
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <systickDelayMs+0x50>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]

    /*Enable systick and select internal clk src*/
    SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 8000472:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <systickDelayMs+0x50>)
 8000474:	2205      	movs	r2, #5
 8000476:	601a      	str	r2, [r3, #0]

    for(int i=0; i<delay ; i++) {
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	e009      	b.n	8000492 <systickDelayMs+0x36>
        /*Wait until the COUNTFLAG is set*/
        while((SysTick->CTRL &  CTRL_COUNTFLAG) == 0){}
 800047e:	bf00      	nop
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <systickDelayMs+0x50>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f9      	beq.n	8000480 <systickDelayMs+0x24>
    for(int i=0; i<delay ; i++) {
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	3301      	adds	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	429a      	cmp	r2, r3
 8000498:	dbf1      	blt.n	800047e <systickDelayMs+0x22>
    }

    SysTick->CTRL = 0;
 800049a:	4b04      	ldr	r3, [pc, #16]	; (80004ac <systickDelayMs+0x50>)
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
    return 1;
 80004a0:	bf00      	nop
}
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	e000e010 	.word	0xe000e010

080004b0 <uart2_init>:
#include "uart.h"


void uart2_init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	/****************Configure uart gpio pin***************/
			/*Enable clock access to gpioa */
			RCC->AHB1ENR |= GPIOAEN;
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <uart2_init+0x58>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b8:	4a13      	ldr	r2, [pc, #76]	; (8000508 <uart2_init+0x58>)
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6313      	str	r3, [r2, #48]	; 0x30

			/*Set PA2 mode to alternate function mode*/
			GPIOA->MODER  |= PA2MOD;
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <uart2_init+0x5c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a11      	ldr	r2, [pc, #68]	; (800050c <uart2_init+0x5c>)
 80004c6:	f043 0320 	orr.w	r3, r3, #32
 80004ca:	6013      	str	r3, [r2, #0]

			/*Set PA2 alternate function type to UART_TX (AF07)*/
	        GPIOA->AFR[0] |= PA2AF;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <uart2_init+0x5c>)
 80004ce:	6a1b      	ldr	r3, [r3, #32]
 80004d0:	4a0e      	ldr	r2, [pc, #56]	; (800050c <uart2_init+0x5c>)
 80004d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80004d6:	6213      	str	r3, [r2, #32]

			/****************Configure uart module ***************/
			/*Enable clock access to uart2 */
	         RCC->APB1ENR |= APB1EN;
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <uart2_init+0x58>)
 80004da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <uart2_init+0x58>)
 80004de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e2:	6413      	str	r3, [r2, #64]	; 0x40

			/*Configure baudrate*/
			uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80004e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004e8:	4909      	ldr	r1, [pc, #36]	; (8000510 <uart2_init+0x60>)
 80004ea:	480a      	ldr	r0, [pc, #40]	; (8000514 <uart2_init+0x64>)
 80004ec:	f000 f848 	bl	8000580 <uart_set_baudrate>
			//USART2->BRR = ((APB1_CLK + (BaudRate/2U))/BaudRate) ;

			/*Configure the transfer direction*/
			USART2->CR1 = USART2_TX;
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <uart2_init+0x64>)
 80004f2:	2208      	movs	r2, #8
 80004f4:	60da      	str	r2, [r3, #12]

			/*Enable uart module*/
	        USART2->CR1 |= USART2EN;
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <uart2_init+0x64>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	4a06      	ldr	r2, [pc, #24]	; (8000514 <uart2_init+0x64>)
 80004fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000500:	60d3      	str	r3, [r2, #12]
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023800 	.word	0x40023800
 800050c:	40020000 	.word	0x40020000
 8000510:	00f42400 	.word	0x00f42400
 8000514:	40004400 	.word	0x40004400

08000518 <uart2_write>:

void uart2_write(char ch)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
	// Loop through the string

	        // Wait until the transmit data register is empty
	        while(!(USART2->SR & SR_TXE)){}
 8000522:	bf00      	nop
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <uart2_write+0x2c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0f9      	beq.n	8000524 <uart2_write+0xc>

	        // Write the current character to the transmit data register
	        USART2->DR =ch ;
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <uart2_write+0x2c>)
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	6053      	str	r3, [r2, #4]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40004400 	.word	0x40004400

08000548 <uart_str>:

void uart_str(char *str) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
    // Code from original uart_str() function
	for(int i =0; str[i]!='\0';i++)
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	e009      	b.n	800056a <uart_str+0x22>
		{
			uart2_write(str[i]);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ffda 	bl	8000518 <uart2_write>
	for(int i =0; str[i]!='\0';i++)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	3301      	adds	r3, #1
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	4413      	add	r3, r2
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d1ef      	bne.n	8000556 <uart_str+0xe>
		}
}
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
    // Code from original uart_set_baudrate() function
	USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 800058c:	6879      	ldr	r1, [r7, #4]
 800058e:	68b8      	ldr	r0, [r7, #8]
 8000590:	f000 f808 	bl	80005a4 <compute_uart_bd>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	609a      	str	r2, [r3, #8]
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
    // Code from original compute_uart_bd() function
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	085a      	lsrs	r2, r3, #1
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	441a      	add	r2, r3
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005bc:	b29b      	uxth	r3, r3
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000604 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005d2:	490e      	ldr	r1, [pc, #56]	; (800060c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005d4:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d8:	e002      	b.n	80005e0 <LoopCopyDataInit>

080005da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005de:	3304      	adds	r3, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e4:	d3f9      	bcc.n	80005da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005e8:	4c0b      	ldr	r4, [pc, #44]	; (8000618 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ec:	e001      	b.n	80005f2 <LoopFillZerobss>

080005ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f0:	3204      	adds	r2, #4

080005f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f4:	d3fb      	bcc.n	80005ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005f6:	f7ff ff1f 	bl	8000438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005fa:	f000 f825 	bl	8000648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005fe:	f7ff fee5 	bl	80003cc <main>
  bx  lr    
 8000602:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800060c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000610:	080006cc 	.word	0x080006cc
  ldr r2, =_sbss
 8000614:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000618:	20000028 	.word	0x20000028

0800061c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC_IRQHandler>
	...

08000620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_IncTick+0x20>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x24>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4413      	add	r3, r2
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <HAL_IncTick+0x24>)
 8000632:	6013      	str	r3, [r2, #0]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000000 	.word	0x20000000
 8000644:	20000024 	.word	0x20000024

08000648 <__libc_init_array>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	4d0d      	ldr	r5, [pc, #52]	; (8000680 <__libc_init_array+0x38>)
 800064c:	4c0d      	ldr	r4, [pc, #52]	; (8000684 <__libc_init_array+0x3c>)
 800064e:	1b64      	subs	r4, r4, r5
 8000650:	10a4      	asrs	r4, r4, #2
 8000652:	2600      	movs	r6, #0
 8000654:	42a6      	cmp	r6, r4
 8000656:	d109      	bne.n	800066c <__libc_init_array+0x24>
 8000658:	4d0b      	ldr	r5, [pc, #44]	; (8000688 <__libc_init_array+0x40>)
 800065a:	4c0c      	ldr	r4, [pc, #48]	; (800068c <__libc_init_array+0x44>)
 800065c:	f000 f818 	bl	8000690 <_init>
 8000660:	1b64      	subs	r4, r4, r5
 8000662:	10a4      	asrs	r4, r4, #2
 8000664:	2600      	movs	r6, #0
 8000666:	42a6      	cmp	r6, r4
 8000668:	d105      	bne.n	8000676 <__libc_init_array+0x2e>
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000670:	4798      	blx	r3
 8000672:	3601      	adds	r6, #1
 8000674:	e7ee      	b.n	8000654 <__libc_init_array+0xc>
 8000676:	f855 3b04 	ldr.w	r3, [r5], #4
 800067a:	4798      	blx	r3
 800067c:	3601      	adds	r6, #1
 800067e:	e7f2      	b.n	8000666 <__libc_init_array+0x1e>
 8000680:	080006c4 	.word	0x080006c4
 8000684:	080006c4 	.word	0x080006c4
 8000688:	080006c4 	.word	0x080006c4
 800068c:	080006c8 	.word	0x080006c8

08000690 <_init>:
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000692:	bf00      	nop
 8000694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000696:	bc08      	pop	{r3}
 8000698:	469e      	mov	lr, r3
 800069a:	4770      	bx	lr

0800069c <_fini>:
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069e:	bf00      	nop
 80006a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a2:	bc08      	pop	{r3}
 80006a4:	469e      	mov	lr, r3
 80006a6:	4770      	bx	lr
