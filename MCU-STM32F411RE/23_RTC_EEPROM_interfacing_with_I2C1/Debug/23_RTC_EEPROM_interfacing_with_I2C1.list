
23_RTC_EEPROM_interfacing_with_I2C1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000042c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c4  080005c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005c4  080005c4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005c4  080005c4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c4  080005c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005c4  080005c4  000105c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c8  080005c8  000105c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005cc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080005d0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080005d0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001463  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000517  00000000  00000000  00021497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  000219b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00021b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ec4  00000000  00000000  00021d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002012  00000000  00000000  00035bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080518  00000000  00000000  00037bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8106  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000059c  00000000  00000000  000b8158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005ac 	.word	0x080005ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080005ac 	.word	0x080005ac

080001d8 <main>:

void I2C1_init(void);
void I2C1_burstRead(char saddr, char maddr, int n, char* data);
void delayMs(int n);

int main(void) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0

	char timeDateReadback[15];
	I2C1_init();
 80001de:	f000 f833 	bl	8000248 <I2C1_init>
	/* configure PA5 for the green LED (LD2) */

	RCC->AHB1ENR |= 1; /* enable GPIOA clock */
 80001e2:	4b17      	ldr	r3, [pc, #92]	; (8000240 <main+0x68>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e6:	4a16      	ldr	r2, [pc, #88]	; (8000240 <main+0x68>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &=~0x00000C00; /* clear pin mode */
 80001ee:	4b15      	ldr	r3, [pc, #84]	; (8000244 <main+0x6c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a14      	ldr	r2, [pc, #80]	; (8000244 <main+0x6c>)
 80001f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001f8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000400; /* setpin to output mode */
 80001fa:	4b12      	ldr	r3, [pc, #72]	; (8000244 <main+0x6c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a11      	ldr	r2, [pc, #68]	; (8000244 <main+0x6c>)
 8000200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000204:	6013      	str	r3, [r2, #0]

	while (1) {
		I2C1_burstRead(SLAVE_ADDR, 0, 7, timeDateReadback);
 8000206:	463b      	mov	r3, r7
 8000208:	2207      	movs	r2, #7
 800020a:	2100      	movs	r1, #0
 800020c:	2068      	movs	r0, #104	; 0x68
 800020e:	f000 f877 	bl	8000300 <I2C1_burstRead>
		if(timeDateReadback[0] & 1)
 8000212:	783b      	ldrb	r3, [r7, #0]
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d006      	beq.n	800022a <main+0x52>
			GPIOA->ODR |= 0x00000020; /* turn on LED */
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <main+0x6c>)
 800021e:	695b      	ldr	r3, [r3, #20]
 8000220:	4a08      	ldr	r2, [pc, #32]	; (8000244 <main+0x6c>)
 8000222:	f043 0320 	orr.w	r3, r3, #32
 8000226:	6153      	str	r3, [r2, #20]
 8000228:	e005      	b.n	8000236 <main+0x5e>
		else
			GPIOA->ODR &= ~0x00000020; /* turn off LED */
 800022a:	4b06      	ldr	r3, [pc, #24]	; (8000244 <main+0x6c>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a05      	ldr	r2, [pc, #20]	; (8000244 <main+0x6c>)
 8000230:	f023 0320 	bic.w	r3, r3, #32
 8000234:	6153      	str	r3, [r2, #20]

		delayMs(10);
 8000236:	200a      	movs	r0, #10
 8000238:	f000 f8fc 	bl	8000434 <delayMs>
		I2C1_burstRead(SLAVE_ADDR, 0, 7, timeDateReadback);
 800023c:	e7e3      	b.n	8000206 <main+0x2e>
 800023e:	bf00      	nop
 8000240:	40023800 	.word	0x40023800
 8000244:	40020000 	.word	0x40020000

08000248 <I2C1_init>:
	}
}
void I2C1_init(void) {
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= 2; /* Enable GPIOB clock */
 800024c:	4b29      	ldr	r3, [pc, #164]	; (80002f4 <I2C1_init+0xac>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000250:	4a28      	ldr	r2, [pc, #160]	; (80002f4 <I2C1_init+0xac>)
 8000252:	f043 0302 	orr.w	r3, r3, #2
 8000256:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |=0x00200000; /* Enable I2C1 clock */
 8000258:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <I2C1_init+0xac>)
 800025a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800025c:	4a25      	ldr	r2, [pc, #148]	; (80002f4 <I2C1_init+0xac>)
 800025e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000262:	6413      	str	r3, [r2, #64]	; 0x40

	/* configure PB8, PB9 pins for I2C1 */
	GPIOB->AFR[1] &= ~0x000000FF; /* PB8, PB9 I2C1 SCL, SDA */
 8000264:	4b24      	ldr	r3, [pc, #144]	; (80002f8 <I2C1_init+0xb0>)
 8000266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000268:	4a23      	ldr	r2, [pc, #140]	; (80002f8 <I2C1_init+0xb0>)
 800026a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800026e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= 0x00000044;
 8000270:	4b21      	ldr	r3, [pc, #132]	; (80002f8 <I2C1_init+0xb0>)
 8000272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000274:	4a20      	ldr	r2, [pc, #128]	; (80002f8 <I2C1_init+0xb0>)
 8000276:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800027a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->MODER &= ~0x000F0000; /* PB8, PB9 use alternate function */
 800027c:	4b1e      	ldr	r3, [pc, #120]	; (80002f8 <I2C1_init+0xb0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1d      	ldr	r2, [pc, #116]	; (80002f8 <I2C1_init+0xb0>)
 8000282:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000286:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x000A0000;
 8000288:	4b1b      	ldr	r3, [pc, #108]	; (80002f8 <I2C1_init+0xb0>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a1a      	ldr	r2, [pc, #104]	; (80002f8 <I2C1_init+0xb0>)
 800028e:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000292:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= 0x00000300; /* output open-drain */
 8000294:	4b18      	ldr	r3, [pc, #96]	; (80002f8 <I2C1_init+0xb0>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4a17      	ldr	r2, [pc, #92]	; (80002f8 <I2C1_init+0xb0>)
 800029a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800029e:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &=~0x000F0000; /* with pull-ups */
 80002a0:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <I2C1_init+0xb0>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	4a14      	ldr	r2, [pc, #80]	; (80002f8 <I2C1_init+0xb0>)
 80002a6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80002aa:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= 0x00050000;
 80002ac:	4b12      	ldr	r3, [pc, #72]	; (80002f8 <I2C1_init+0xb0>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a11      	ldr	r2, [pc, #68]	; (80002f8 <I2C1_init+0xb0>)
 80002b2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80002b6:	60d3      	str	r3, [r2, #12]

	I2C1->CR1 = 0x8000; /* software reset I2C1 */
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <I2C1_init+0xb4>)
 80002ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80002be:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~0x8000;/* out of reset */
 80002c0:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <I2C1_init+0xb4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <I2C1_init+0xb4>)
 80002c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002ca:	6013      	str	r3, [r2, #0]
	I2C1->CR2 = 0x0010; /* peripheral clock is 16 MHz*/
 80002cc:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <I2C1_init+0xb4>)
 80002ce:	2210      	movs	r2, #16
 80002d0:	605a      	str	r2, [r3, #4]
	I2C1->CCR = 80; /* standard mode, 100kHz clock */
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <I2C1_init+0xb4>)
 80002d4:	2250      	movs	r2, #80	; 0x50
 80002d6:	61da      	str	r2, [r3, #28]
	I2C1->TRISE = 17; /* maximum rise time */
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <I2C1_init+0xb4>)
 80002da:	2211      	movs	r2, #17
 80002dc:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= 0x0001; /* enable I2C1 module */
 80002de:	4b07      	ldr	r3, [pc, #28]	; (80002fc <I2C1_init+0xb4>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a06      	ldr	r2, [pc, #24]	; (80002fc <I2C1_init+0xb4>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6013      	str	r3, [r2, #0]
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40020400 	.word	0x40020400
 80002fc:	40005400 	.word	0x40005400

08000300 <I2C1_burstRead>:

void I2C1_burstRead(char saddr, char maddr, int n, char* data) {
 8000300:	b480      	push	{r7}
 8000302:	b087      	sub	sp, #28
 8000304:	af00      	add	r7, sp, #0
 8000306:	60ba      	str	r2, [r7, #8]
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	4603      	mov	r3, r0
 800030c:	73fb      	strb	r3, [r7, #15]
 800030e:	460b      	mov	r3, r1
 8000310:	73bb      	strb	r3, [r7, #14]

	volatile int tmp;


	while (I2C1->SR2 & 2); /* wait until bus not busy */
 8000312:	bf00      	nop
 8000314:	4b46      	ldr	r3, [pc, #280]	; (8000430 <I2C1_burstRead+0x130>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0302 	and.w	r3, r3, #2
 800031c:	2b00      	cmp	r3, #0
 800031e:	d1f9      	bne.n	8000314 <I2C1_burstRead+0x14>
	I2C1->CR1 &=~0x800; /* disable POS */
 8000320:	4b43      	ldr	r3, [pc, #268]	; (8000430 <I2C1_burstRead+0x130>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a42      	ldr	r2, [pc, #264]	; (8000430 <I2C1_burstRead+0x130>)
 8000326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800032a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= 0x100; /* generate start */
 800032c:	4b40      	ldr	r3, [pc, #256]	; (8000430 <I2C1_burstRead+0x130>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a3f      	ldr	r2, [pc, #252]	; (8000430 <I2C1_burstRead+0x130>)
 8000332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000336:	6013      	str	r3, [r2, #0]

	while (!(I2C1->SR1 & 1)); /* wait until start flag is set */
 8000338:	bf00      	nop
 800033a:	4b3d      	ldr	r3, [pc, #244]	; (8000430 <I2C1_burstRead+0x130>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0f9      	beq.n	800033a <I2C1_burstRead+0x3a>
	I2C1->DR = saddr << 1; /* transmit slave address + Write */
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	005a      	lsls	r2, r3, #1
 800034a:	4b39      	ldr	r3, [pc, #228]	; (8000430 <I2C1_burstRead+0x130>)
 800034c:	611a      	str	r2, [r3, #16]

	//while (!(I2C1->SR1 & 2)); /* wait until addr flag is set */
	tmp = I2C1->SR2; /* clear addr flag */
 800034e:	4b38      	ldr	r3, [pc, #224]	; (8000430 <I2C1_burstRead+0x130>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	617b      	str	r3, [r7, #20]

	while (!(I2C1->SR1 & 0x80));/* wait until transmitter empty */
 8000354:	bf00      	nop
 8000356:	4b36      	ldr	r3, [pc, #216]	; (8000430 <I2C1_burstRead+0x130>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800035e:	2b00      	cmp	r3, #0
 8000360:	d0f9      	beq.n	8000356 <I2C1_burstRead+0x56>
	I2C1->DR = maddr; /* send memoryaddress */
 8000362:	4a33      	ldr	r2, [pc, #204]	; (8000430 <I2C1_burstRead+0x130>)
 8000364:	7bbb      	ldrb	r3, [r7, #14]
 8000366:	6113      	str	r3, [r2, #16]

	while (!(I2C1->SR1 & 0x80)); /* wait until transmitterempty */
 8000368:	bf00      	nop
 800036a:	4b31      	ldr	r3, [pc, #196]	; (8000430 <I2C1_burstRead+0x130>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0f9      	beq.n	800036a <I2C1_burstRead+0x6a>
	I2C1->CR1 |= 0x100; /* generate restart */
 8000376:	4b2e      	ldr	r3, [pc, #184]	; (8000430 <I2C1_burstRead+0x130>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a2d      	ldr	r2, [pc, #180]	; (8000430 <I2C1_burstRead+0x130>)
 800037c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000380:	6013      	str	r3, [r2, #0]

	while (!(I2C1->SR1 & 1));/* wait until start flag is set */
 8000382:	bf00      	nop
 8000384:	4b2a      	ldr	r3, [pc, #168]	; (8000430 <I2C1_burstRead+0x130>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	f003 0301 	and.w	r3, r3, #1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0f9      	beq.n	8000384 <I2C1_burstRead+0x84>
	I2C1->DR = saddr << 1 | 1;/*ransmit slave address + Read */
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	f043 0201 	orr.w	r2, r3, #1
 8000398:	4b25      	ldr	r3, [pc, #148]	; (8000430 <I2C1_burstRead+0x130>)
 800039a:	611a      	str	r2, [r3, #16]

	while (!(I2C1->SR1 & 2)); /*until addr flag is set */
 800039c:	bf00      	nop
 800039e:	4b24      	ldr	r3, [pc, #144]	; (8000430 <I2C1_burstRead+0x130>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f003 0302 	and.w	r3, r3, #2
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0f9      	beq.n	800039e <I2C1_burstRead+0x9e>
	tmp = I2C1->SR2; /* clear addr flag*/
 80003aa:	4b21      	ldr	r3, [pc, #132]	; (8000430 <I2C1_burstRead+0x130>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	617b      	str	r3, [r7, #20]
	I2C1->CR1 |= 0x0400; /* Enable Acknowledge */
 80003b0:	4b1f      	ldr	r3, [pc, #124]	; (8000430 <I2C1_burstRead+0x130>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1e      	ldr	r2, [pc, #120]	; (8000430 <I2C1_burstRead+0x130>)
 80003b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ba:	6013      	str	r3, [r2, #0]


while(n > 0U)
 80003bc:	e02e      	b.n	800041c <I2C1_burstRead+0x11c>
{
/* One byte left */
	if(n == 1U)
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d11a      	bne.n	80003fa <I2C1_burstRead+0xfa>
	{
		I2C1->CR1 &= ~(0x400); /* Disable Acknowledge */
 80003c4:	4b1a      	ldr	r3, [pc, #104]	; (8000430 <I2C1_burstRead+0x130>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4a19      	ldr	r2, [pc, #100]	; (8000430 <I2C1_burstRead+0x130>)
 80003ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80003ce:	6013      	str	r3, [r2, #0]
		I2C1->CR1 |= 0x200;/* Generate Stop */
 80003d0:	4b17      	ldr	r3, [pc, #92]	; (8000430 <I2C1_burstRead+0x130>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a16      	ldr	r2, [pc, #88]	; (8000430 <I2C1_burstRead+0x130>)
 80003d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003da:	6013      	str	r3, [r2, #0]
		while (!(I2C1->SR1 & 0x40)); /* Wait for RXNEflag set */
 80003dc:	bf00      	nop
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <I2C1_burstRead+0x130>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d0f9      	beq.n	80003de <I2C1_burstRead+0xde>
		*data++ = I2C1->DR; /* Read data from DR */
 80003ea:	4b11      	ldr	r3, [pc, #68]	; (8000430 <I2C1_burstRead+0x130>)
 80003ec:	6919      	ldr	r1, [r3, #16]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	1c5a      	adds	r2, r3, #1
 80003f2:	607a      	str	r2, [r7, #4]
 80003f4:	b2ca      	uxtb	r2, r1
 80003f6:	701a      	strb	r2, [r3, #0]
		break;
 80003f8:	e014      	b.n	8000424 <I2C1_burstRead+0x124>
	}
	else
	{
		while (!(I2C1->SR1 & 0x40)); /* Wait until RXNE flag is set */
 80003fa:	bf00      	nop
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <I2C1_burstRead+0x130>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000404:	2b00      	cmp	r3, #0
 8000406:	d0f9      	beq.n	80003fc <I2C1_burstRead+0xfc>
		(*data++) = I2C1->DR; /* Read data from DR */
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <I2C1_burstRead+0x130>)
 800040a:	6919      	ldr	r1, [r3, #16]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	1c5a      	adds	r2, r3, #1
 8000410:	607a      	str	r2, [r7, #4]
 8000412:	b2ca      	uxtb	r2, r1
 8000414:	701a      	strb	r2, [r3, #0]
		n--;
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	3b01      	subs	r3, #1
 800041a:	60bb      	str	r3, [r7, #8]
while(n > 0U)
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d1cd      	bne.n	80003be <I2C1_burstRead+0xbe>
	}
  }
}
 8000422:	bf00      	nop
 8000424:	bf00      	nop
 8000426:	371c      	adds	r7, #28
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40005400 	.word	0x40005400

08000434 <delayMs>:
/* 16 MHz SYSCLK */
void delayMs(int n) {
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	int i;
	for (; n > 0; n--)
 800043c:	e00d      	b.n	800045a <delayMs+0x26>
		for (i = 0; i < 3195; i++) ;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	e002      	b.n	800044a <delayMs+0x16>
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3301      	adds	r3, #1
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	f640 427a 	movw	r2, #3194	; 0xc7a
 8000450:	4293      	cmp	r3, r2
 8000452:	ddf7      	ble.n	8000444 <delayMs+0x10>
	for (; n > 0; n--)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3b01      	subs	r3, #1
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2b00      	cmp	r3, #0
 800045e:	dcee      	bgt.n	800043e <delayMs+0xa>
}
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000472:	e7fe      	b.n	8000472 <NMI_Handler+0x4>

08000474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <HardFault_Handler+0x4>

0800047a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800047e:	e7fe      	b.n	800047e <MemManage_Handler+0x4>

08000480 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000484:	e7fe      	b.n	8000484 <BusFault_Handler+0x4>

08000486 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800048a:	e7fe      	b.n	800048a <UsageFault_Handler+0x4>

0800048c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ba:	f000 f83f 	bl	800053c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <SystemInit+0x20>)
 80004ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ce:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <SystemInit+0x20>)
 80004d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004ee:	490e      	ldr	r1, [pc, #56]	; (8000528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f4:	e002      	b.n	80004fc <LoopCopyDataInit>

080004f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fa:	3304      	adds	r3, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000500:	d3f9      	bcc.n	80004f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000502:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000504:	4c0b      	ldr	r4, [pc, #44]	; (8000534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000508:	e001      	b.n	800050e <LoopFillZerobss>

0800050a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800050c:	3204      	adds	r2, #4

0800050e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000510:	d3fb      	bcc.n	800050a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000512:	f7ff ffd7 	bl	80004c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000516:	f000 f825 	bl	8000564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800051a:	f7ff fe5d 	bl	80001d8 <main>
  bx  lr    
 800051e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800052c:	080005cc 	.word	0x080005cc
  ldr r2, =_sbss
 8000530:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000534:	20000024 	.word	0x20000024

08000538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC_IRQHandler>
	...

0800053c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_IncTick+0x20>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_IncTick+0x24>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4413      	add	r3, r2
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <HAL_IncTick+0x24>)
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000000 	.word	0x20000000
 8000560:	20000020 	.word	0x20000020

08000564 <__libc_init_array>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	4d0d      	ldr	r5, [pc, #52]	; (800059c <__libc_init_array+0x38>)
 8000568:	4c0d      	ldr	r4, [pc, #52]	; (80005a0 <__libc_init_array+0x3c>)
 800056a:	1b64      	subs	r4, r4, r5
 800056c:	10a4      	asrs	r4, r4, #2
 800056e:	2600      	movs	r6, #0
 8000570:	42a6      	cmp	r6, r4
 8000572:	d109      	bne.n	8000588 <__libc_init_array+0x24>
 8000574:	4d0b      	ldr	r5, [pc, #44]	; (80005a4 <__libc_init_array+0x40>)
 8000576:	4c0c      	ldr	r4, [pc, #48]	; (80005a8 <__libc_init_array+0x44>)
 8000578:	f000 f818 	bl	80005ac <_init>
 800057c:	1b64      	subs	r4, r4, r5
 800057e:	10a4      	asrs	r4, r4, #2
 8000580:	2600      	movs	r6, #0
 8000582:	42a6      	cmp	r6, r4
 8000584:	d105      	bne.n	8000592 <__libc_init_array+0x2e>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f855 3b04 	ldr.w	r3, [r5], #4
 800058c:	4798      	blx	r3
 800058e:	3601      	adds	r6, #1
 8000590:	e7ee      	b.n	8000570 <__libc_init_array+0xc>
 8000592:	f855 3b04 	ldr.w	r3, [r5], #4
 8000596:	4798      	blx	r3
 8000598:	3601      	adds	r6, #1
 800059a:	e7f2      	b.n	8000582 <__libc_init_array+0x1e>
 800059c:	080005c4 	.word	0x080005c4
 80005a0:	080005c4 	.word	0x080005c4
 80005a4:	080005c4 	.word	0x080005c4
 80005a8:	080005c8 	.word	0x080005c8

080005ac <_init>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr

080005b8 <_fini>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr
