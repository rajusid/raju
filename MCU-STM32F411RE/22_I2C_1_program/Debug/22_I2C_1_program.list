
22_I2C_1_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000444  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005dc  080005dc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005dc  080005dc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005dc  080005dc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005dc  080005dc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005dc  080005dc  000105dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005e0  080005e0  000105e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005e4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080005e8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080005e8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001565  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000574  00000000  00000000  00021599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00021b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000198  00000000  00000000  00021d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014d00  00000000  00000000  00021e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002873  00000000  00000000  00036b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008434c  00000000  00000000  0003940b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd757  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b0  00000000  00000000  000bd7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080005c4 	.word	0x080005c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080005c4 	.word	0x080005c4

080001d8 <I2C1_init>:
/*Pin
  PB8----SCL
  PB9-----SDA
   */
void I2C1_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	/*Configure GPIO port*/
	//Enable clock access to GPIOB
	RCC->AHB1ENR |= GPIOBEN;
 80001dc:	4b33      	ldr	r3, [pc, #204]	; (80002ac <I2C1_init+0xd4>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a32      	ldr	r2, [pc, #200]	; (80002ac <I2C1_init+0xd4>)
 80001e2:	f043 0302 	orr.w	r3, r3, #2
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	//Set PB8 and PB9 to alternate function mode
	GPIOB->MODER &= ~(1U<<16);
 80001e8:	4b31      	ldr	r3, [pc, #196]	; (80002b0 <I2C1_init+0xd8>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a30      	ldr	r2, [pc, #192]	; (80002b0 <I2C1_init+0xd8>)
 80001ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<17);
 80001f4:	4b2e      	ldr	r3, [pc, #184]	; (80002b0 <I2C1_init+0xd8>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a2d      	ldr	r2, [pc, #180]	; (80002b0 <I2C1_init+0xd8>)
 80001fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001fe:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1U<<18);
 8000200:	4b2b      	ldr	r3, [pc, #172]	; (80002b0 <I2C1_init+0xd8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a2a      	ldr	r2, [pc, #168]	; (80002b0 <I2C1_init+0xd8>)
 8000206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<19);
 800020c:	4b28      	ldr	r3, [pc, #160]	; (80002b0 <I2C1_init+0xd8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a27      	ldr	r2, [pc, #156]	; (80002b0 <I2C1_init+0xd8>)
 8000212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000216:	6013      	str	r3, [r2, #0]

	//Set PB8 and PB9  Output type to open drain mode
	GPIOB->OTYPER |= (1U<<8);
 8000218:	4b25      	ldr	r3, [pc, #148]	; (80002b0 <I2C1_init+0xd8>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	4a24      	ldr	r2, [pc, #144]	; (80002b0 <I2C1_init+0xd8>)
 800021e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000222:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<9);
 8000224:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <I2C1_init+0xd8>)
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	4a21      	ldr	r2, [pc, #132]	; (80002b0 <I2C1_init+0xd8>)
 800022a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800022e:	6053      	str	r3, [r2, #4]

	//Enable PullUp for PB8 and PB9
	GPIOB->PUPDR |= (1U<<16);
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <I2C1_init+0xd8>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <I2C1_init+0xd8>)
 8000236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800023a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<17);
 800023c:	4b1c      	ldr	r3, [pc, #112]	; (80002b0 <I2C1_init+0xd8>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	4a1b      	ldr	r2, [pc, #108]	; (80002b0 <I2C1_init+0xd8>)
 8000242:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000246:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |= (1U<<18);
 8000248:	4b19      	ldr	r3, [pc, #100]	; (80002b0 <I2C1_init+0xd8>)
 800024a:	68db      	ldr	r3, [r3, #12]
 800024c:	4a18      	ldr	r2, [pc, #96]	; (80002b0 <I2C1_init+0xd8>)
 800024e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000252:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<19);
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <I2C1_init+0xd8>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a15      	ldr	r2, [pc, #84]	; (80002b0 <I2C1_init+0xd8>)
 800025a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800025e:	60d3      	str	r3, [r2, #12]

	/*Configure I2C 1 peripheral*/
	//Enable clock access to I2C_1
	RCC->APB1ENR |= I2CEN;
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <I2C1_init+0xd4>)
 8000262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000264:	4a11      	ldr	r2, [pc, #68]	; (80002ac <I2C1_init+0xd4>)
 8000266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800026a:	6413      	str	r3, [r2, #64]	; 0x40

	//Enter reset mode
	I2C1->CR1 |=(1U<<15);
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <I2C1_init+0xdc>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a10      	ldr	r2, [pc, #64]	; (80002b4 <I2C1_init+0xdc>)
 8000272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000276:	6013      	str	r3, [r2, #0]

	//Come out of reset mode
	I2C1->CR1 &=~(1U<<15);
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <I2C1_init+0xdc>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <I2C1_init+0xdc>)
 800027e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000282:	6013      	str	r3, [r2, #0]

	//Set peripheral clock frequency
	I2C1->CR2 = (1U<<4);  //16Mhz
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <I2C1_init+0xdc>)
 8000286:	2210      	movs	r2, #16
 8000288:	605a      	str	r2, [r3, #4]

	// Set I2C to standard mode , 100 khz clk
	I2C1->CCR = I2C_100KHZ;
 800028a:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <I2C1_init+0xdc>)
 800028c:	2250      	movs	r2, #80	; 0x50
 800028e:	61da      	str	r2, [r3, #28]

	//Set rise time
	I2C1->TRISE = SD_MODE_MAX_RISE_TIME;
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <I2C1_init+0xdc>)
 8000292:	2211      	movs	r2, #17
 8000294:	621a      	str	r2, [r3, #32]

	//Enable I2C1 module
	I2C1->CR1 |= CR1_PE;
 8000296:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <I2C1_init+0xdc>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <I2C1_init+0xdc>)
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	6013      	str	r3, [r2, #0]
}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40020400 	.word	0x40020400
 80002b4:	40005400 	.word	0x40005400

080002b8 <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	603a      	str	r2, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
 80002c4:	460b      	mov	r3, r1
 80002c6:	71bb      	strb	r3, [r7, #6]
	volatile int temp;

	//Wait until not busy
	while(I2C1->SR2 & (SR2_BUSY)){}
 80002c8:	bf00      	nop
 80002ca:	4b34      	ldr	r3, [pc, #208]	; (800039c <I2C1_byteRead+0xe4>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f003 0302 	and.w	r3, r3, #2
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d1f9      	bne.n	80002ca <I2C1_byteRead+0x12>

	//Generate start
	I2C1->CR1 |= CR1_START;
 80002d6:	4b31      	ldr	r3, [pc, #196]	; (800039c <I2C1_byteRead+0xe4>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a30      	ldr	r2, [pc, #192]	; (800039c <I2C1_byteRead+0xe4>)
 80002dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e0:	6013      	str	r3, [r2, #0]

	//wait until start flag is set
	while (!(I2C1->SR1 & (SR1_SB))){}
 80002e2:	bf00      	nop
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <I2C1_byteRead+0xe4>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0f9      	beq.n	80002e4 <I2C1_byteRead+0x2c>

	//Transmit slave address + Write
	I2C1->DR =saddr<<1;
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	005a      	lsls	r2, r3, #1
 80002f4:	4b29      	ldr	r3, [pc, #164]	; (800039c <I2C1_byteRead+0xe4>)
 80002f6:	611a      	str	r2, [r3, #16]

	//Wait until addr flag is set
	while(!(I2C1->SR1 &(SR1_ADDR))){}
 80002f8:	bf00      	nop
 80002fa:	4b28      	ldr	r3, [pc, #160]	; (800039c <I2C1_byteRead+0xe4>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f003 0302 	and.w	r3, r3, #2
 8000302:	2b00      	cmp	r3, #0
 8000304:	d0f9      	beq.n	80002fa <I2C1_byteRead+0x42>

	//Clear the addr flag by reading it
	temp = I2C1->SR2;
 8000306:	4b25      	ldr	r3, [pc, #148]	; (800039c <I2C1_byteRead+0xe4>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	60fb      	str	r3, [r7, #12]

	//Send memory address
	I2C1->DR = maddr;
 800030c:	4a23      	ldr	r2, [pc, #140]	; (800039c <I2C1_byteRead+0xe4>)
 800030e:	79bb      	ldrb	r3, [r7, #6]
 8000310:	6113      	str	r3, [r2, #16]

	//Wait until transmitter is empty
	while(!(I2C1->SR1 & SR1_TXE)){}
 8000312:	bf00      	nop
 8000314:	4b21      	ldr	r3, [pc, #132]	; (800039c <I2C1_byteRead+0xe4>)
 8000316:	695b      	ldr	r3, [r3, #20]
 8000318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800031c:	2b00      	cmp	r3, #0
 800031e:	d0f9      	beq.n	8000314 <I2C1_byteRead+0x5c>

	//Generate restart
	I2C1->CR1 |= CR1_START;
 8000320:	4b1e      	ldr	r3, [pc, #120]	; (800039c <I2C1_byteRead+0xe4>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a1d      	ldr	r2, [pc, #116]	; (800039c <I2C1_byteRead+0xe4>)
 8000326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800032a:	6013      	str	r3, [r2, #0]

	//Wait until start flag is set
	while(!(I2C1->SR1 & SR1_SB)){}
 800032c:	bf00      	nop
 800032e:	4b1b      	ldr	r3, [pc, #108]	; (800039c <I2C1_byteRead+0xe4>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	f003 0301 	and.w	r3, r3, #1
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f9      	beq.n	800032e <I2C1_byteRead+0x76>

	//Transmit slave address + read
	I2C1->DR = saddr << 1 | 1 ;
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	f043 0201 	orr.w	r2, r3, #1
 8000342:	4b16      	ldr	r3, [pc, #88]	; (800039c <I2C1_byteRead+0xe4>)
 8000344:	611a      	str	r2, [r3, #16]

	//Wait until addr flag is set
	while(!(I2C1->SR1 &(SR1_ADDR))){}
 8000346:	bf00      	nop
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <I2C1_byteRead+0xe4>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f003 0302 	and.w	r3, r3, #2
 8000350:	2b00      	cmp	r3, #0
 8000352:	d0f9      	beq.n	8000348 <I2C1_byteRead+0x90>

	//Disable Acknowledge
	I2C1->CR1 &= ~CR1_ACK;
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <I2C1_byteRead+0xe4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a10      	ldr	r2, [pc, #64]	; (800039c <I2C1_byteRead+0xe4>)
 800035a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800035e:	6013      	str	r3, [r2, #0]

	//Clear the addr flag by reading it
	temp = I2C1->SR2;
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <I2C1_byteRead+0xe4>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	60fb      	str	r3, [r7, #12]

	//Generate stop after the data is received
	I2C1->CR1 |= CR1_STOP;
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <I2C1_byteRead+0xe4>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a0c      	ldr	r2, [pc, #48]	; (800039c <I2C1_byteRead+0xe4>)
 800036c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000370:	6013      	str	r3, [r2, #0]

	//Wait until RXNE flag is set
	while(!(I2C1->SR1 & SR1_RXNE)){}
 8000372:	bf00      	nop
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <I2C1_byteRead+0xe4>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <I2C1_byteRead+0xbc>

	//Read data from DR
	*data++ = I2C1->DR;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <I2C1_byteRead+0xe4>)
 8000382:	6919      	ldr	r1, [r3, #16]
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	1c5a      	adds	r2, r3, #1
 8000388:	603a      	str	r2, [r7, #0]
 800038a:	b2ca      	uxtb	r2, r1
 800038c:	701a      	strb	r2, [r3, #0]
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40005400 	.word	0x40005400

080003a0 <I2C1_byteWrite>:

void I2C1_byteWrite(char saddr, char maddr, char* data)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	603a      	str	r2, [r7, #0]
 80003aa:	71fb      	strb	r3, [r7, #7]
 80003ac:	460b      	mov	r3, r1
 80003ae:	71bb      	strb	r3, [r7, #6]

    // Wait until not busy
    //while (I2C1->SR2 & SR2_BUSY) {}

    // Generate start
    I2C1->CR1 |= CR1_START;
 80003b0:	4b20      	ldr	r3, [pc, #128]	; (8000434 <I2C1_byteWrite+0x94>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a1f      	ldr	r2, [pc, #124]	; (8000434 <I2C1_byteWrite+0x94>)
 80003b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ba:	6013      	str	r3, [r2, #0]

    // Wait until start flag is set
    while (!(I2C1->SR1 & SR1_SB)) {}
 80003bc:	bf00      	nop
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <I2C1_byteWrite+0x94>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <I2C1_byteWrite+0x1e>

    // Transmit slave address + Write
    I2C1->DR = saddr << 1;
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	005a      	lsls	r2, r3, #1
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <I2C1_byteWrite+0x94>)
 80003d0:	611a      	str	r2, [r3, #16]

    // Wait until addr flag is set
    while (!(I2C1->SR1 & SR1_ADDR)) {}
 80003d2:	bf00      	nop
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <I2C1_byteWrite+0x94>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	f003 0302 	and.w	r3, r3, #2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0f9      	beq.n	80003d4 <I2C1_byteWrite+0x34>

    // Clear the addr flag by reading it
    temp = I2C1->SR2;
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <I2C1_byteWrite+0x94>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	60fb      	str	r3, [r7, #12]

    // Send memory address
    I2C1->DR = maddr;
 80003e6:	4a13      	ldr	r2, [pc, #76]	; (8000434 <I2C1_byteWrite+0x94>)
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	6113      	str	r3, [r2, #16]

    // Wait until transmitter is empty
    while (!(I2C1->SR1 & SR1_TXE)) {}
 80003ec:	bf00      	nop
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <I2C1_byteWrite+0x94>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0f9      	beq.n	80003ee <I2C1_byteWrite+0x4e>

    // Send data
    I2C1->DR = data;
 80003fa:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <I2C1_byteWrite+0x94>)
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	6113      	str	r3, [r2, #16]

    // Wait until transmitter is empty and transfer is complete
    while (!(I2C1->SR1 & SR1_TXE) || !(I2C1->SR1 & SR1_BTF)) {}
 8000400:	bf00      	nop
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <I2C1_byteWrite+0x94>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800040a:	2b00      	cmp	r3, #0
 800040c:	d0f9      	beq.n	8000402 <I2C1_byteWrite+0x62>
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <I2C1_byteWrite+0x94>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f003 0304 	and.w	r3, r3, #4
 8000416:	2b00      	cmp	r3, #0
 8000418:	d0f3      	beq.n	8000402 <I2C1_byteWrite+0x62>

    // Generate stop
    I2C1->CR1 |= CR1_STOP;
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <I2C1_byteWrite+0x94>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a05      	ldr	r2, [pc, #20]	; (8000434 <I2C1_byteWrite+0x94>)
 8000420:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000424:	6013      	str	r3, [r2, #0]
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40005400 	.word	0x40005400

08000438 <main>:
#include "I2C.h"
#
#include <stdio.h>

int main()
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
    char data[2]; // To store the read data
    I2C1_init(); // Initialize the I2C1 peripheral
 800043e:	f7ff fecb 	bl	80001d8 <I2C1_init>

    //Write the address to the sensor
    I2C1_byteWrite(0x40,0xF3,data);
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	461a      	mov	r2, r3
 8000446:	21f3      	movs	r1, #243	; 0xf3
 8000448:	2040      	movs	r0, #64	; 0x40
 800044a:	f7ff ffa9 	bl	80003a0 <I2C1_byteWrite>

    // Read the temperature from the ES13505 sensor
    I2C1_byteRead(0x3A, 0x00, data); // Read the temperature value from the sensor's register
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	461a      	mov	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	203a      	movs	r0, #58	; 0x3a
 8000456:	f7ff ff2f 	bl	80002b8 <I2C1_byteRead>

    // Convert the raw data to temperature value (assuming a 12-bit resolution)
    int temp = (data[0] << 8) | data[1]; // Combine the two bytes of raw data into a 16-bit value
 800045a:	793b      	ldrb	r3, [r7, #4]
 800045c:	021b      	lsls	r3, r3, #8
 800045e:	797a      	ldrb	r2, [r7, #5]
 8000460:	4313      	orrs	r3, r2
 8000462:	60fb      	str	r3, [r7, #12]
    float temperature = (float)temp * 0.0625f; // Convert the raw data to temperature value (each bit represents 0.0625°C)
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	ee07 3a90 	vmov	s15, r3
 800046a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800046e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000484 <main+0x4c>
 8000472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000476:	edc7 7a02 	vstr	s15, [r7, #8]



    return 0;
 800047a:	2300      	movs	r3, #0
}
 800047c:	4618      	mov	r0, r3
 800047e:	3710      	adds	r7, #16
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	3d800000 	.word	0x3d800000

08000488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800048c:	e7fe      	b.n	800048c <NMI_Handler+0x4>

0800048e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <HardFault_Handler+0x4>

08000494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <MemManage_Handler+0x4>

0800049a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <BusFault_Handler+0x4>

080004a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <UsageFault_Handler+0x4>

080004a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d4:	f000 f83e 	bl	8000554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <SystemInit+0x20>)
 80004e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <SystemInit+0x20>)
 80004e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000538 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000506:	490e      	ldr	r1, [pc, #56]	; (8000540 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000508:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800051c:	4c0b      	ldr	r4, [pc, #44]	; (800054c <LoopFillZerobss+0x26>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800052a:	f7ff ffd7 	bl	80004dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800052e:	f000 f825 	bl	800057c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000532:	f7ff ff81 	bl	8000438 <main>
  bx  lr    
 8000536:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800053c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000540:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000544:	080005e4 	.word	0x080005e4
  ldr r2, =_sbss
 8000548:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800054c:	20000024 	.word	0x20000024

08000550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC_IRQHandler>
	...

08000554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_IncTick+0x20>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_IncTick+0x24>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4413      	add	r3, r2
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_IncTick+0x24>)
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000000 	.word	0x20000000
 8000578:	20000020 	.word	0x20000020

0800057c <__libc_init_array>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	4d0d      	ldr	r5, [pc, #52]	; (80005b4 <__libc_init_array+0x38>)
 8000580:	4c0d      	ldr	r4, [pc, #52]	; (80005b8 <__libc_init_array+0x3c>)
 8000582:	1b64      	subs	r4, r4, r5
 8000584:	10a4      	asrs	r4, r4, #2
 8000586:	2600      	movs	r6, #0
 8000588:	42a6      	cmp	r6, r4
 800058a:	d109      	bne.n	80005a0 <__libc_init_array+0x24>
 800058c:	4d0b      	ldr	r5, [pc, #44]	; (80005bc <__libc_init_array+0x40>)
 800058e:	4c0c      	ldr	r4, [pc, #48]	; (80005c0 <__libc_init_array+0x44>)
 8000590:	f000 f818 	bl	80005c4 <_init>
 8000594:	1b64      	subs	r4, r4, r5
 8000596:	10a4      	asrs	r4, r4, #2
 8000598:	2600      	movs	r6, #0
 800059a:	42a6      	cmp	r6, r4
 800059c:	d105      	bne.n	80005aa <__libc_init_array+0x2e>
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a4:	4798      	blx	r3
 80005a6:	3601      	adds	r6, #1
 80005a8:	e7ee      	b.n	8000588 <__libc_init_array+0xc>
 80005aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ae:	4798      	blx	r3
 80005b0:	3601      	adds	r6, #1
 80005b2:	e7f2      	b.n	800059a <__libc_init_array+0x1e>
 80005b4:	080005dc 	.word	0x080005dc
 80005b8:	080005dc 	.word	0x080005dc
 80005bc:	080005dc 	.word	0x080005dc
 80005c0:	080005e0 	.word	0x080005e0

080005c4 <_init>:
 80005c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c6:	bf00      	nop
 80005c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ca:	bc08      	pop	{r3}
 80005cc:	469e      	mov	lr, r3
 80005ce:	4770      	bx	lr

080005d0 <_fini>:
 80005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d2:	bf00      	nop
 80005d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d6:	bc08      	pop	{r3}
 80005d8:	469e      	mov	lr, r3
 80005da:	4770      	bx	lr
