
34_Temperature_Rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08006c60  08006c60  00016c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007084  08007084  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08007084  08007084  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007084  08007084  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800708c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049d0  200001d8  08007264  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ba8  08007264  00024ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cfc  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232e  00000000  00000000  00030f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00033238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  000341a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ce9  00000000  00000000  00035020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000faea  00000000  00000000  00038d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a0e8  00000000  00000000  000487f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e28db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005358  00000000  00000000  000e292c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c48 	.word	0x08006c48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08006c48 	.word	0x08006c48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <UART_Init>:
float AHT25_ConvertTemperature(uint8_t* data);

TaskHandle_t temperature_task_handle;

void UART_Init(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= 1;   // Enable GPIOA clock
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <UART_Init+0x7c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <UART_Init+0x7c>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= 0x20000;  // Enable USART2 clock
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <UART_Init+0x7c>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <UART_Init+0x7c>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40

    // Configure PA2 for USART2_TX
    GPIOA->AFR[0] &= ~0x0F00;     // Clear alternate function bits
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <UART_Init+0x80>)
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
 8000bd8:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <UART_Init+0x80>)
 8000bda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000bde:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= 0x0700; // Set alternate function 7 for USART2_TX
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <UART_Init+0x80>)
 8000be2:	6a1b      	ldr	r3, [r3, #32]
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <UART_Init+0x80>)
 8000be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000bea:	6213      	str	r3, [r2, #32]

    GPIOA->MODER &= ~0x0030;     // Clear mode bits
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <UART_Init+0x80>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <UART_Init+0x80>)
 8000bf2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bf6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= 0x0020;    // Set alternate function mode for PA2
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <UART_Init+0x80>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	; (8000c38 <UART_Init+0x80>)
 8000bfe:	f043 0320 	orr.w	r3, r3, #32
 8000c02:	6013      	str	r3, [r2, #0]

    USART2->BRR = 0x0683;                  // 9600 baud @ 16 MHz
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <UART_Init+0x84>)
 8000c06:	f240 6283 	movw	r2, #1667	; 0x683
 8000c0a:	609a      	str	r2, [r3, #8]
    USART2->CR1 = 0x0008;            // Enable transmitter
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <UART_Init+0x84>)
 8000c0e:	2208      	movs	r2, #8
 8000c10:	60da      	str	r2, [r3, #12]
    USART2->CR2 = 0x0000;                  // 1 stop bit
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <UART_Init+0x84>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
    USART2->CR3 = 0x0000;                  // No flow control
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <UART_Init+0x84>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
    USART2->CR1 |= 0x2000;           // Enable USART2
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <UART_Init+0x84>)
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <UART_Init+0x84>)
 8000c24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c28:	60d3      	str	r3, [r2, #12]
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	40004400 	.word	0x40004400

08000c40 <UART_TransmitString>:

void UART_TransmitString(const char* str)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < strlen(str); i++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	e00f      	b.n	8000c6e <UART_TransmitString+0x2e>
    {
        // Wait until UART2 transmit buffer is empty
        while (!(USART2->SR & 0x0080));
 8000c4e:	bf00      	nop
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <UART_TransmitString+0x48>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0f9      	beq.n	8000c50 <UART_TransmitString+0x10>

        // Write the character to the UART2 data register
        USART2->DR = (str[i] & 0xFF);
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4413      	add	r3, r2
 8000c62:	781a      	ldrb	r2, [r3, #0]
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <UART_TransmitString+0x48>)
 8000c66:	605a      	str	r2, [r3, #4]
    for (uint32_t i = 0; i < strlen(str); i++)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fab6 	bl	80001e0 <strlen>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d3e8      	bcc.n	8000c4e <UART_TransmitString+0xe>
    }
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40004400 	.word	0x40004400

08000c8c <UART_TransmitFloat>:

void UART_TransmitFloat(float value)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b09c      	sub	sp, #112	; 0x70
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	ed87 0a01 	vstr	s0, [r7, #4]
    char buffer[UART_TX_BUFFER_SIZE];

    // Convert the floating-point value to a string
    sprintf(buffer, "%.2f", value);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fc5e 	bl	8000558 <__aeabi_f2d>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	f107 000c 	add.w	r0, r7, #12
 8000ca4:	4905      	ldr	r1, [pc, #20]	; (8000cbc <UART_TransmitFloat+0x30>)
 8000ca6:	f003 fd63 	bl	8004770 <siprintf>

    // Transmit the string over UART2
    UART_TransmitString(buffer);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ffc6 	bl	8000c40 <UART_TransmitString>
}
 8000cb4:	bf00      	nop
 8000cb6:	3770      	adds	r7, #112	; 0x70
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	08006c60 	.word	0x08006c60

08000cc0 <__io_putchar>:

int __io_putchar(const char* str)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	UART_TransmitString(str);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ffb9 	bl	8000c40 <UART_TransmitString>
    return ch;
 8000cce:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <__io_putchar+0x1c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200001f8 	.word	0x200001f8

08000ce0 <main>:

int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af02      	add	r7, sp, #8
    // Initialize UART2 and other peripherals
    UART_Init();
 8000ce6:	f7ff ff67 	bl	8000bb8 <UART_Init>
    I2C_Init();
 8000cea:	f000 f843 	bl	8000d74 <I2C_Init>

    // Create the Temperature Task
    BaseType_t taskCreationResult = xTaskCreate(TemperatureTask, "Temperature Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, &temperature_task_handle);
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <main+0x2c>)
 8000cf0:	9301      	str	r3, [sp, #4]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	2280      	movs	r2, #128	; 0x80
 8000cfa:	4905      	ldr	r1, [pc, #20]	; (8000d10 <main+0x30>)
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <main+0x34>)
 8000cfe:	f001 fa4e 	bl	800219e <xTaskCreate>
 8000d02:	6078      	str	r0, [r7, #4]
        // Failed to create the task. Handle the error.
        // You can add error handling code here, such as logging or resetting the system.
    }

    // Start the FreeRTOS scheduler
    vTaskStartScheduler();
 8000d04:	f001 fbc4 	bl	8002490 <vTaskStartScheduler>

    // The scheduler should never return, but if it does, handle the error.
    // You can add error handling code here, such as logging or resetting the system.

    while (1) {
 8000d08:	e7fe      	b.n	8000d08 <main+0x28>
 8000d0a:	bf00      	nop
 8000d0c:	200001fc 	.word	0x200001fc
 8000d10:	08006c68 	.word	0x08006c68
 8000d14:	08000d19 	.word	0x08000d19

08000d18 <TemperatureTask>:
    }
}


void TemperatureTask(void *pvParameters)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
    while (1)
    {
        // Request temperature measurement
        AHT25_SendCommand(0xAC);
 8000d20:	20ac      	movs	r0, #172	; 0xac
 8000d22:	f000 f911 	bl	8000f48 <AHT25_SendCommand>

        // Wait for the measurement to complete
        // You may need to adjust the delay based on the sensor's response time
        osDelay(100);
 8000d26:	2064      	movs	r0, #100	; 0x64
 8000d28:	f000 fbec 	bl	8001504 <osDelay>

        // Read the temperature data
        uint8_t temperatureData[3];
        AHT25_ReadData(temperatureData, 3);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2103      	movs	r1, #3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f8c8 	bl	8000ec8 <AHT25_ReadData>

        // Convert and print the temperature value
        temperature = AHT25_ConvertTemperature(temperatureData);
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f000 f929 	bl	8000f94 <AHT25_ConvertTemperature>
 8000d42:	eef0 7a40 	vmov.f32	s15, s0
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <TemperatureTask+0x54>)
 8000d48:	edc3 7a00 	vstr	s15, [r3]
        printf("Temperature: %.2f°C\r\n", temperature);
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <TemperatureTask+0x54>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fc01 	bl	8000558 <__aeabi_f2d>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <TemperatureTask+0x58>)
 8000d5c:	f003 fcf0 	bl	8004740 <iprintf>

        // Wait for the next iteration
        osDelay(1000);
 8000d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d64:	f000 fbce 	bl	8001504 <osDelay>
    {
 8000d68:	e7da      	b.n	8000d20 <TemperatureTask+0x8>
 8000d6a:	bf00      	nop
 8000d6c:	200001f4 	.word	0x200001f4
 8000d70:	08006c7c 	.word	0x08006c7c

08000d74 <I2C_Init>:
    }
}

void I2C_Init(void) {
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= 2; /* Enable GPIOB clock */
 8000d78:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <I2C_Init+0xac>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a28      	ldr	r2, [pc, #160]	; (8000e20 <I2C_Init+0xac>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= 0x00200000; /* Enable I2C1 clock */
 8000d84:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <I2C_Init+0xac>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	4a25      	ldr	r2, [pc, #148]	; (8000e20 <I2C_Init+0xac>)
 8000d8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d8e:	6413      	str	r3, [r2, #64]	; 0x40

	/* configure PB8, PB9 pins for I2C1 */
	GPIOB->AFR[1] &= ~0x000000FF; /* PB8, PB9 I2C1 SCL, SDA */
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <I2C_Init+0xb0>)
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	4a23      	ldr	r2, [pc, #140]	; (8000e24 <I2C_Init+0xb0>)
 8000d96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d9a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= 0x00000044;
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <I2C_Init+0xb0>)
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	4a20      	ldr	r2, [pc, #128]	; (8000e24 <I2C_Init+0xb0>)
 8000da2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000da6:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOB->MODER &= ~0x000F0000; /* PB8, PB9 use alternate function */
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <I2C_Init+0xb0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <I2C_Init+0xb0>)
 8000dae:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000db2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x000A0000;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <I2C_Init+0xb0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a1a      	ldr	r2, [pc, #104]	; (8000e24 <I2C_Init+0xb0>)
 8000dba:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 8000dbe:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER |= 0x00000300; /* output open-drain */
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <I2C_Init+0xb0>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <I2C_Init+0xb0>)
 8000dc6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000dca:	6053      	str	r3, [r2, #4]
	GPIOB->PUPDR &= ~0x000F0000; /* with pull-ups */
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <I2C_Init+0xb0>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <I2C_Init+0xb0>)
 8000dd2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000dd6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= 0x00050000;
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <I2C_Init+0xb0>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <I2C_Init+0xb0>)
 8000dde:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000de2:	60d3      	str	r3, [r2, #12]

	I2C1->CR1 = 0x8000; /* software reset I2C1 */
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <I2C_Init+0xb4>)
 8000de6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dea:	601a      	str	r2, [r3, #0]
	I2C1->CR1 &= ~0x8000;/* out of reset */
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <I2C_Init+0xb4>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <I2C_Init+0xb4>)
 8000df2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000df6:	6013      	str	r3, [r2, #0]
	I2C1->CR2 = 0x0010; /* peripheral clock is 16 MHz*/
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <I2C_Init+0xb4>)
 8000dfa:	2210      	movs	r2, #16
 8000dfc:	605a      	str	r2, [r3, #4]
	I2C1->CCR = 80; /* standard mode, 100kHz clock */
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <I2C_Init+0xb4>)
 8000e00:	2250      	movs	r2, #80	; 0x50
 8000e02:	61da      	str	r2, [r3, #28]
	I2C1->TRISE = 17; /* maximum rise time */
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <I2C_Init+0xb4>)
 8000e06:	2211      	movs	r2, #17
 8000e08:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= 0x0001; /* enable I2C1module */
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <I2C_Init+0xb4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <I2C_Init+0xb4>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6013      	str	r3, [r2, #0]
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40005400 	.word	0x40005400

08000e2c <I2C_Start>:

// Generate I2C start condition
void I2C_Start(void) {
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
	while (I2C1->SR2 & I2C_SR2_BUSY);   // Wait until bus is not busy
 8000e30:	bf00      	nop
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <I2C_Start+0x38>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f9      	bne.n	8000e32 <I2C_Start+0x6>
    I2C1->CR1 |= I2C_CR1_START;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <I2C_Start+0x38>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <I2C_Start+0x38>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e48:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000e4a:	bf00      	nop
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <I2C_Start+0x38>)
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f9      	beq.n	8000e4c <I2C_Start+0x20>
}
 8000e58:	bf00      	nop
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40005400 	.word	0x40005400

08000e68 <I2C_Stop>:

// Generate I2C stop condition
void I2C_Stop(void) {
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <I2C_Stop+0x2c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <I2C_Stop+0x2c>)
 8000e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e76:	6013      	str	r3, [r2, #0]
    while (I2C1->CR1 & I2C_CR1_STOP);
 8000e78:	bf00      	nop
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <I2C_Stop+0x2c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f9      	bne.n	8000e7a <I2C_Stop+0x12>
}
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40005400 	.word	0x40005400

08000e98 <I2C_SendByte>:


// Send a byte over I2C
void I2C_SendByte(uint8_t data) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
    I2C1->DR = data;
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <I2C_SendByte+0x2c>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000ea8:	bf00      	nop
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <I2C_SendByte+0x2c>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f9      	beq.n	8000eaa <I2C_SendByte+0x12>
}
 8000eb6:	bf00      	nop
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	40005400 	.word	0x40005400

08000ec8 <AHT25_ReadData>:
uint8_t I2C_ReceiveByte(void) {
    while (!(I2C1->SR1 & I2C_SR1_RXNE));
    return I2C1->DR;
}

void AHT25_ReadData(uint8_t* data, uint8_t length) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	70fb      	strb	r3, [r7, #3]
    I2C_Start();
 8000ed4:	f7ff ffaa 	bl	8000e2c <I2C_Start>

    I2C_SendByte((AHT25_ADDRESS << 1) | 0x01);
 8000ed8:	2071      	movs	r0, #113	; 0x71
 8000eda:	f7ff ffdd 	bl	8000e98 <I2C_SendByte>
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000ede:	bf00      	nop
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <AHT25_ReadData+0x7c>)
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d0f9      	beq.n	8000ee0 <AHT25_ReadData+0x18>
    (void)I2C1->SR2;
 8000eec:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <AHT25_ReadData+0x7c>)
 8000eee:	699b      	ldr	r3, [r3, #24]

    for (uint8_t i = 0; i < length; i++) {
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01b      	b.n	8000f2e <AHT25_ReadData+0x66>
        if (i == length - 1) {
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d105      	bne.n	8000f0c <AHT25_ReadData+0x44>
            I2C1->CR1 &= ~I2C_CR1_ACK;
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <AHT25_ReadData+0x7c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <AHT25_ReadData+0x7c>)
 8000f06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
        }
        while (!(I2C1->SR1 & I2C_SR1_RXNE));
 8000f0c:	bf00      	nop
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <AHT25_ReadData+0x7c>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f9      	beq.n	8000f0e <AHT25_ReadData+0x46>
        data[i] = I2C1->DR;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <AHT25_ReadData+0x7c>)
 8000f1c:	6919      	ldr	r1, [r3, #16]
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	4413      	add	r3, r2
 8000f24:	b2ca      	uxtb	r2, r1
 8000f26:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d3df      	bcc.n	8000ef6 <AHT25_ReadData+0x2e>
    }

    I2C_Stop();
 8000f36:	f7ff ff97 	bl	8000e68 <I2C_Stop>
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40005400 	.word	0x40005400

08000f48 <AHT25_SendCommand>:

void AHT25_SendCommand(uint8_t command) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
    I2C_Start();
 8000f52:	f7ff ff6b 	bl	8000e2c <I2C_Start>

    I2C_SendByte(AHT25_ADDRESS << 1);
 8000f56:	2070      	movs	r0, #112	; 0x70
 8000f58:	f7ff ff9e 	bl	8000e98 <I2C_SendByte>
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000f5c:	bf00      	nop
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <AHT25_SendCommand+0x48>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0f9      	beq.n	8000f5e <AHT25_SendCommand+0x16>
    (void)I2C1->SR2;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <AHT25_SendCommand+0x48>)
 8000f6c:	699b      	ldr	r3, [r3, #24]

    I2C_SendByte(command);
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff91 	bl	8000e98 <I2C_SendByte>
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000f76:	bf00      	nop
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <AHT25_SendCommand+0x48>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f9      	beq.n	8000f78 <AHT25_SendCommand+0x30>

    I2C_Stop();
 8000f84:	f7ff ff70 	bl	8000e68 <I2C_Stop>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40005400 	.word	0x40005400

08000f94 <AHT25_ConvertTemperature>:


float AHT25_ConvertTemperature(uint8_t* data) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    float temperature = ((float)(((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5])) / 1048576.0f * 200.0f - 50.0f;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3303      	adds	r3, #3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	041b      	lsls	r3, r3, #16
 8000fa4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3304      	adds	r3, #4
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	3205      	adds	r2, #5
 8000fb6:	7812      	ldrb	r2, [r2, #0]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000ff8 <AHT25_ConvertTemperature+0x64>
 8000fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fca:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000ffc <AHT25_ConvertTemperature+0x68>
 8000fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001000 <AHT25_ConvertTemperature+0x6c>
 8000fd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fda:	edc7 7a03 	vstr	s15, [r7, #12]
    UART_TransmitFloat(temperature);
 8000fde:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fe2:	f7ff fe53 	bl	8000c8c <UART_TransmitFloat>
    return temperature;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	ee07 3a90 	vmov	s15, r3
}
 8000fec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	49800000 	.word	0x49800000
 8000ffc:	43480000 	.word	0x43480000
 8001000:	42480000 	.word	0x42480000

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x4>

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001036:	f000 f906 	bl	8001246 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000200 	.word	0x20000200

08001044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return 1;
 8001048:	2301      	movs	r3, #1
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_kill>:

int _kill(int pid, int sig)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800105e:	f002 fec5 	bl	8003dec <__errno>
 8001062:	4603      	mov	r3, r0
 8001064:	2216      	movs	r2, #22
 8001066:	601a      	str	r2, [r3, #0]
  return -1;
 8001068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_exit>:

void _exit (int status)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800107c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ffe7 	bl	8001054 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001086:	e7fe      	b.n	8001086 <_exit+0x12>

08001088 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e00a      	b.n	80010b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800109a:	f3af 8000 	nop.w
 800109e:	4601      	mov	r1, r0
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	60ba      	str	r2, [r7, #8]
 80010a6:	b2ca      	uxtb	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	dbf0      	blt.n	800109a <_read+0x12>
  }

  return len;
 80010b8:	687b      	ldr	r3, [r7, #4]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	e009      	b.n	80010e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60ba      	str	r2, [r7, #8]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fdef 	bl	8000cc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbf1      	blt.n	80010d4 <_write+0x12>
  }
  return len;
 80010f0:	687b      	ldr	r3, [r7, #4]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_close>:

int _close(int file)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001122:	605a      	str	r2, [r3, #4]
  return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <_isatty>:

int _isatty(int file)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800116c:	4a14      	ldr	r2, [pc, #80]	; (80011c0 <_sbrk+0x5c>)
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <_sbrk+0x60>)
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <_sbrk+0x64>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <_sbrk+0x68>)
 8001184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	429a      	cmp	r2, r3
 8001192:	d207      	bcs.n	80011a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001194:	f002 fe2a 	bl	8003dec <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	220c      	movs	r2, #12
 800119c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a2:	e009      	b.n	80011b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <_sbrk+0x64>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <_sbrk+0x64>)
 80011b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b6:	68fb      	ldr	r3, [r7, #12]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20020000 	.word	0x20020000
 80011c4:	00000400 	.word	0x00000400
 80011c8:	20000248 	.word	0x20000248
 80011cc:	20004ba8 	.word	0x20004ba8

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800122c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011fa:	490e      	ldr	r1, [pc, #56]	; (8001234 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001210:	4c0b      	ldr	r4, [pc, #44]	; (8001240 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800121e:	f7ff ffd7 	bl	80011d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001222:	f002 fde9 	bl	8003df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001226:	f7ff fd5b 	bl	8000ce0 <main>
  bx  lr    
 800122a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800122c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001238:	0800708c 	.word	0x0800708c
  ldr r2, =_sbss
 800123c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001240:	20004ba8 	.word	0x20004ba8

08001244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC_IRQHandler>

08001246 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b02      	cmp	r3, #2
 800125a:	d122      	bne.n	80012a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b02      	cmp	r3, #2
 8001268:	d11b      	bne.n	80012a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f06f 0202 	mvn.w	r2, #2
 8001272:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 f8f8 	bl	800147e <HAL_TIM_IC_CaptureCallback>
 800128e:	e005      	b.n	800129c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f8ea 	bl	800146a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f8fb 	bl	8001492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d122      	bne.n	80012f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	d11b      	bne.n	80012f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f06f 0204 	mvn.w	r2, #4
 80012c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 f8ce 	bl	800147e <HAL_TIM_IC_CaptureCallback>
 80012e2:	e005      	b.n	80012f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f8c0 	bl	800146a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f8d1 	bl	8001492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	2b08      	cmp	r3, #8
 8001302:	d122      	bne.n	800134a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b08      	cmp	r3, #8
 8001310:	d11b      	bne.n	800134a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f06f 0208 	mvn.w	r2, #8
 800131a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2204      	movs	r2, #4
 8001320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f8a4 	bl	800147e <HAL_TIM_IC_CaptureCallback>
 8001336:	e005      	b.n	8001344 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 f896 	bl	800146a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f8a7 	bl	8001492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	2b10      	cmp	r3, #16
 8001356:	d122      	bne.n	800139e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b10      	cmp	r3, #16
 8001364:	d11b      	bne.n	800139e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f06f 0210 	mvn.w	r2, #16
 800136e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2208      	movs	r2, #8
 8001374:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f87a 	bl	800147e <HAL_TIM_IC_CaptureCallback>
 800138a:	e005      	b.n	8001398 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f86c 	bl	800146a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 f87d 	bl	8001492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d10e      	bne.n	80013ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f06f 0201 	mvn.w	r2, #1
 80013c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f846 	bl	8001456 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d4:	2b80      	cmp	r3, #128	; 0x80
 80013d6:	d10e      	bne.n	80013f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e2:	2b80      	cmp	r3, #128	; 0x80
 80013e4:	d107      	bne.n	80013f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80013ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f86c 	bl	80014ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001400:	2b40      	cmp	r3, #64	; 0x40
 8001402:	d10e      	bne.n	8001422 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800140e:	2b40      	cmp	r3, #64	; 0x40
 8001410:	d107      	bne.n	8001422 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800141a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f842 	bl	80014a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	2b20      	cmp	r3, #32
 800142e:	d10e      	bne.n	800144e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	2b20      	cmp	r3, #32
 800143c:	d107      	bne.n	800144e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f06f 0220 	mvn.w	r2, #32
 8001446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f836 	bl	80014ba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <SysTick_Handler+0x1c>)
 80014ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80014ec:	f001 fc18 	bl	8002d20 <xTaskGetSchedulerState>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d001      	beq.n	80014fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80014f6:	f002 f9ff 	bl	80038f8 <xPortSysTickHandler>
  }
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800150c:	f3ef 8305 	mrs	r3, IPSR
 8001510:	60bb      	str	r3, [r7, #8]
  return(result);
 8001512:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <osDelay+0x1c>
    stat = osErrorISR;
 8001518:	f06f 0305 	mvn.w	r3, #5
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	e007      	b.n	8001530 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <osDelay+0x2c>
      vTaskDelay(ticks);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 ff7c 	bl	8002428 <vTaskDelay>
    }
  }

  return (stat);
 8001530:	68fb      	ldr	r3, [r7, #12]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4a07      	ldr	r2, [pc, #28]	; (8001568 <vApplicationGetIdleTaskMemory+0x2c>)
 800154c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <vApplicationGetIdleTaskMemory+0x30>)
 8001552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	2000024c 	.word	0x2000024c
 800156c:	200002a8 	.word	0x200002a8

08001570 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4a07      	ldr	r2, [pc, #28]	; (800159c <vApplicationGetTimerTaskMemory+0x2c>)
 8001580:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <vApplicationGetTimerTaskMemory+0x30>)
 8001586:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	200004a8 	.word	0x200004a8
 80015a0:	20000504 	.word	0x20000504

080015a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f103 0208 	add.w	r2, r3, #8
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f103 0208 	add.w	r2, r3, #8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f103 0208 	add.w	r2, r3, #8
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	601a      	str	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800165c:	d103      	bne.n	8001666 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	e00c      	b.n	8001680 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3308      	adds	r3, #8
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e002      	b.n	8001674 <vListInsert+0x2e>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	429a      	cmp	r2, r3
 800167e:	d2f6      	bcs.n	800166e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6892      	ldr	r2, [r2, #8]
 80016ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6852      	ldr	r2, [r2, #4]
 80016d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d103      	bne.n	80016ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	1e5a      	subs	r2, r3, #1
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10a      	bne.n	8001736 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001724:	f383 8811 	msr	BASEPRI, r3
 8001728:	f3bf 8f6f 	isb	sy
 800172c:	f3bf 8f4f 	dsb	sy
 8001730:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001732:	bf00      	nop
 8001734:	e7fe      	b.n	8001734 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001736:	f002 f84d 	bl	80037d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	68f9      	ldr	r1, [r7, #12]
 8001744:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	441a      	add	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001766:	3b01      	subs	r3, #1
 8001768:	68f9      	ldr	r1, [r7, #12]
 800176a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800176c:	fb01 f303 	mul.w	r3, r1, r3
 8001770:	441a      	add	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	22ff      	movs	r2, #255	; 0xff
 800177a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	22ff      	movs	r2, #255	; 0xff
 8001782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d114      	bne.n	80017b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d01a      	beq.n	80017ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3310      	adds	r3, #16
 8001798:	4618      	mov	r0, r3
 800179a:	f001 f903 	bl	80029a4 <xTaskRemoveFromEventList>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d012      	beq.n	80017ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <xQueueGenericReset+0xcc>)
 80017a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	f3bf 8f4f 	dsb	sy
 80017b0:	f3bf 8f6f 	isb	sy
 80017b4:	e009      	b.n	80017ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3310      	adds	r3, #16
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fef2 	bl	80015a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3324      	adds	r3, #36	; 0x24
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff feed 	bl	80015a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80017ca:	f002 f833 	bl	8003834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	e000ed04 	.word	0xe000ed04

080017dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	; 0x38
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10a      	bne.n	8001806 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80017f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f4:	f383 8811 	msr	BASEPRI, r3
 80017f8:	f3bf 8f6f 	isb	sy
 80017fc:	f3bf 8f4f 	dsb	sy
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001802:	bf00      	nop
 8001804:	e7fe      	b.n	8001804 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800180c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001810:	f383 8811 	msr	BASEPRI, r3
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800181e:	bf00      	nop
 8001820:	e7fe      	b.n	8001820 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <xQueueGenericCreateStatic+0x52>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <xQueueGenericCreateStatic+0x56>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <xQueueGenericCreateStatic+0x58>
 8001832:	2300      	movs	r3, #0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10a      	bne.n	800184e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183c:	f383 8811 	msr	BASEPRI, r3
 8001840:	f3bf 8f6f 	isb	sy
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	623b      	str	r3, [r7, #32]
}
 800184a:	bf00      	nop
 800184c:	e7fe      	b.n	800184c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <xQueueGenericCreateStatic+0x7e>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <xQueueGenericCreateStatic+0x82>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <xQueueGenericCreateStatic+0x84>
 800185e:	2300      	movs	r3, #0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10a      	bne.n	800187a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001868:	f383 8811 	msr	BASEPRI, r3
 800186c:	f3bf 8f6f 	isb	sy
 8001870:	f3bf 8f4f 	dsb	sy
 8001874:	61fb      	str	r3, [r7, #28]
}
 8001876:	bf00      	nop
 8001878:	e7fe      	b.n	8001878 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800187a:	2350      	movs	r3, #80	; 0x50
 800187c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	2b50      	cmp	r3, #80	; 0x50
 8001882:	d00a      	beq.n	800189a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001888:	f383 8811 	msr	BASEPRI, r3
 800188c:	f3bf 8f6f 	isb	sy
 8001890:	f3bf 8f4f 	dsb	sy
 8001894:	61bb      	str	r3, [r7, #24]
}
 8001896:	bf00      	nop
 8001898:	e7fe      	b.n	8001898 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800189a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80018a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00d      	beq.n	80018c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80018a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80018ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80018b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4613      	mov	r3, r2
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f805 	bl	80018cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3730      	adds	r7, #48	; 0x30
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d103      	bne.n	80018e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e002      	b.n	80018ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80018fa:	2101      	movs	r1, #1
 80018fc:	69b8      	ldr	r0, [r7, #24]
 80018fe:	f7ff ff05 	bl	800170c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08e      	sub	sp, #56	; 0x38
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10a      	bne.n	8001946 <xQueueGenericSend+0x32>
	__asm volatile
 8001930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001934:	f383 8811 	msr	BASEPRI, r3
 8001938:	f3bf 8f6f 	isb	sy
 800193c:	f3bf 8f4f 	dsb	sy
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001942:	bf00      	nop
 8001944:	e7fe      	b.n	8001944 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d103      	bne.n	8001954 <xQueueGenericSend+0x40>
 800194c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <xQueueGenericSend+0x44>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <xQueueGenericSend+0x46>
 8001958:	2300      	movs	r3, #0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10a      	bne.n	8001974 <xQueueGenericSend+0x60>
	__asm volatile
 800195e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001962:	f383 8811 	msr	BASEPRI, r3
 8001966:	f3bf 8f6f 	isb	sy
 800196a:	f3bf 8f4f 	dsb	sy
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001970:	bf00      	nop
 8001972:	e7fe      	b.n	8001972 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d103      	bne.n	8001982 <xQueueGenericSend+0x6e>
 800197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800197c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <xQueueGenericSend+0x72>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <xQueueGenericSend+0x74>
 8001986:	2300      	movs	r3, #0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10a      	bne.n	80019a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800198c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001990:	f383 8811 	msr	BASEPRI, r3
 8001994:	f3bf 8f6f 	isb	sy
 8001998:	f3bf 8f4f 	dsb	sy
 800199c:	623b      	str	r3, [r7, #32]
}
 800199e:	bf00      	nop
 80019a0:	e7fe      	b.n	80019a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80019a2:	f001 f9bd 	bl	8002d20 <xTaskGetSchedulerState>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <xQueueGenericSend+0x9e>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <xQueueGenericSend+0xa2>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <xQueueGenericSend+0xa4>
 80019b6:	2300      	movs	r3, #0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10a      	bne.n	80019d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80019bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c0:	f383 8811 	msr	BASEPRI, r3
 80019c4:	f3bf 8f6f 	isb	sy
 80019c8:	f3bf 8f4f 	dsb	sy
 80019cc:	61fb      	str	r3, [r7, #28]
}
 80019ce:	bf00      	nop
 80019d0:	e7fe      	b.n	80019d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80019d2:	f001 feff 	bl	80037d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019de:	429a      	cmp	r2, r3
 80019e0:	d302      	bcc.n	80019e8 <xQueueGenericSend+0xd4>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d129      	bne.n	8001a3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80019ee:	f000 fa0b 	bl	8001e08 <prvCopyDataToQueue>
 80019f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d010      	beq.n	8001a1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fe:	3324      	adds	r3, #36	; 0x24
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 ffcf 	bl	80029a4 <xTaskRemoveFromEventList>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001a0c:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <xQueueGenericSend+0x1f8>)
 8001a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f3bf 8f4f 	dsb	sy
 8001a18:	f3bf 8f6f 	isb	sy
 8001a1c:	e00a      	b.n	8001a34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001a24:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <xQueueGenericSend+0x1f8>)
 8001a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	f3bf 8f4f 	dsb	sy
 8001a30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001a34:	f001 fefe 	bl	8003834 <vPortExitCritical>
				return pdPASS;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e063      	b.n	8001b04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d103      	bne.n	8001a4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001a42:	f001 fef7 	bl	8003834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e05c      	b.n	8001b04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d106      	bne.n	8001a5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 f809 	bl	8002a6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001a5e:	f001 fee9 	bl	8003834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001a62:	f000 fd7b 	bl	800255c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a66:	f001 feb5 	bl	80037d4 <vPortEnterCritical>
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a76:	d103      	bne.n	8001a80 <xQueueGenericSend+0x16c>
 8001a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a8c:	d103      	bne.n	8001a96 <xQueueGenericSend+0x182>
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a96:	f001 fecd 	bl	8003834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a9a:	1d3a      	adds	r2, r7, #4
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fff8 	bl	8002a98 <xTaskCheckForTimeOut>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d124      	bne.n	8001af8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001aae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ab0:	f000 faa2 	bl	8001ff8 <prvIsQueueFull>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d018      	beq.n	8001aec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abc:	3310      	adds	r3, #16
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 ff1e 	bl	8002904 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001aca:	f000 fa2d 	bl	8001f28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001ace:	f000 fd53 	bl	8002578 <xTaskResumeAll>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f47f af7c 	bne.w	80019d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <xQueueGenericSend+0x1f8>)
 8001adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	f3bf 8f4f 	dsb	sy
 8001ae6:	f3bf 8f6f 	isb	sy
 8001aea:	e772      	b.n	80019d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001aee:	f000 fa1b 	bl	8001f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001af2:	f000 fd41 	bl	8002578 <xTaskResumeAll>
 8001af6:	e76c      	b.n	80019d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001afa:	f000 fa15 	bl	8001f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001afe:	f000 fd3b 	bl	8002578 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001b02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3738      	adds	r7, #56	; 0x38
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	e000ed04 	.word	0xe000ed04

08001b10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b090      	sub	sp, #64	; 0x40
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10a      	bne.n	8001b3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2c:	f383 8811 	msr	BASEPRI, r3
 8001b30:	f3bf 8f6f 	isb	sy
 8001b34:	f3bf 8f4f 	dsb	sy
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001b3a:	bf00      	nop
 8001b3c:	e7fe      	b.n	8001b3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d103      	bne.n	8001b4c <xQueueGenericSendFromISR+0x3c>
 8001b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <xQueueGenericSendFromISR+0x40>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <xQueueGenericSendFromISR+0x42>
 8001b50:	2300      	movs	r3, #0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10a      	bne.n	8001b6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5a:	f383 8811 	msr	BASEPRI, r3
 8001b5e:	f3bf 8f6f 	isb	sy
 8001b62:	f3bf 8f4f 	dsb	sy
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001b68:	bf00      	nop
 8001b6a:	e7fe      	b.n	8001b6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d103      	bne.n	8001b7a <xQueueGenericSendFromISR+0x6a>
 8001b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d101      	bne.n	8001b7e <xQueueGenericSendFromISR+0x6e>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <xQueueGenericSendFromISR+0x70>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10a      	bne.n	8001b9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b88:	f383 8811 	msr	BASEPRI, r3
 8001b8c:	f3bf 8f6f 	isb	sy
 8001b90:	f3bf 8f4f 	dsb	sy
 8001b94:	623b      	str	r3, [r7, #32]
}
 8001b96:	bf00      	nop
 8001b98:	e7fe      	b.n	8001b98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001b9a:	f001 fefd 	bl	8003998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001b9e:	f3ef 8211 	mrs	r2, BASEPRI
 8001ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba6:	f383 8811 	msr	BASEPRI, r3
 8001baa:	f3bf 8f6f 	isb	sy
 8001bae:	f3bf 8f4f 	dsb	sy
 8001bb2:	61fa      	str	r2, [r7, #28]
 8001bb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d302      	bcc.n	8001bcc <xQueueGenericSendFromISR+0xbc>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d12f      	bne.n	8001c2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001be2:	f000 f911 	bl	8001e08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001be6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bee:	d112      	bne.n	8001c16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d016      	beq.n	8001c26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfa:	3324      	adds	r3, #36	; 0x24
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fed1 	bl	80029a4 <xTaskRemoveFromEventList>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00e      	beq.n	8001c26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	e007      	b.n	8001c26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001c16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	b25a      	sxtb	r2, r3
 8001c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001c26:	2301      	movs	r3, #1
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001c2a:	e001      	b.n	8001c30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001c3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3740      	adds	r7, #64	; 0x40
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	; 0x30
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10a      	bne.n	8001c78 <xQueueReceive+0x30>
	__asm volatile
 8001c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c66:	f383 8811 	msr	BASEPRI, r3
 8001c6a:	f3bf 8f6f 	isb	sy
 8001c6e:	f3bf 8f4f 	dsb	sy
 8001c72:	623b      	str	r3, [r7, #32]
}
 8001c74:	bf00      	nop
 8001c76:	e7fe      	b.n	8001c76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d103      	bne.n	8001c86 <xQueueReceive+0x3e>
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <xQueueReceive+0x42>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <xQueueReceive+0x44>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10a      	bne.n	8001ca6 <xQueueReceive+0x5e>
	__asm volatile
 8001c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c94:	f383 8811 	msr	BASEPRI, r3
 8001c98:	f3bf 8f6f 	isb	sy
 8001c9c:	f3bf 8f4f 	dsb	sy
 8001ca0:	61fb      	str	r3, [r7, #28]
}
 8001ca2:	bf00      	nop
 8001ca4:	e7fe      	b.n	8001ca4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ca6:	f001 f83b 	bl	8002d20 <xTaskGetSchedulerState>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <xQueueReceive+0x6e>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <xQueueReceive+0x72>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <xQueueReceive+0x74>
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10a      	bne.n	8001cd6 <xQueueReceive+0x8e>
	__asm volatile
 8001cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc4:	f383 8811 	msr	BASEPRI, r3
 8001cc8:	f3bf 8f6f 	isb	sy
 8001ccc:	f3bf 8f4f 	dsb	sy
 8001cd0:	61bb      	str	r3, [r7, #24]
}
 8001cd2:	bf00      	nop
 8001cd4:	e7fe      	b.n	8001cd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001cd6:	f001 fd7d 	bl	80037d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d01f      	beq.n	8001d26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cea:	f000 f8f7 	bl	8001edc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	1e5a      	subs	r2, r3, #1
 8001cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00f      	beq.n	8001d1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d00:	3310      	adds	r3, #16
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fe4e 	bl	80029a4 <xTaskRemoveFromEventList>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001d0e:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <xQueueReceive+0x1bc>)
 8001d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f3bf 8f4f 	dsb	sy
 8001d1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001d1e:	f001 fd89 	bl	8003834 <vPortExitCritical>
				return pdPASS;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e069      	b.n	8001dfa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d103      	bne.n	8001d34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001d2c:	f001 fd82 	bl	8003834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e062      	b.n	8001dfa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fe94 	bl	8002a6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001d48:	f001 fd74 	bl	8003834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001d4c:	f000 fc06 	bl	800255c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001d50:	f001 fd40 	bl	80037d4 <vPortEnterCritical>
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d5a:	b25b      	sxtb	r3, r3
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d60:	d103      	bne.n	8001d6a <xQueueReceive+0x122>
 8001d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d70:	b25b      	sxtb	r3, r3
 8001d72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d76:	d103      	bne.n	8001d80 <xQueueReceive+0x138>
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d80:	f001 fd58 	bl	8003834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d84:	1d3a      	adds	r2, r7, #4
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fe83 	bl	8002a98 <xTaskCheckForTimeOut>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d123      	bne.n	8001de0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d9a:	f000 f917 	bl	8001fcc <prvIsQueueEmpty>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d017      	beq.n	8001dd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	3324      	adds	r3, #36	; 0x24
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 fda9 	bl	8002904 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001db4:	f000 f8b8 	bl	8001f28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001db8:	f000 fbde 	bl	8002578 <xTaskResumeAll>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d189      	bne.n	8001cd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <xQueueReceive+0x1bc>)
 8001dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	f3bf 8f4f 	dsb	sy
 8001dce:	f3bf 8f6f 	isb	sy
 8001dd2:	e780      	b.n	8001cd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dd6:	f000 f8a7 	bl	8001f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001dda:	f000 fbcd 	bl	8002578 <xTaskResumeAll>
 8001dde:	e77a      	b.n	8001cd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001de2:	f000 f8a1 	bl	8001f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001de6:	f000 fbc7 	bl	8002578 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dec:	f000 f8ee 	bl	8001fcc <prvIsQueueEmpty>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f43f af6f 	beq.w	8001cd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001df8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3730      	adds	r7, #48	; 0x30
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	e000ed04 	.word	0xe000ed04

08001e08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10d      	bne.n	8001e42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d14d      	bne.n	8001eca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 ff92 	bl	8002d5c <xTaskPriorityDisinherit>
 8001e38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	e043      	b.n	8001eca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d119      	bne.n	8001e7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6858      	ldr	r0, [r3, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	461a      	mov	r2, r3
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	f001 fff4 	bl	8003e40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	441a      	add	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d32b      	bcc.n	8001eca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	e026      	b.n	8001eca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	68d8      	ldr	r0, [r3, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	461a      	mov	r2, r3
 8001e86:	68b9      	ldr	r1, [r7, #8]
 8001e88:	f001 ffda 	bl	8003e40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	425b      	negs	r3, r3
 8001e96:	441a      	add	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d207      	bcs.n	8001eb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	441a      	add	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d105      	bne.n	8001eca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001ed2:	697b      	ldr	r3, [r7, #20]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d018      	beq.n	8001f20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	441a      	add	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d303      	bcc.n	8001f10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68d9      	ldr	r1, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	461a      	mov	r2, r3
 8001f1a:	6838      	ldr	r0, [r7, #0]
 8001f1c:	f001 ff90 	bl	8003e40 <memcpy>
	}
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001f30:	f001 fc50 	bl	80037d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f3c:	e011      	b.n	8001f62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d012      	beq.n	8001f6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3324      	adds	r3, #36	; 0x24
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 fd2a 	bl	80029a4 <xTaskRemoveFromEventList>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001f56:	f000 fe01 	bl	8002b5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	dce9      	bgt.n	8001f3e <prvUnlockQueue+0x16>
 8001f6a:	e000      	b.n	8001f6e <prvUnlockQueue+0x46>
					break;
 8001f6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	22ff      	movs	r2, #255	; 0xff
 8001f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001f76:	f001 fc5d 	bl	8003834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001f7a:	f001 fc2b 	bl	80037d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f86:	e011      	b.n	8001fac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d012      	beq.n	8001fb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3310      	adds	r3, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 fd05 	bl	80029a4 <xTaskRemoveFromEventList>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001fa0:	f000 fddc 	bl	8002b5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001fa4:	7bbb      	ldrb	r3, [r7, #14]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	dce9      	bgt.n	8001f88 <prvUnlockQueue+0x60>
 8001fb4:	e000      	b.n	8001fb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001fb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	22ff      	movs	r2, #255	; 0xff
 8001fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001fc0:	f001 fc38 	bl	8003834 <vPortExitCritical>
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001fd4:	f001 fbfe 	bl	80037d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e001      	b.n	8001fea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001fea:	f001 fc23 	bl	8003834 <vPortExitCritical>

	return xReturn;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002000:	f001 fbe8 	bl	80037d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	429a      	cmp	r2, r3
 800200e:	d102      	bne.n	8002016 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002010:	2301      	movs	r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	e001      	b.n	800201a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800201a:	f001 fc0b 	bl	8003834 <vPortExitCritical>

	return xReturn;
 800201e:	68fb      	ldr	r3, [r7, #12]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	e014      	b.n	8002062 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002038:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <vQueueAddToRegistry+0x50>)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10b      	bne.n	800205c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002044:	490c      	ldr	r1, [pc, #48]	; (8002078 <vQueueAddToRegistry+0x50>)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <vQueueAddToRegistry+0x50>)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800205a:	e006      	b.n	800206a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3301      	adds	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b07      	cmp	r3, #7
 8002066:	d9e7      	bls.n	8002038 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000904 	.word	0x20000904

0800207c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800208c:	f001 fba2 	bl	80037d4 <vPortEnterCritical>
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002096:	b25b      	sxtb	r3, r3
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800209c:	d103      	bne.n	80020a6 <vQueueWaitForMessageRestricted+0x2a>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020b2:	d103      	bne.n	80020bc <vQueueWaitForMessageRestricted+0x40>
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80020bc:	f001 fbba 	bl	8003834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d106      	bne.n	80020d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3324      	adds	r3, #36	; 0x24
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	68b9      	ldr	r1, [r7, #8]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fc3b 	bl	800294c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f7ff ff26 	bl	8001f28 <prvUnlockQueue>
	}
 80020dc:	bf00      	nop
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08e      	sub	sp, #56	; 0x38
 80020e8:	af04      	add	r7, sp, #16
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80020f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10a      	bne.n	800210e <xTaskCreateStatic+0x2a>
	__asm volatile
 80020f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020fc:	f383 8811 	msr	BASEPRI, r3
 8002100:	f3bf 8f6f 	isb	sy
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	623b      	str	r3, [r7, #32]
}
 800210a:	bf00      	nop
 800210c:	e7fe      	b.n	800210c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10a      	bne.n	800212a <xTaskCreateStatic+0x46>
	__asm volatile
 8002114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002118:	f383 8811 	msr	BASEPRI, r3
 800211c:	f3bf 8f6f 	isb	sy
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	61fb      	str	r3, [r7, #28]
}
 8002126:	bf00      	nop
 8002128:	e7fe      	b.n	8002128 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800212a:	235c      	movs	r3, #92	; 0x5c
 800212c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b5c      	cmp	r3, #92	; 0x5c
 8002132:	d00a      	beq.n	800214a <xTaskCreateStatic+0x66>
	__asm volatile
 8002134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002138:	f383 8811 	msr	BASEPRI, r3
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	61bb      	str	r3, [r7, #24]
}
 8002146:	bf00      	nop
 8002148:	e7fe      	b.n	8002148 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800214a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01e      	beq.n	8002190 <xTaskCreateStatic+0xac>
 8002152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01b      	beq.n	8002190 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002160:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	2202      	movs	r2, #2
 8002166:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800216a:	2300      	movs	r3, #0
 800216c:	9303      	str	r3, [sp, #12]
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f850 	bl	8002228 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800218a:	f000 f8dd 	bl	8002348 <prvAddNewTaskToReadyList>
 800218e:	e001      	b.n	8002194 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002194:	697b      	ldr	r3, [r7, #20]
	}
 8002196:	4618      	mov	r0, r3
 8002198:	3728      	adds	r7, #40	; 0x28
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b08c      	sub	sp, #48	; 0x30
 80021a2:	af04      	add	r7, sp, #16
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f001 fc30 	bl	8003a18 <pvPortMalloc>
 80021b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00e      	beq.n	80021de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021c0:	205c      	movs	r0, #92	; 0x5c
 80021c2:	f001 fc29 	bl	8003a18 <pvPortMalloc>
 80021c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
 80021d4:	e005      	b.n	80021e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f001 fcea 	bl	8003bb0 <vPortFree>
 80021dc:	e001      	b.n	80021e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d017      	beq.n	8002218 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021f0:	88fa      	ldrh	r2, [r7, #6]
 80021f2:	2300      	movs	r3, #0
 80021f4:	9303      	str	r3, [sp, #12]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f80e 	bl	8002228 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800220c:	69f8      	ldr	r0, [r7, #28]
 800220e:	f000 f89b 	bl	8002348 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002212:	2301      	movs	r3, #1
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	e002      	b.n	800221e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800221c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800221e:	69bb      	ldr	r3, [r7, #24]
	}
 8002220:	4618      	mov	r0, r3
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	461a      	mov	r2, r3
 8002240:	21a5      	movs	r1, #165	; 0xa5
 8002242:	f001 fe0b 	bl	8003e5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002250:	3b01      	subs	r3, #1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f023 0307 	bic.w	r3, r3, #7
 800225e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <prvInitialiseNewTask+0x58>
	__asm volatile
 800226a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226e:	f383 8811 	msr	BASEPRI, r3
 8002272:	f3bf 8f6f 	isb	sy
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	617b      	str	r3, [r7, #20]
}
 800227c:	bf00      	nop
 800227e:	e7fe      	b.n	800227e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01f      	beq.n	80022c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	e012      	b.n	80022b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	4413      	add	r3, r2
 8002292:	7819      	ldrb	r1, [r3, #0]
 8002294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	4413      	add	r3, r2
 800229a:	3334      	adds	r3, #52	; 0x34
 800229c:	460a      	mov	r2, r1
 800229e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4413      	add	r3, r2
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d9e9      	bls.n	800228c <prvInitialiseNewTask+0x64>
 80022b8:	e000      	b.n	80022bc <prvInitialiseNewTask+0x94>
			{
				break;
 80022ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022c4:	e003      	b.n	80022ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	2b37      	cmp	r3, #55	; 0x37
 80022d2:	d901      	bls.n	80022d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022d4:	2337      	movs	r3, #55	; 0x37
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	2200      	movs	r2, #0
 80022e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	3304      	adds	r3, #4
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f978 	bl	80015e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	3318      	adds	r3, #24
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff f973 	bl	80015e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002302:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	2200      	movs	r2, #0
 8002318:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	68f9      	ldr	r1, [r7, #12]
 8002326:	69b8      	ldr	r0, [r7, #24]
 8002328:	f001 f928 	bl	800357c <pxPortInitialiseStack>
 800232c:	4602      	mov	r2, r0
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800233c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800233e:	bf00      	nop
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002350:	f001 fa40 	bl	80037d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002354:	4b2d      	ldr	r3, [pc, #180]	; (800240c <prvAddNewTaskToReadyList+0xc4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3301      	adds	r3, #1
 800235a:	4a2c      	ldr	r2, [pc, #176]	; (800240c <prvAddNewTaskToReadyList+0xc4>)
 800235c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800235e:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <prvAddNewTaskToReadyList+0xc8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002366:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <prvAddNewTaskToReadyList+0xc8>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <prvAddNewTaskToReadyList+0xc4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d110      	bne.n	8002396 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002374:	f000 fc16 	bl	8002ba4 <prvInitialiseTaskLists>
 8002378:	e00d      	b.n	8002396 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <prvAddNewTaskToReadyList+0xcc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002382:	4b23      	ldr	r3, [pc, #140]	; (8002410 <prvAddNewTaskToReadyList+0xc8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	429a      	cmp	r2, r3
 800238e:	d802      	bhi.n	8002396 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002390:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <prvAddNewTaskToReadyList+0xc8>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <prvAddNewTaskToReadyList+0xd0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <prvAddNewTaskToReadyList+0xd0>)
 800239e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <prvAddNewTaskToReadyList+0xd0>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <prvAddNewTaskToReadyList+0xd4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d903      	bls.n	80023bc <prvAddNewTaskToReadyList+0x74>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	4a18      	ldr	r2, [pc, #96]	; (800241c <prvAddNewTaskToReadyList+0xd4>)
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4a15      	ldr	r2, [pc, #84]	; (8002420 <prvAddNewTaskToReadyList+0xd8>)
 80023ca:	441a      	add	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3304      	adds	r3, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f7ff f913 	bl	80015fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80023d8:	f001 fa2c 	bl	8003834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <prvAddNewTaskToReadyList+0xcc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00e      	beq.n	8002402 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <prvAddNewTaskToReadyList+0xc8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d207      	bcs.n	8002402 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80023f2:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <prvAddNewTaskToReadyList+0xdc>)
 80023f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000e18 	.word	0x20000e18
 8002410:	20000944 	.word	0x20000944
 8002414:	20000e24 	.word	0x20000e24
 8002418:	20000e34 	.word	0x20000e34
 800241c:	20000e20 	.word	0x20000e20
 8002420:	20000948 	.word	0x20000948
 8002424:	e000ed04 	.word	0xe000ed04

08002428 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d017      	beq.n	800246a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800243a:	4b13      	ldr	r3, [pc, #76]	; (8002488 <vTaskDelay+0x60>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <vTaskDelay+0x30>
	__asm volatile
 8002442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002446:	f383 8811 	msr	BASEPRI, r3
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	60bb      	str	r3, [r7, #8]
}
 8002454:	bf00      	nop
 8002456:	e7fe      	b.n	8002456 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002458:	f000 f880 	bl	800255c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800245c:	2100      	movs	r1, #0
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fcea 	bl	8002e38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002464:	f000 f888 	bl	8002578 <xTaskResumeAll>
 8002468:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <vTaskDelay+0x64>)
 8002472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000e40 	.word	0x20000e40
 800248c:	e000ed04 	.word	0xe000ed04

08002490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800249e:	463a      	mov	r2, r7
 80024a0:	1d39      	adds	r1, r7, #4
 80024a2:	f107 0308 	add.w	r3, r7, #8
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f848 	bl	800153c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80024ac:	6839      	ldr	r1, [r7, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	9202      	str	r2, [sp, #8]
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	2300      	movs	r3, #0
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2300      	movs	r3, #0
 80024bc:	460a      	mov	r2, r1
 80024be:	4921      	ldr	r1, [pc, #132]	; (8002544 <vTaskStartScheduler+0xb4>)
 80024c0:	4821      	ldr	r0, [pc, #132]	; (8002548 <vTaskStartScheduler+0xb8>)
 80024c2:	f7ff fe0f 	bl	80020e4 <xTaskCreateStatic>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4a20      	ldr	r2, [pc, #128]	; (800254c <vTaskStartScheduler+0xbc>)
 80024ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80024cc:	4b1f      	ldr	r3, [pc, #124]	; (800254c <vTaskStartScheduler+0xbc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80024d4:	2301      	movs	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	e001      	b.n	80024de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d102      	bne.n	80024ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80024e4:	f000 fcfc 	bl	8002ee0 <xTimerCreateTimerTask>
 80024e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d116      	bne.n	800251e <vTaskStartScheduler+0x8e>
	__asm volatile
 80024f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	613b      	str	r3, [r7, #16]
}
 8002502:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <vTaskStartScheduler+0xc0>)
 8002506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800250a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <vTaskStartScheduler+0xc4>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <vTaskStartScheduler+0xc8>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002518:	f001 f8ba 	bl	8003690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800251c:	e00e      	b.n	800253c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002524:	d10a      	bne.n	800253c <vTaskStartScheduler+0xac>
	__asm volatile
 8002526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252a:	f383 8811 	msr	BASEPRI, r3
 800252e:	f3bf 8f6f 	isb	sy
 8002532:	f3bf 8f4f 	dsb	sy
 8002536:	60fb      	str	r3, [r7, #12]
}
 8002538:	bf00      	nop
 800253a:	e7fe      	b.n	800253a <vTaskStartScheduler+0xaa>
}
 800253c:	bf00      	nop
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	08006c94 	.word	0x08006c94
 8002548:	08002b75 	.word	0x08002b75
 800254c:	20000e3c 	.word	0x20000e3c
 8002550:	20000e38 	.word	0x20000e38
 8002554:	20000e24 	.word	0x20000e24
 8002558:	20000e1c 	.word	0x20000e1c

0800255c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <vTaskSuspendAll+0x18>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	4a03      	ldr	r2, [pc, #12]	; (8002574 <vTaskSuspendAll+0x18>)
 8002568:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	20000e40 	.word	0x20000e40

08002578 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002586:	4b42      	ldr	r3, [pc, #264]	; (8002690 <xTaskResumeAll+0x118>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10a      	bne.n	80025a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	603b      	str	r3, [r7, #0]
}
 80025a0:	bf00      	nop
 80025a2:	e7fe      	b.n	80025a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80025a4:	f001 f916 	bl	80037d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <xTaskResumeAll+0x118>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	4a38      	ldr	r2, [pc, #224]	; (8002690 <xTaskResumeAll+0x118>)
 80025b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025b2:	4b37      	ldr	r3, [pc, #220]	; (8002690 <xTaskResumeAll+0x118>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d162      	bne.n	8002680 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025ba:	4b36      	ldr	r3, [pc, #216]	; (8002694 <xTaskResumeAll+0x11c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d05e      	beq.n	8002680 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025c2:	e02f      	b.n	8002624 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025c4:	4b34      	ldr	r3, [pc, #208]	; (8002698 <xTaskResumeAll+0x120>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	3318      	adds	r3, #24
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff f871 	bl	80016b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	3304      	adds	r3, #4
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff f86c 	bl	80016b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <xTaskResumeAll+0x124>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d903      	bls.n	80025f4 <xTaskResumeAll+0x7c>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	4a2a      	ldr	r2, [pc, #168]	; (800269c <xTaskResumeAll+0x124>)
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4a27      	ldr	r2, [pc, #156]	; (80026a0 <xTaskResumeAll+0x128>)
 8002602:	441a      	add	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3304      	adds	r3, #4
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f7fe fff7 	bl	80015fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002614:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <xTaskResumeAll+0x12c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <xTaskResumeAll+0x130>)
 8002620:	2201      	movs	r2, #1
 8002622:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002624:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <xTaskResumeAll+0x120>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1cb      	bne.n	80025c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002632:	f000 fb55 	bl	8002ce0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002636:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <xTaskResumeAll+0x134>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002642:	f000 f847 	bl	80026d4 <xTaskIncrementTick>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800264c:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <xTaskResumeAll+0x130>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3b01      	subs	r3, #1
 8002656:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f1      	bne.n	8002642 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800265e:	4b13      	ldr	r3, [pc, #76]	; (80026ac <xTaskResumeAll+0x134>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <xTaskResumeAll+0x130>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d009      	beq.n	8002680 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800266c:	2301      	movs	r3, #1
 800266e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <xTaskResumeAll+0x138>)
 8002672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002680:	f001 f8d8 	bl	8003834 <vPortExitCritical>

	return xAlreadyYielded;
 8002684:	68bb      	ldr	r3, [r7, #8]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000e40 	.word	0x20000e40
 8002694:	20000e18 	.word	0x20000e18
 8002698:	20000dd8 	.word	0x20000dd8
 800269c:	20000e20 	.word	0x20000e20
 80026a0:	20000948 	.word	0x20000948
 80026a4:	20000944 	.word	0x20000944
 80026a8:	20000e2c 	.word	0x20000e2c
 80026ac:	20000e28 	.word	0x20000e28
 80026b0:	e000ed04 	.word	0xe000ed04

080026b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <xTaskGetTickCount+0x1c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80026c0:	687b      	ldr	r3, [r7, #4]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000e1c 	.word	0x20000e1c

080026d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026de:	4b4f      	ldr	r3, [pc, #316]	; (800281c <xTaskIncrementTick+0x148>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 808f 	bne.w	8002806 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026e8:	4b4d      	ldr	r3, [pc, #308]	; (8002820 <xTaskIncrementTick+0x14c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80026f0:	4a4b      	ldr	r2, [pc, #300]	; (8002820 <xTaskIncrementTick+0x14c>)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d120      	bne.n	800273e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80026fc:	4b49      	ldr	r3, [pc, #292]	; (8002824 <xTaskIncrementTick+0x150>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <xTaskIncrementTick+0x48>
	__asm volatile
 8002706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	603b      	str	r3, [r7, #0]
}
 8002718:	bf00      	nop
 800271a:	e7fe      	b.n	800271a <xTaskIncrementTick+0x46>
 800271c:	4b41      	ldr	r3, [pc, #260]	; (8002824 <xTaskIncrementTick+0x150>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <xTaskIncrementTick+0x154>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a3f      	ldr	r2, [pc, #252]	; (8002824 <xTaskIncrementTick+0x150>)
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4a3f      	ldr	r2, [pc, #252]	; (8002828 <xTaskIncrementTick+0x154>)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b3e      	ldr	r3, [pc, #248]	; (800282c <xTaskIncrementTick+0x158>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3301      	adds	r3, #1
 8002736:	4a3d      	ldr	r2, [pc, #244]	; (800282c <xTaskIncrementTick+0x158>)
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	f000 fad1 	bl	8002ce0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800273e:	4b3c      	ldr	r3, [pc, #240]	; (8002830 <xTaskIncrementTick+0x15c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	429a      	cmp	r2, r3
 8002746:	d349      	bcc.n	80027dc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002748:	4b36      	ldr	r3, [pc, #216]	; (8002824 <xTaskIncrementTick+0x150>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d104      	bne.n	800275c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002752:	4b37      	ldr	r3, [pc, #220]	; (8002830 <xTaskIncrementTick+0x15c>)
 8002754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002758:	601a      	str	r2, [r3, #0]
					break;
 800275a:	e03f      	b.n	80027dc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800275c:	4b31      	ldr	r3, [pc, #196]	; (8002824 <xTaskIncrementTick+0x150>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	d203      	bcs.n	800277c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002774:	4a2e      	ldr	r2, [pc, #184]	; (8002830 <xTaskIncrementTick+0x15c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800277a:	e02f      	b.n	80027dc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	3304      	adds	r3, #4
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe ff99 	bl	80016b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3318      	adds	r3, #24
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe ff90 	bl	80016b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	4b25      	ldr	r3, [pc, #148]	; (8002834 <xTaskIncrementTick+0x160>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d903      	bls.n	80027ac <xTaskIncrementTick+0xd8>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	4a22      	ldr	r2, [pc, #136]	; (8002834 <xTaskIncrementTick+0x160>)
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <xTaskIncrementTick+0x164>)
 80027ba:	441a      	add	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	3304      	adds	r3, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f7fe ff1b 	bl	80015fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027cc:	4b1b      	ldr	r3, [pc, #108]	; (800283c <xTaskIncrementTick+0x168>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d3b8      	bcc.n	8002748 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80027d6:	2301      	movs	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027da:	e7b5      	b.n	8002748 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027dc:	4b17      	ldr	r3, [pc, #92]	; (800283c <xTaskIncrementTick+0x168>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e2:	4915      	ldr	r1, [pc, #84]	; (8002838 <xTaskIncrementTick+0x164>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d901      	bls.n	80027f8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80027f4:	2301      	movs	r3, #1
 80027f6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <xTaskIncrementTick+0x16c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002800:	2301      	movs	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	e004      	b.n	8002810 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <xTaskIncrementTick+0x170>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3301      	adds	r3, #1
 800280c:	4a0d      	ldr	r2, [pc, #52]	; (8002844 <xTaskIncrementTick+0x170>)
 800280e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002810:	697b      	ldr	r3, [r7, #20]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000e40 	.word	0x20000e40
 8002820:	20000e1c 	.word	0x20000e1c
 8002824:	20000dd0 	.word	0x20000dd0
 8002828:	20000dd4 	.word	0x20000dd4
 800282c:	20000e30 	.word	0x20000e30
 8002830:	20000e38 	.word	0x20000e38
 8002834:	20000e20 	.word	0x20000e20
 8002838:	20000948 	.word	0x20000948
 800283c:	20000944 	.word	0x20000944
 8002840:	20000e2c 	.word	0x20000e2c
 8002844:	20000e28 	.word	0x20000e28

08002848 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800284e:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <vTaskSwitchContext+0xa8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002856:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <vTaskSwitchContext+0xac>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800285c:	e041      	b.n	80028e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800285e:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <vTaskSwitchContext+0xac>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <vTaskSwitchContext+0xb0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	e010      	b.n	800288e <vTaskSwitchContext+0x46>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <vTaskSwitchContext+0x40>
	__asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	607b      	str	r3, [r7, #4]
}
 8002884:	bf00      	nop
 8002886:	e7fe      	b.n	8002886 <vTaskSwitchContext+0x3e>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3b01      	subs	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	491b      	ldr	r1, [pc, #108]	; (80028fc <vTaskSwitchContext+0xb4>)
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0e4      	beq.n	800286c <vTaskSwitchContext+0x24>
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4a13      	ldr	r2, [pc, #76]	; (80028fc <vTaskSwitchContext+0xb4>)
 80028ae:	4413      	add	r3, r2
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	3308      	adds	r3, #8
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d104      	bne.n	80028d2 <vTaskSwitchContext+0x8a>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a09      	ldr	r2, [pc, #36]	; (8002900 <vTaskSwitchContext+0xb8>)
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4a06      	ldr	r2, [pc, #24]	; (80028f8 <vTaskSwitchContext+0xb0>)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6013      	str	r3, [r2, #0]
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000e40 	.word	0x20000e40
 80028f4:	20000e2c 	.word	0x20000e2c
 80028f8:	20000e20 	.word	0x20000e20
 80028fc:	20000948 	.word	0x20000948
 8002900:	20000944 	.word	0x20000944

08002904 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	60fb      	str	r3, [r7, #12]
}
 8002926:	bf00      	nop
 8002928:	e7fe      	b.n	8002928 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800292a:	4b07      	ldr	r3, [pc, #28]	; (8002948 <vTaskPlaceOnEventList+0x44>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3318      	adds	r3, #24
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe fe87 	bl	8001646 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002938:	2101      	movs	r1, #1
 800293a:	6838      	ldr	r0, [r7, #0]
 800293c:	f000 fa7c 	bl	8002e38 <prvAddCurrentTaskToDelayedList>
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000944 	.word	0x20000944

0800294c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10a      	bne.n	8002974 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800295e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002962:	f383 8811 	msr	BASEPRI, r3
 8002966:	f3bf 8f6f 	isb	sy
 800296a:	f3bf 8f4f 	dsb	sy
 800296e:	617b      	str	r3, [r7, #20]
}
 8002970:	bf00      	nop
 8002972:	e7fe      	b.n	8002972 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3318      	adds	r3, #24
 800297a:	4619      	mov	r1, r3
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7fe fe3e 	bl	80015fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800298c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	68b8      	ldr	r0, [r7, #8]
 8002992:	f000 fa51 	bl	8002e38 <prvAddCurrentTaskToDelayedList>
	}
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000944 	.word	0x20000944

080029a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	60fb      	str	r3, [r7, #12]
}
 80029cc:	bf00      	nop
 80029ce:	e7fe      	b.n	80029ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	3318      	adds	r3, #24
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fe6f 	bl	80016b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <xTaskRemoveFromEventList+0xb0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11d      	bne.n	8002a1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	3304      	adds	r3, #4
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fe66 	bl	80016b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f0:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <xTaskRemoveFromEventList+0xb4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d903      	bls.n	8002a00 <xTaskRemoveFromEventList+0x5c>
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <xTaskRemoveFromEventList+0xb4>)
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <xTaskRemoveFromEventList+0xb8>)
 8002a0e:	441a      	add	r2, r3
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	3304      	adds	r3, #4
 8002a14:	4619      	mov	r1, r3
 8002a16:	4610      	mov	r0, r2
 8002a18:	f7fe fdf1 	bl	80015fe <vListInsertEnd>
 8002a1c:	e005      	b.n	8002a2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	3318      	adds	r3, #24
 8002a22:	4619      	mov	r1, r3
 8002a24:	480e      	ldr	r0, [pc, #56]	; (8002a60 <xTaskRemoveFromEventList+0xbc>)
 8002a26:	f7fe fdea 	bl	80015fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <xTaskRemoveFromEventList+0xc0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d905      	bls.n	8002a44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <xTaskRemoveFromEventList+0xc4>)
 8002a3e:	2201      	movs	r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e001      	b.n	8002a48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002a48:	697b      	ldr	r3, [r7, #20]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000e40 	.word	0x20000e40
 8002a58:	20000e20 	.word	0x20000e20
 8002a5c:	20000948 	.word	0x20000948
 8002a60:	20000dd8 	.word	0x20000dd8
 8002a64:	20000944 	.word	0x20000944
 8002a68:	20000e2c 	.word	0x20000e2c

08002a6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <vTaskInternalSetTimeOutState+0x24>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <vTaskInternalSetTimeOutState+0x28>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	605a      	str	r2, [r3, #4]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	20000e30 	.word	0x20000e30
 8002a94:	20000e1c 	.word	0x20000e1c

08002a98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	613b      	str	r3, [r7, #16]
}
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	60fb      	str	r3, [r7, #12]
}
 8002ad6:	bf00      	nop
 8002ad8:	e7fe      	b.n	8002ad8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002ada:	f000 fe7b 	bl	80037d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <xTaskCheckForTimeOut+0xbc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af6:	d102      	bne.n	8002afe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
 8002afc:	e023      	b.n	8002b46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <xTaskCheckForTimeOut+0xc0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d007      	beq.n	8002b1a <xTaskCheckForTimeOut+0x82>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d302      	bcc.n	8002b1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002b14:	2301      	movs	r3, #1
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	e015      	b.n	8002b46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d20b      	bcs.n	8002b3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	1ad2      	subs	r2, r2, r3
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff9b 	bl	8002a6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61fb      	str	r3, [r7, #28]
 8002b3a:	e004      	b.n	8002b46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002b46:	f000 fe75 	bl	8003834 <vPortExitCritical>

	return xReturn;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3720      	adds	r7, #32
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000e1c 	.word	0x20000e1c
 8002b58:	20000e30 	.word	0x20000e30

08002b5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <vTaskMissedYield+0x14>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	20000e2c 	.word	0x20000e2c

08002b74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002b7c:	f000 f852 	bl	8002c24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <prvIdleTask+0x28>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d9f9      	bls.n	8002b7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <prvIdleTask+0x2c>)
 8002b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002b98:	e7f0      	b.n	8002b7c <prvIdleTask+0x8>
 8002b9a:	bf00      	nop
 8002b9c:	20000948 	.word	0x20000948
 8002ba0:	e000ed04 	.word	0xe000ed04

08002ba4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002baa:	2300      	movs	r3, #0
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	e00c      	b.n	8002bca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <prvInitialiseTaskLists+0x60>)
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fcf0 	bl	80015a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b37      	cmp	r3, #55	; 0x37
 8002bce:	d9ef      	bls.n	8002bb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002bd0:	480d      	ldr	r0, [pc, #52]	; (8002c08 <prvInitialiseTaskLists+0x64>)
 8002bd2:	f7fe fce7 	bl	80015a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002bd6:	480d      	ldr	r0, [pc, #52]	; (8002c0c <prvInitialiseTaskLists+0x68>)
 8002bd8:	f7fe fce4 	bl	80015a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002bdc:	480c      	ldr	r0, [pc, #48]	; (8002c10 <prvInitialiseTaskLists+0x6c>)
 8002bde:	f7fe fce1 	bl	80015a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002be2:	480c      	ldr	r0, [pc, #48]	; (8002c14 <prvInitialiseTaskLists+0x70>)
 8002be4:	f7fe fcde 	bl	80015a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002be8:	480b      	ldr	r0, [pc, #44]	; (8002c18 <prvInitialiseTaskLists+0x74>)
 8002bea:	f7fe fcdb 	bl	80015a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <prvInitialiseTaskLists+0x78>)
 8002bf0:	4a05      	ldr	r2, [pc, #20]	; (8002c08 <prvInitialiseTaskLists+0x64>)
 8002bf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <prvInitialiseTaskLists+0x7c>)
 8002bf6:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <prvInitialiseTaskLists+0x68>)
 8002bf8:	601a      	str	r2, [r3, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000948 	.word	0x20000948
 8002c08:	20000da8 	.word	0x20000da8
 8002c0c:	20000dbc 	.word	0x20000dbc
 8002c10:	20000dd8 	.word	0x20000dd8
 8002c14:	20000dec 	.word	0x20000dec
 8002c18:	20000e04 	.word	0x20000e04
 8002c1c:	20000dd0 	.word	0x20000dd0
 8002c20:	20000dd4 	.word	0x20000dd4

08002c24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c2a:	e019      	b.n	8002c60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002c2c:	f000 fdd2 	bl	80037d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c30:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <prvCheckTasksWaitingTermination+0x50>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe fd3b 	bl	80016b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <prvCheckTasksWaitingTermination+0x54>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <prvCheckTasksWaitingTermination+0x54>)
 8002c4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <prvCheckTasksWaitingTermination+0x58>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <prvCheckTasksWaitingTermination+0x58>)
 8002c54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c56:	f000 fded 	bl	8003834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f810 	bl	8002c80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <prvCheckTasksWaitingTermination+0x58>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e1      	bne.n	8002c2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000dec 	.word	0x20000dec
 8002c78:	20000e18 	.word	0x20000e18
 8002c7c:	20000e00 	.word	0x20000e00

08002c80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d108      	bne.n	8002ca4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 ff8a 	bl	8003bb0 <vPortFree>
				vPortFree( pxTCB );
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 ff87 	bl	8003bb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002ca2:	e018      	b.n	8002cd6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d103      	bne.n	8002cb6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 ff7e 	bl	8003bb0 <vPortFree>
	}
 8002cb4:	e00f      	b.n	8002cd6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d00a      	beq.n	8002cd6 <prvDeleteTCB+0x56>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	60fb      	str	r3, [r7, #12]
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <prvDeleteTCB+0x54>
	}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <prvResetNextTaskUnblockTime+0x38>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <prvResetNextTaskUnblockTime+0x3c>)
 8002cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002cf8:	e008      	b.n	8002d0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <prvResetNextTaskUnblockTime+0x38>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a04      	ldr	r2, [pc, #16]	; (8002d1c <prvResetNextTaskUnblockTime+0x3c>)
 8002d0a:	6013      	str	r3, [r2, #0]
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	20000dd0 	.word	0x20000dd0
 8002d1c:	20000e38 	.word	0x20000e38

08002d20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <xTaskGetSchedulerState+0x34>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	e008      	b.n	8002d46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <xTaskGetSchedulerState+0x38>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	e001      	b.n	8002d46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002d46:	687b      	ldr	r3, [r7, #4]
	}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	20000e24 	.word	0x20000e24
 8002d58:	20000e40 	.word	0x20000e40

08002d5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d056      	beq.n	8002e20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002d72:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <xTaskPriorityDisinherit+0xd0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d00a      	beq.n	8002d92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	60fb      	str	r3, [r7, #12]
}
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10a      	bne.n	8002db0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	60bb      	str	r3, [r7, #8]
}
 8002dac:	bf00      	nop
 8002dae:	e7fe      	b.n	8002dae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db4:	1e5a      	subs	r2, r3, #1
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d02c      	beq.n	8002e20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d128      	bne.n	8002e20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe fc70 	bl	80016b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <xTaskPriorityDisinherit+0xd4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d903      	bls.n	8002e00 <xTaskPriorityDisinherit+0xa4>
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	4a0c      	ldr	r2, [pc, #48]	; (8002e30 <xTaskPriorityDisinherit+0xd4>)
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <xTaskPriorityDisinherit+0xd8>)
 8002e0e:	441a      	add	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	3304      	adds	r3, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f7fe fbf1 	bl	80015fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002e20:	697b      	ldr	r3, [r7, #20]
	}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000944 	.word	0x20000944
 8002e30:	20000e20 	.word	0x20000e20
 8002e34:	20000948 	.word	0x20000948

08002e38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002e42:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <prvAddCurrentTaskToDelayedList+0x90>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e48:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe fc32 	bl	80016b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e5a:	d10a      	bne.n	8002e72 <prvAddCurrentTaskToDelayedList+0x3a>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e62:	4b1a      	ldr	r3, [pc, #104]	; (8002ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4819      	ldr	r0, [pc, #100]	; (8002ed0 <prvAddCurrentTaskToDelayedList+0x98>)
 8002e6c:	f7fe fbc7 	bl	80015fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002e70:	e026      	b.n	8002ec0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d209      	bcs.n	8002e9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f7fe fbd5 	bl	8001646 <vListInsert>
}
 8002e9c:	e010      	b.n	8002ec0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f7fe fbcb 	bl	8001646 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002eb0:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <prvAddCurrentTaskToDelayedList+0xa4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d202      	bcs.n	8002ec0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <prvAddCurrentTaskToDelayedList+0xa4>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000e1c 	.word	0x20000e1c
 8002ecc:	20000944 	.word	0x20000944
 8002ed0:	20000e04 	.word	0x20000e04
 8002ed4:	20000dd4 	.word	0x20000dd4
 8002ed8:	20000dd0 	.word	0x20000dd0
 8002edc:	20000e38 	.word	0x20000e38

08002ee0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002eea:	f000 fb07 	bl	80034fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002eee:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <xTimerCreateTimerTask+0x80>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d021      	beq.n	8002f3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002efe:	1d3a      	adds	r2, r7, #4
 8002f00:	f107 0108 	add.w	r1, r7, #8
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe fb31 	bl	8001570 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	9202      	str	r2, [sp, #8]
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	2302      	movs	r3, #2
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	460a      	mov	r2, r1
 8002f20:	4910      	ldr	r1, [pc, #64]	; (8002f64 <xTimerCreateTimerTask+0x84>)
 8002f22:	4811      	ldr	r0, [pc, #68]	; (8002f68 <xTimerCreateTimerTask+0x88>)
 8002f24:	f7ff f8de 	bl	80020e4 <xTaskCreateStatic>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4a10      	ldr	r2, [pc, #64]	; (8002f6c <xTimerCreateTimerTask+0x8c>)
 8002f2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <xTimerCreateTimerTask+0x8c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002f36:	2301      	movs	r3, #1
 8002f38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	613b      	str	r3, [r7, #16]
}
 8002f52:	bf00      	nop
 8002f54:	e7fe      	b.n	8002f54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002f56:	697b      	ldr	r3, [r7, #20]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000e74 	.word	0x20000e74
 8002f64:	08006c9c 	.word	0x08006c9c
 8002f68:	080030a5 	.word	0x080030a5
 8002f6c:	20000e78 	.word	0x20000e78

08002f70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	623b      	str	r3, [r7, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <xTimerGenericCommand+0x98>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d02a      	beq.n	8002ffc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	dc18      	bgt.n	8002fea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002fb8:	f7ff feb2 	bl	8002d20 <xTaskGetSchedulerState>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d109      	bne.n	8002fd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <xTimerGenericCommand+0x98>)
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	f107 0110 	add.w	r1, r7, #16
 8002fca:	2300      	movs	r3, #0
 8002fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fce:	f7fe fca1 	bl	8001914 <xQueueGenericSend>
 8002fd2:	6278      	str	r0, [r7, #36]	; 0x24
 8002fd4:	e012      	b.n	8002ffc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <xTimerGenericCommand+0x98>)
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	f107 0110 	add.w	r1, r7, #16
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f7fe fc97 	bl	8001914 <xQueueGenericSend>
 8002fe6:	6278      	str	r0, [r7, #36]	; 0x24
 8002fe8:	e008      	b.n	8002ffc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <xTimerGenericCommand+0x98>)
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	f107 0110 	add.w	r1, r7, #16
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	f7fe fd8b 	bl	8001b10 <xQueueGenericSendFromISR>
 8002ffa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3728      	adds	r7, #40	; 0x28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000e74 	.word	0x20000e74

0800300c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af02      	add	r7, sp, #8
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003016:	4b22      	ldr	r3, [pc, #136]	; (80030a0 <prvProcessExpiredTimer+0x94>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	3304      	adds	r3, #4
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe fb47 	bl	80016b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d022      	beq.n	800307e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	699a      	ldr	r2, [r3, #24]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	18d1      	adds	r1, r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	6978      	ldr	r0, [r7, #20]
 8003046:	f000 f8d1 	bl	80031ec <prvInsertTimerInActiveList>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01f      	beq.n	8003090 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003050:	2300      	movs	r3, #0
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2300      	movs	r3, #0
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	2100      	movs	r1, #0
 800305a:	6978      	ldr	r0, [r7, #20]
 800305c:	f7ff ff88 	bl	8002f70 <xTimerGenericCommand>
 8003060:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d113      	bne.n	8003090 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	60fb      	str	r3, [r7, #12]
}
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003084:	f023 0301 	bic.w	r3, r3, #1
 8003088:	b2da      	uxtb	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	6978      	ldr	r0, [r7, #20]
 8003096:	4798      	blx	r3
}
 8003098:	bf00      	nop
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000e6c 	.word	0x20000e6c

080030a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80030ac:	f107 0308 	add.w	r3, r7, #8
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 f857 	bl	8003164 <prvGetNextExpireTime>
 80030b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4619      	mov	r1, r3
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f803 	bl	80030c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80030c2:	f000 f8d5 	bl	8003270 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80030c6:	e7f1      	b.n	80030ac <prvTimerTask+0x8>

080030c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80030d2:	f7ff fa43 	bl	800255c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80030d6:	f107 0308 	add.w	r3, r7, #8
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 f866 	bl	80031ac <prvSampleTimeNow>
 80030e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d130      	bne.n	800314a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <prvProcessTimerOrBlockTask+0x3c>
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d806      	bhi.n	8003104 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80030f6:	f7ff fa3f 	bl	8002578 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80030fa:	68f9      	ldr	r1, [r7, #12]
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ff85 	bl	800300c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003102:	e024      	b.n	800314e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d008      	beq.n	800311c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <prvProcessTimerOrBlockTask+0x90>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <prvProcessTimerOrBlockTask+0x50>
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <prvProcessTimerOrBlockTask+0x52>
 8003118:	2300      	movs	r3, #0
 800311a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <prvProcessTimerOrBlockTask+0x94>)
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	4619      	mov	r1, r3
 800312a:	f7fe ffa7 	bl	800207c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800312e:	f7ff fa23 	bl	8002578 <xTaskResumeAll>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <prvProcessTimerOrBlockTask+0x98>)
 800313a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	f3bf 8f6f 	isb	sy
}
 8003148:	e001      	b.n	800314e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800314a:	f7ff fa15 	bl	8002578 <xTaskResumeAll>
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000e70 	.word	0x20000e70
 800315c:	20000e74 	.word	0x20000e74
 8003160:	e000ed04 	.word	0xe000ed04

08003164 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800316c:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <prvGetNextExpireTime+0x44>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <prvGetNextExpireTime+0x16>
 8003176:	2201      	movs	r2, #1
 8003178:	e000      	b.n	800317c <prvGetNextExpireTime+0x18>
 800317a:	2200      	movs	r2, #0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d105      	bne.n	8003194 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003188:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <prvGetNextExpireTime+0x44>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	e001      	b.n	8003198 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003198:	68fb      	ldr	r3, [r7, #12]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000e6c 	.word	0x20000e6c

080031ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80031b4:	f7ff fa7e 	bl	80026b4 <xTaskGetTickCount>
 80031b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <prvSampleTimeNow+0x3c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d205      	bcs.n	80031d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80031c4:	f000 f936 	bl	8003434 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e002      	b.n	80031d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <prvSampleTimeNow+0x3c>)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80031dc:	68fb      	ldr	r3, [r7, #12]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000e7c 	.word	0x20000e7c

080031ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	d812      	bhi.n	8003238 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	1ad2      	subs	r2, r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	429a      	cmp	r2, r3
 800321e:	d302      	bcc.n	8003226 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003220:	2301      	movs	r3, #1
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	e01b      	b.n	800325e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003226:	4b10      	ldr	r3, [pc, #64]	; (8003268 <prvInsertTimerInActiveList+0x7c>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3304      	adds	r3, #4
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f7fe fa08 	bl	8001646 <vListInsert>
 8003236:	e012      	b.n	800325e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d206      	bcs.n	800324e <prvInsertTimerInActiveList+0x62>
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d302      	bcc.n	800324e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003248:	2301      	movs	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	e007      	b.n	800325e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <prvInsertTimerInActiveList+0x80>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	3304      	adds	r3, #4
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f7fe f9f4 	bl	8001646 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800325e:	697b      	ldr	r3, [r7, #20]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000e70 	.word	0x20000e70
 800326c:	20000e6c 	.word	0x20000e6c

08003270 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08e      	sub	sp, #56	; 0x38
 8003274:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003276:	e0ca      	b.n	800340e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	da18      	bge.n	80032b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800327e:	1d3b      	adds	r3, r7, #4
 8003280:	3304      	adds	r3, #4
 8003282:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	61fb      	str	r3, [r7, #28]
}
 800329c:	bf00      	nop
 800329e:	e7fe      	b.n	800329e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80032a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a6:	6850      	ldr	r0, [r2, #4]
 80032a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032aa:	6892      	ldr	r2, [r2, #8]
 80032ac:	4611      	mov	r1, r2
 80032ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f2c0 80aa 	blt.w	800340c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	3304      	adds	r3, #4
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe f9f5 	bl	80016b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80032ce:	463b      	mov	r3, r7
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff6b 	bl	80031ac <prvSampleTimeNow>
 80032d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b09      	cmp	r3, #9
 80032dc:	f200 8097 	bhi.w	800340e <prvProcessReceivedCommands+0x19e>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <prvProcessReceivedCommands+0x78>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	08003311 	.word	0x08003311
 80032ec:	08003311 	.word	0x08003311
 80032f0:	08003311 	.word	0x08003311
 80032f4:	08003385 	.word	0x08003385
 80032f8:	08003399 	.word	0x08003399
 80032fc:	080033e3 	.word	0x080033e3
 8003300:	08003311 	.word	0x08003311
 8003304:	08003311 	.word	0x08003311
 8003308:	08003385 	.word	0x08003385
 800330c:	08003399 	.word	0x08003399
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	b2da      	uxtb	r2, r3
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	18d1      	adds	r1, r2, r3
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003330:	f7ff ff5c 	bl	80031ec <prvInsertTimerInActiveList>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d069      	beq.n	800340e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003340:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d05e      	beq.n	800340e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	441a      	add	r2, r3
 8003358:	2300      	movs	r3, #0
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2300      	movs	r3, #0
 800335e:	2100      	movs	r1, #0
 8003360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003362:	f7ff fe05 	bl	8002f70 <xTimerGenericCommand>
 8003366:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d14f      	bne.n	800340e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	61bb      	str	r3, [r7, #24]
}
 8003380:	bf00      	nop
 8003382:	e7fe      	b.n	8003382 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	b2da      	uxtb	r2, r3
 8003390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003396:	e03a      	b.n	800340e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10a      	bne.n	80033ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	617b      	str	r3, [r7, #20]
}
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	18d1      	adds	r1, r2, r3
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033dc:	f7ff ff06 	bl	80031ec <prvInsertTimerInActiveList>
					break;
 80033e0:	e015      	b.n	800340e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80033f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033f2:	f000 fbdd 	bl	8003bb0 <vPortFree>
 80033f6:	e00a      	b.n	800340e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	b2da      	uxtb	r2, r3
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800340a:	e000      	b.n	800340e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800340c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <prvProcessReceivedCommands+0x1c0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	1d39      	adds	r1, r7, #4
 8003414:	2200      	movs	r2, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fc16 	bl	8001c48 <xQueueReceive>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	f47f af2a 	bne.w	8003278 <prvProcessReceivedCommands+0x8>
	}
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	3730      	adds	r7, #48	; 0x30
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000e74 	.word	0x20000e74

08003434 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800343a:	e048      	b.n	80034ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800343c:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <prvSwitchTimerLists+0xc0>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003446:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <prvSwitchTimerLists+0xc0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3304      	adds	r3, #4
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe f92f 	bl	80016b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d02e      	beq.n	80034ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	429a      	cmp	r2, r3
 8003480:	d90e      	bls.n	80034a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800348e:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <prvSwitchTimerLists+0xc0>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3304      	adds	r3, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f7fe f8d4 	bl	8001646 <vListInsert>
 800349e:	e016      	b.n	80034ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80034a0:	2300      	movs	r3, #0
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2300      	movs	r3, #0
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	2100      	movs	r1, #0
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7ff fd60 	bl	8002f70 <xTimerGenericCommand>
 80034b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	603b      	str	r3, [r7, #0]
}
 80034ca:	bf00      	nop
 80034cc:	e7fe      	b.n	80034cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <prvSwitchTimerLists+0xc0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1b1      	bne.n	800343c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <prvSwitchTimerLists+0xc0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <prvSwitchTimerLists+0xc4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <prvSwitchTimerLists+0xc0>)
 80034e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80034e6:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <prvSwitchTimerLists+0xc4>)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	6013      	str	r3, [r2, #0]
}
 80034ec:	bf00      	nop
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000e6c 	.word	0x20000e6c
 80034f8:	20000e70 	.word	0x20000e70

080034fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003502:	f000 f967 	bl	80037d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <prvCheckForValidListAndQueue+0x60>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d120      	bne.n	8003550 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800350e:	4814      	ldr	r0, [pc, #80]	; (8003560 <prvCheckForValidListAndQueue+0x64>)
 8003510:	f7fe f848 	bl	80015a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003514:	4813      	ldr	r0, [pc, #76]	; (8003564 <prvCheckForValidListAndQueue+0x68>)
 8003516:	f7fe f845 	bl	80015a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <prvCheckForValidListAndQueue+0x6c>)
 800351c:	4a10      	ldr	r2, [pc, #64]	; (8003560 <prvCheckForValidListAndQueue+0x64>)
 800351e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003520:	4b12      	ldr	r3, [pc, #72]	; (800356c <prvCheckForValidListAndQueue+0x70>)
 8003522:	4a10      	ldr	r2, [pc, #64]	; (8003564 <prvCheckForValidListAndQueue+0x68>)
 8003524:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003526:	2300      	movs	r3, #0
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	4b11      	ldr	r3, [pc, #68]	; (8003570 <prvCheckForValidListAndQueue+0x74>)
 800352c:	4a11      	ldr	r2, [pc, #68]	; (8003574 <prvCheckForValidListAndQueue+0x78>)
 800352e:	2110      	movs	r1, #16
 8003530:	200a      	movs	r0, #10
 8003532:	f7fe f953 	bl	80017dc <xQueueGenericCreateStatic>
 8003536:	4603      	mov	r3, r0
 8003538:	4a08      	ldr	r2, [pc, #32]	; (800355c <prvCheckForValidListAndQueue+0x60>)
 800353a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800353c:	4b07      	ldr	r3, [pc, #28]	; (800355c <prvCheckForValidListAndQueue+0x60>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <prvCheckForValidListAndQueue+0x60>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	490b      	ldr	r1, [pc, #44]	; (8003578 <prvCheckForValidListAndQueue+0x7c>)
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fd6c 	bl	8002028 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003550:	f000 f970 	bl	8003834 <vPortExitCritical>
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000e74 	.word	0x20000e74
 8003560:	20000e44 	.word	0x20000e44
 8003564:	20000e58 	.word	0x20000e58
 8003568:	20000e6c 	.word	0x20000e6c
 800356c:	20000e70 	.word	0x20000e70
 8003570:	20000f20 	.word	0x20000f20
 8003574:	20000e80 	.word	0x20000e80
 8003578:	08006ca4 	.word	0x08006ca4

0800357c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3b04      	subs	r3, #4
 800358c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3b04      	subs	r3, #4
 800359a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f023 0201 	bic.w	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3b04      	subs	r3, #4
 80035aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80035ac:	4a0c      	ldr	r2, [pc, #48]	; (80035e0 <pxPortInitialiseStack+0x64>)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3b14      	subs	r3, #20
 80035b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3b04      	subs	r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f06f 0202 	mvn.w	r2, #2
 80035ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3b20      	subs	r3, #32
 80035d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	080035e5 	.word	0x080035e5

080035e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <prvTaskExitError+0x54>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f6:	d00a      	beq.n	800360e <prvTaskExitError+0x2a>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	60fb      	str	r3, [r7, #12]
}
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <prvTaskExitError+0x28>
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	60bb      	str	r3, [r7, #8]
}
 8003620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003622:	bf00      	nop
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0fc      	beq.n	8003624 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	20000004 	.word	0x20000004
 800363c:	00000000 	.word	0x00000000

08003640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003640:	4b07      	ldr	r3, [pc, #28]	; (8003660 <pxCurrentTCBConst2>)
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	6808      	ldr	r0, [r1, #0]
 8003646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800364a:	f380 8809 	msr	PSP, r0
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f04f 0000 	mov.w	r0, #0
 8003656:	f380 8811 	msr	BASEPRI, r0
 800365a:	4770      	bx	lr
 800365c:	f3af 8000 	nop.w

08003660 <pxCurrentTCBConst2>:
 8003660:	20000944 	.word	0x20000944
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop

08003668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003668:	4808      	ldr	r0, [pc, #32]	; (800368c <prvPortStartFirstTask+0x24>)
 800366a:	6800      	ldr	r0, [r0, #0]
 800366c:	6800      	ldr	r0, [r0, #0]
 800366e:	f380 8808 	msr	MSP, r0
 8003672:	f04f 0000 	mov.w	r0, #0
 8003676:	f380 8814 	msr	CONTROL, r0
 800367a:	b662      	cpsie	i
 800367c:	b661      	cpsie	f
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	f3bf 8f6f 	isb	sy
 8003686:	df00      	svc	0
 8003688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800368a:	bf00      	nop
 800368c:	e000ed08 	.word	0xe000ed08

08003690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003696:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <xPortStartScheduler+0x120>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a46      	ldr	r2, [pc, #280]	; (80037b4 <xPortStartScheduler+0x124>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10a      	bne.n	80036b6 <xPortStartScheduler+0x26>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	613b      	str	r3, [r7, #16]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80036b6:	4b3e      	ldr	r3, [pc, #248]	; (80037b0 <xPortStartScheduler+0x120>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a3f      	ldr	r2, [pc, #252]	; (80037b8 <xPortStartScheduler+0x128>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d10a      	bne.n	80036d6 <xPortStartScheduler+0x46>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	60fb      	str	r3, [r7, #12]
}
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036d6:	4b39      	ldr	r3, [pc, #228]	; (80037bc <xPortStartScheduler+0x12c>)
 80036d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	22ff      	movs	r2, #255	; 0xff
 80036e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	4b31      	ldr	r3, [pc, #196]	; (80037c0 <xPortStartScheduler+0x130>)
 80036fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036fe:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <xPortStartScheduler+0x134>)
 8003700:	2207      	movs	r2, #7
 8003702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003704:	e009      	b.n	800371a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003706:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <xPortStartScheduler+0x134>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3b01      	subs	r3, #1
 800370c:	4a2d      	ldr	r2, [pc, #180]	; (80037c4 <xPortStartScheduler+0x134>)
 800370e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	b2db      	uxtb	r3, r3
 8003718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800371a:	78fb      	ldrb	r3, [r7, #3]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b80      	cmp	r3, #128	; 0x80
 8003724:	d0ef      	beq.n	8003706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003726:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <xPortStartScheduler+0x134>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f1c3 0307 	rsb	r3, r3, #7
 800372e:	2b04      	cmp	r3, #4
 8003730:	d00a      	beq.n	8003748 <xPortStartScheduler+0xb8>
	__asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	60bb      	str	r3, [r7, #8]
}
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003748:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <xPortStartScheduler+0x134>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <xPortStartScheduler+0x134>)
 8003750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003752:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <xPortStartScheduler+0x134>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800375a:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <xPortStartScheduler+0x134>)
 800375c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003766:	4b18      	ldr	r3, [pc, #96]	; (80037c8 <xPortStartScheduler+0x138>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <xPortStartScheduler+0x138>)
 800376c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <xPortStartScheduler+0x138>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <xPortStartScheduler+0x138>)
 8003778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800377c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800377e:	f000 f8dd 	bl	800393c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <xPortStartScheduler+0x13c>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003788:	f000 f8fc 	bl	8003984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <xPortStartScheduler+0x140>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0f      	ldr	r2, [pc, #60]	; (80037d0 <xPortStartScheduler+0x140>)
 8003792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003798:	f7ff ff66 	bl	8003668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800379c:	f7ff f854 	bl	8002848 <vTaskSwitchContext>
	prvTaskExitError();
 80037a0:	f7ff ff20 	bl	80035e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	e000ed00 	.word	0xe000ed00
 80037b4:	410fc271 	.word	0x410fc271
 80037b8:	410fc270 	.word	0x410fc270
 80037bc:	e000e400 	.word	0xe000e400
 80037c0:	20000f70 	.word	0x20000f70
 80037c4:	20000f74 	.word	0x20000f74
 80037c8:	e000ed20 	.word	0xe000ed20
 80037cc:	20000004 	.word	0x20000004
 80037d0:	e000ef34 	.word	0xe000ef34

080037d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
	__asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	607b      	str	r3, [r7, #4]
}
 80037ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <vPortEnterCritical+0x58>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	4a0d      	ldr	r2, [pc, #52]	; (800382c <vPortEnterCritical+0x58>)
 80037f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037f8:	4b0c      	ldr	r3, [pc, #48]	; (800382c <vPortEnterCritical+0x58>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d10f      	bne.n	8003820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <vPortEnterCritical+0x5c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <vPortEnterCritical+0x4c>
	__asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	603b      	str	r3, [r7, #0]
}
 800381c:	bf00      	nop
 800381e:	e7fe      	b.n	800381e <vPortEnterCritical+0x4a>
	}
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	20000004 	.word	0x20000004
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <vPortExitCritical+0x50>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <vPortExitCritical+0x24>
	__asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	607b      	str	r3, [r7, #4]
}
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <vPortExitCritical+0x50>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3b01      	subs	r3, #1
 800385e:	4a09      	ldr	r2, [pc, #36]	; (8003884 <vPortExitCritical+0x50>)
 8003860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <vPortExitCritical+0x50>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d105      	bne.n	8003876 <vPortExitCritical+0x42>
 800386a:	2300      	movs	r3, #0
 800386c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f383 8811 	msr	BASEPRI, r3
}
 8003874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000004 	.word	0x20000004
	...

08003890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003890:	f3ef 8009 	mrs	r0, PSP
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <pxCurrentTCBConst>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	f01e 0f10 	tst.w	lr, #16
 80038a0:	bf08      	it	eq
 80038a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80038a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038aa:	6010      	str	r0, [r2, #0]
 80038ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80038b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038b4:	f380 8811 	msr	BASEPRI, r0
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f7fe ffc2 	bl	8002848 <vTaskSwitchContext>
 80038c4:	f04f 0000 	mov.w	r0, #0
 80038c8:	f380 8811 	msr	BASEPRI, r0
 80038cc:	bc09      	pop	{r0, r3}
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	6808      	ldr	r0, [r1, #0]
 80038d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d6:	f01e 0f10 	tst.w	lr, #16
 80038da:	bf08      	it	eq
 80038dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038e0:	f380 8809 	msr	PSP, r0
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	f3af 8000 	nop.w

080038f0 <pxCurrentTCBConst>:
 80038f0:	20000944 	.word	0x20000944
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop

080038f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
	__asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	607b      	str	r3, [r7, #4]
}
 8003910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003912:	f7fe fedf 	bl	80026d4 <xTaskIncrementTick>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <xPortSysTickHandler+0x40>)
 800391e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	2300      	movs	r3, #0
 8003926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	f383 8811 	msr	BASEPRI, r3
}
 800392e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	e000ed04 	.word	0xe000ed04

0800393c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <vPortSetupTimerInterrupt+0x34>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003946:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <vPortSetupTimerInterrupt+0x38>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <vPortSetupTimerInterrupt+0x3c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0a      	ldr	r2, [pc, #40]	; (800397c <vPortSetupTimerInterrupt+0x40>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	099b      	lsrs	r3, r3, #6
 8003958:	4a09      	ldr	r2, [pc, #36]	; (8003980 <vPortSetupTimerInterrupt+0x44>)
 800395a:	3b01      	subs	r3, #1
 800395c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <vPortSetupTimerInterrupt+0x34>)
 8003960:	2207      	movs	r2, #7
 8003962:	601a      	str	r2, [r3, #0]
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	e000e010 	.word	0xe000e010
 8003974:	e000e018 	.word	0xe000e018
 8003978:	20000000 	.word	0x20000000
 800397c:	10624dd3 	.word	0x10624dd3
 8003980:	e000e014 	.word	0xe000e014

08003984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003994 <vPortEnableVFP+0x10>
 8003988:	6801      	ldr	r1, [r0, #0]
 800398a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800398e:	6001      	str	r1, [r0, #0]
 8003990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003992:	bf00      	nop
 8003994:	e000ed88 	.word	0xe000ed88

08003998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800399e:	f3ef 8305 	mrs	r3, IPSR
 80039a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	d914      	bls.n	80039d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80039aa:	4a17      	ldr	r2, [pc, #92]	; (8003a08 <vPortValidateInterruptPriority+0x70>)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80039b4:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <vPortValidateInterruptPriority+0x74>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	7afa      	ldrb	r2, [r7, #11]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d20a      	bcs.n	80039d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	607b      	str	r3, [r7, #4]
}
 80039d0:	bf00      	nop
 80039d2:	e7fe      	b.n	80039d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039d4:	4b0e      	ldr	r3, [pc, #56]	; (8003a10 <vPortValidateInterruptPriority+0x78>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039dc:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <vPortValidateInterruptPriority+0x7c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d90a      	bls.n	80039fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	603b      	str	r3, [r7, #0]
}
 80039f6:	bf00      	nop
 80039f8:	e7fe      	b.n	80039f8 <vPortValidateInterruptPriority+0x60>
	}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	e000e3f0 	.word	0xe000e3f0
 8003a0c:	20000f70 	.word	0x20000f70
 8003a10:	e000ed0c 	.word	0xe000ed0c
 8003a14:	20000f74 	.word	0x20000f74

08003a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003a24:	f7fe fd9a 	bl	800255c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a28:	4b5b      	ldr	r3, [pc, #364]	; (8003b98 <pvPortMalloc+0x180>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a30:	f000 f920 	bl	8003c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a34:	4b59      	ldr	r3, [pc, #356]	; (8003b9c <pvPortMalloc+0x184>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f040 8093 	bne.w	8003b68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01d      	beq.n	8003a84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003a48:	2208      	movs	r2, #8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d014      	beq.n	8003a84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f023 0307 	bic.w	r3, r3, #7
 8003a60:	3308      	adds	r3, #8
 8003a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <pvPortMalloc+0x6c>
	__asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	617b      	str	r3, [r7, #20]
}
 8003a80:	bf00      	nop
 8003a82:	e7fe      	b.n	8003a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d06e      	beq.n	8003b68 <pvPortMalloc+0x150>
 8003a8a:	4b45      	ldr	r3, [pc, #276]	; (8003ba0 <pvPortMalloc+0x188>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d869      	bhi.n	8003b68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003a94:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <pvPortMalloc+0x18c>)
 8003a96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003a98:	4b42      	ldr	r3, [pc, #264]	; (8003ba4 <pvPortMalloc+0x18c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a9e:	e004      	b.n	8003aaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d903      	bls.n	8003abc <pvPortMalloc+0xa4>
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1f1      	bne.n	8003aa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003abc:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <pvPortMalloc+0x180>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d050      	beq.n	8003b68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2208      	movs	r2, #8
 8003acc:	4413      	add	r3, r2
 8003ace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	1ad2      	subs	r2, r2, r3
 8003ae0:	2308      	movs	r3, #8
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d91f      	bls.n	8003b28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <pvPortMalloc+0xf8>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	613b      	str	r3, [r7, #16]
}
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	1ad2      	subs	r2, r2, r3
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b22:	69b8      	ldr	r0, [r7, #24]
 8003b24:	f000 f908 	bl	8003d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b28:	4b1d      	ldr	r3, [pc, #116]	; (8003ba0 <pvPortMalloc+0x188>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <pvPortMalloc+0x188>)
 8003b34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <pvPortMalloc+0x188>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <pvPortMalloc+0x190>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d203      	bcs.n	8003b4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <pvPortMalloc+0x188>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <pvPortMalloc+0x190>)
 8003b48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <pvPortMalloc+0x184>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <pvPortMalloc+0x194>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3301      	adds	r3, #1
 8003b64:	4a11      	ldr	r2, [pc, #68]	; (8003bac <pvPortMalloc+0x194>)
 8003b66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003b68:	f7fe fd06 	bl	8002578 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <pvPortMalloc+0x174>
	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	60fb      	str	r3, [r7, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	e7fe      	b.n	8003b8a <pvPortMalloc+0x172>
	return pvReturn;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3728      	adds	r7, #40	; 0x28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20004b80 	.word	0x20004b80
 8003b9c:	20004b94 	.word	0x20004b94
 8003ba0:	20004b84 	.word	0x20004b84
 8003ba4:	20004b78 	.word	0x20004b78
 8003ba8:	20004b88 	.word	0x20004b88
 8003bac:	20004b8c 	.word	0x20004b8c

08003bb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d04d      	beq.n	8003c5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	425b      	negs	r3, r3
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4413      	add	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <vPortFree+0xb8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <vPortFree+0x44>
	__asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	60fb      	str	r3, [r7, #12]
}
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00a      	beq.n	8003c12 <vPortFree+0x62>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	60bb      	str	r3, [r7, #8]
}
 8003c0e:	bf00      	nop
 8003c10:	e7fe      	b.n	8003c10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <vPortFree+0xb8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01e      	beq.n	8003c5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d11a      	bne.n	8003c5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <vPortFree+0xb8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	43db      	mvns	r3, r3
 8003c32:	401a      	ands	r2, r3
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003c38:	f7fe fc90 	bl	800255c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <vPortFree+0xbc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4413      	add	r3, r2
 8003c46:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <vPortFree+0xbc>)
 8003c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c4a:	6938      	ldr	r0, [r7, #16]
 8003c4c:	f000 f874 	bl	8003d38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <vPortFree+0xc0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	4a06      	ldr	r2, [pc, #24]	; (8003c70 <vPortFree+0xc0>)
 8003c58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003c5a:	f7fe fc8d 	bl	8002578 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003c5e:	bf00      	nop
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20004b94 	.word	0x20004b94
 8003c6c:	20004b84 	.word	0x20004b84
 8003c70:	20004b90 	.word	0x20004b90

08003c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003c80:	4b27      	ldr	r3, [pc, #156]	; (8003d20 <prvHeapInit+0xac>)
 8003c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00c      	beq.n	8003ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3307      	adds	r3, #7
 8003c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0307 	bic.w	r3, r3, #7
 8003c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	4a1f      	ldr	r2, [pc, #124]	; (8003d20 <prvHeapInit+0xac>)
 8003ca4:	4413      	add	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <prvHeapInit+0xb0>)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003cb2:	4b1c      	ldr	r3, [pc, #112]	; (8003d24 <prvHeapInit+0xb0>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003cc0:	2208      	movs	r2, #8
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0307 	bic.w	r3, r3, #7
 8003cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <prvHeapInit+0xb4>)
 8003cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003cd6:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <prvHeapInit+0xb4>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <prvHeapInit+0xb4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	1ad2      	subs	r2, r2, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <prvHeapInit+0xb4>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <prvHeapInit+0xb8>)
 8003d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <prvHeapInit+0xbc>)
 8003d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d0c:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <prvHeapInit+0xc0>)
 8003d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d12:	601a      	str	r2, [r3, #0]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	20000f78 	.word	0x20000f78
 8003d24:	20004b78 	.word	0x20004b78
 8003d28:	20004b80 	.word	0x20004b80
 8003d2c:	20004b88 	.word	0x20004b88
 8003d30:	20004b84 	.word	0x20004b84
 8003d34:	20004b94 	.word	0x20004b94

08003d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d40:	4b28      	ldr	r3, [pc, #160]	; (8003de4 <prvInsertBlockIntoFreeList+0xac>)
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e002      	b.n	8003d4c <prvInsertBlockIntoFreeList+0x14>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d8f7      	bhi.n	8003d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	4413      	add	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d108      	bne.n	8003d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	441a      	add	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	441a      	add	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d118      	bne.n	8003dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b15      	ldr	r3, [pc, #84]	; (8003de8 <prvInsertBlockIntoFreeList+0xb0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d00d      	beq.n	8003db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	441a      	add	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	e008      	b.n	8003dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <prvInsertBlockIntoFreeList+0xb0>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	e003      	b.n	8003dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d002      	beq.n	8003dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dd6:	bf00      	nop
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20004b78 	.word	0x20004b78
 8003de8:	20004b80 	.word	0x20004b80

08003dec <__errno>:
 8003dec:	4b01      	ldr	r3, [pc, #4]	; (8003df4 <__errno+0x8>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000008 	.word	0x20000008

08003df8 <__libc_init_array>:
 8003df8:	b570      	push	{r4, r5, r6, lr}
 8003dfa:	4d0d      	ldr	r5, [pc, #52]	; (8003e30 <__libc_init_array+0x38>)
 8003dfc:	4c0d      	ldr	r4, [pc, #52]	; (8003e34 <__libc_init_array+0x3c>)
 8003dfe:	1b64      	subs	r4, r4, r5
 8003e00:	10a4      	asrs	r4, r4, #2
 8003e02:	2600      	movs	r6, #0
 8003e04:	42a6      	cmp	r6, r4
 8003e06:	d109      	bne.n	8003e1c <__libc_init_array+0x24>
 8003e08:	4d0b      	ldr	r5, [pc, #44]	; (8003e38 <__libc_init_array+0x40>)
 8003e0a:	4c0c      	ldr	r4, [pc, #48]	; (8003e3c <__libc_init_array+0x44>)
 8003e0c:	f002 ff1c 	bl	8006c48 <_init>
 8003e10:	1b64      	subs	r4, r4, r5
 8003e12:	10a4      	asrs	r4, r4, #2
 8003e14:	2600      	movs	r6, #0
 8003e16:	42a6      	cmp	r6, r4
 8003e18:	d105      	bne.n	8003e26 <__libc_init_array+0x2e>
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
 8003e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e20:	4798      	blx	r3
 8003e22:	3601      	adds	r6, #1
 8003e24:	e7ee      	b.n	8003e04 <__libc_init_array+0xc>
 8003e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2a:	4798      	blx	r3
 8003e2c:	3601      	adds	r6, #1
 8003e2e:	e7f2      	b.n	8003e16 <__libc_init_array+0x1e>
 8003e30:	08007084 	.word	0x08007084
 8003e34:	08007084 	.word	0x08007084
 8003e38:	08007084 	.word	0x08007084
 8003e3c:	08007088 	.word	0x08007088

08003e40 <memcpy>:
 8003e40:	440a      	add	r2, r1
 8003e42:	4291      	cmp	r1, r2
 8003e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003e48:	d100      	bne.n	8003e4c <memcpy+0xc>
 8003e4a:	4770      	bx	lr
 8003e4c:	b510      	push	{r4, lr}
 8003e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e56:	4291      	cmp	r1, r2
 8003e58:	d1f9      	bne.n	8003e4e <memcpy+0xe>
 8003e5a:	bd10      	pop	{r4, pc}

08003e5c <memset>:
 8003e5c:	4402      	add	r2, r0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d100      	bne.n	8003e66 <memset+0xa>
 8003e64:	4770      	bx	lr
 8003e66:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6a:	e7f9      	b.n	8003e60 <memset+0x4>

08003e6c <__cvt>:
 8003e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e70:	ec55 4b10 	vmov	r4, r5, d0
 8003e74:	2d00      	cmp	r5, #0
 8003e76:	460e      	mov	r6, r1
 8003e78:	4619      	mov	r1, r3
 8003e7a:	462b      	mov	r3, r5
 8003e7c:	bfbb      	ittet	lt
 8003e7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003e82:	461d      	movlt	r5, r3
 8003e84:	2300      	movge	r3, #0
 8003e86:	232d      	movlt	r3, #45	; 0x2d
 8003e88:	700b      	strb	r3, [r1, #0]
 8003e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003e90:	4691      	mov	r9, r2
 8003e92:	f023 0820 	bic.w	r8, r3, #32
 8003e96:	bfbc      	itt	lt
 8003e98:	4622      	movlt	r2, r4
 8003e9a:	4614      	movlt	r4, r2
 8003e9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ea0:	d005      	beq.n	8003eae <__cvt+0x42>
 8003ea2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003ea6:	d100      	bne.n	8003eaa <__cvt+0x3e>
 8003ea8:	3601      	adds	r6, #1
 8003eaa:	2102      	movs	r1, #2
 8003eac:	e000      	b.n	8003eb0 <__cvt+0x44>
 8003eae:	2103      	movs	r1, #3
 8003eb0:	ab03      	add	r3, sp, #12
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	ab02      	add	r3, sp, #8
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	ec45 4b10 	vmov	d0, r4, r5
 8003ebc:	4653      	mov	r3, sl
 8003ebe:	4632      	mov	r2, r6
 8003ec0:	f000 fd02 	bl	80048c8 <_dtoa_r>
 8003ec4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ec8:	4607      	mov	r7, r0
 8003eca:	d102      	bne.n	8003ed2 <__cvt+0x66>
 8003ecc:	f019 0f01 	tst.w	r9, #1
 8003ed0:	d022      	beq.n	8003f18 <__cvt+0xac>
 8003ed2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ed6:	eb07 0906 	add.w	r9, r7, r6
 8003eda:	d110      	bne.n	8003efe <__cvt+0x92>
 8003edc:	783b      	ldrb	r3, [r7, #0]
 8003ede:	2b30      	cmp	r3, #48	; 0x30
 8003ee0:	d10a      	bne.n	8003ef8 <__cvt+0x8c>
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	4629      	mov	r1, r5
 8003eea:	f7fc fdf5 	bl	8000ad8 <__aeabi_dcmpeq>
 8003eee:	b918      	cbnz	r0, 8003ef8 <__cvt+0x8c>
 8003ef0:	f1c6 0601 	rsb	r6, r6, #1
 8003ef4:	f8ca 6000 	str.w	r6, [sl]
 8003ef8:	f8da 3000 	ldr.w	r3, [sl]
 8003efc:	4499      	add	r9, r3
 8003efe:	2200      	movs	r2, #0
 8003f00:	2300      	movs	r3, #0
 8003f02:	4620      	mov	r0, r4
 8003f04:	4629      	mov	r1, r5
 8003f06:	f7fc fde7 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f0a:	b108      	cbz	r0, 8003f10 <__cvt+0xa4>
 8003f0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f10:	2230      	movs	r2, #48	; 0x30
 8003f12:	9b03      	ldr	r3, [sp, #12]
 8003f14:	454b      	cmp	r3, r9
 8003f16:	d307      	bcc.n	8003f28 <__cvt+0xbc>
 8003f18:	9b03      	ldr	r3, [sp, #12]
 8003f1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f1c:	1bdb      	subs	r3, r3, r7
 8003f1e:	4638      	mov	r0, r7
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	b004      	add	sp, #16
 8003f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f28:	1c59      	adds	r1, r3, #1
 8003f2a:	9103      	str	r1, [sp, #12]
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	e7f0      	b.n	8003f12 <__cvt+0xa6>

08003f30 <__exponent>:
 8003f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f32:	4603      	mov	r3, r0
 8003f34:	2900      	cmp	r1, #0
 8003f36:	bfb8      	it	lt
 8003f38:	4249      	neglt	r1, r1
 8003f3a:	f803 2b02 	strb.w	r2, [r3], #2
 8003f3e:	bfb4      	ite	lt
 8003f40:	222d      	movlt	r2, #45	; 0x2d
 8003f42:	222b      	movge	r2, #43	; 0x2b
 8003f44:	2909      	cmp	r1, #9
 8003f46:	7042      	strb	r2, [r0, #1]
 8003f48:	dd2a      	ble.n	8003fa0 <__exponent+0x70>
 8003f4a:	f10d 0407 	add.w	r4, sp, #7
 8003f4e:	46a4      	mov	ip, r4
 8003f50:	270a      	movs	r7, #10
 8003f52:	46a6      	mov	lr, r4
 8003f54:	460a      	mov	r2, r1
 8003f56:	fb91 f6f7 	sdiv	r6, r1, r7
 8003f5a:	fb07 1516 	mls	r5, r7, r6, r1
 8003f5e:	3530      	adds	r5, #48	; 0x30
 8003f60:	2a63      	cmp	r2, #99	; 0x63
 8003f62:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003f66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	dcf1      	bgt.n	8003f52 <__exponent+0x22>
 8003f6e:	3130      	adds	r1, #48	; 0x30
 8003f70:	f1ae 0502 	sub.w	r5, lr, #2
 8003f74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003f78:	1c44      	adds	r4, r0, #1
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	4561      	cmp	r1, ip
 8003f7e:	d30a      	bcc.n	8003f96 <__exponent+0x66>
 8003f80:	f10d 0209 	add.w	r2, sp, #9
 8003f84:	eba2 020e 	sub.w	r2, r2, lr
 8003f88:	4565      	cmp	r5, ip
 8003f8a:	bf88      	it	hi
 8003f8c:	2200      	movhi	r2, #0
 8003f8e:	4413      	add	r3, r2
 8003f90:	1a18      	subs	r0, r3, r0
 8003f92:	b003      	add	sp, #12
 8003f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003f9e:	e7ed      	b.n	8003f7c <__exponent+0x4c>
 8003fa0:	2330      	movs	r3, #48	; 0x30
 8003fa2:	3130      	adds	r1, #48	; 0x30
 8003fa4:	7083      	strb	r3, [r0, #2]
 8003fa6:	70c1      	strb	r1, [r0, #3]
 8003fa8:	1d03      	adds	r3, r0, #4
 8003faa:	e7f1      	b.n	8003f90 <__exponent+0x60>

08003fac <_printf_float>:
 8003fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb0:	ed2d 8b02 	vpush	{d8}
 8003fb4:	b08d      	sub	sp, #52	; 0x34
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003fbc:	4616      	mov	r6, r2
 8003fbe:	461f      	mov	r7, r3
 8003fc0:	4605      	mov	r5, r0
 8003fc2:	f001 fb65 	bl	8005690 <_localeconv_r>
 8003fc6:	f8d0 a000 	ldr.w	sl, [r0]
 8003fca:	4650      	mov	r0, sl
 8003fcc:	f7fc f908 	bl	80001e0 <strlen>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	9305      	str	r3, [sp, #20]
 8003fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8003fdc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003fe0:	3307      	adds	r3, #7
 8003fe2:	f023 0307 	bic.w	r3, r3, #7
 8003fe6:	f103 0208 	add.w	r2, r3, #8
 8003fea:	f8c8 2000 	str.w	r2, [r8]
 8003fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ff6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ffa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ffe:	9307      	str	r3, [sp, #28]
 8004000:	f8cd 8018 	str.w	r8, [sp, #24]
 8004004:	ee08 0a10 	vmov	s16, r0
 8004008:	4b9f      	ldr	r3, [pc, #636]	; (8004288 <_printf_float+0x2dc>)
 800400a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800400e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004012:	f7fc fd93 	bl	8000b3c <__aeabi_dcmpun>
 8004016:	bb88      	cbnz	r0, 800407c <_printf_float+0xd0>
 8004018:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800401c:	4b9a      	ldr	r3, [pc, #616]	; (8004288 <_printf_float+0x2dc>)
 800401e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004022:	f7fc fd6d 	bl	8000b00 <__aeabi_dcmple>
 8004026:	bb48      	cbnz	r0, 800407c <_printf_float+0xd0>
 8004028:	2200      	movs	r2, #0
 800402a:	2300      	movs	r3, #0
 800402c:	4640      	mov	r0, r8
 800402e:	4649      	mov	r1, r9
 8004030:	f7fc fd5c 	bl	8000aec <__aeabi_dcmplt>
 8004034:	b110      	cbz	r0, 800403c <_printf_float+0x90>
 8004036:	232d      	movs	r3, #45	; 0x2d
 8004038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800403c:	4b93      	ldr	r3, [pc, #588]	; (800428c <_printf_float+0x2e0>)
 800403e:	4894      	ldr	r0, [pc, #592]	; (8004290 <_printf_float+0x2e4>)
 8004040:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004044:	bf94      	ite	ls
 8004046:	4698      	movls	r8, r3
 8004048:	4680      	movhi	r8, r0
 800404a:	2303      	movs	r3, #3
 800404c:	6123      	str	r3, [r4, #16]
 800404e:	9b05      	ldr	r3, [sp, #20]
 8004050:	f023 0204 	bic.w	r2, r3, #4
 8004054:	6022      	str	r2, [r4, #0]
 8004056:	f04f 0900 	mov.w	r9, #0
 800405a:	9700      	str	r7, [sp, #0]
 800405c:	4633      	mov	r3, r6
 800405e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004060:	4621      	mov	r1, r4
 8004062:	4628      	mov	r0, r5
 8004064:	f000 f9d8 	bl	8004418 <_printf_common>
 8004068:	3001      	adds	r0, #1
 800406a:	f040 8090 	bne.w	800418e <_printf_float+0x1e2>
 800406e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004072:	b00d      	add	sp, #52	; 0x34
 8004074:	ecbd 8b02 	vpop	{d8}
 8004078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407c:	4642      	mov	r2, r8
 800407e:	464b      	mov	r3, r9
 8004080:	4640      	mov	r0, r8
 8004082:	4649      	mov	r1, r9
 8004084:	f7fc fd5a 	bl	8000b3c <__aeabi_dcmpun>
 8004088:	b140      	cbz	r0, 800409c <_printf_float+0xf0>
 800408a:	464b      	mov	r3, r9
 800408c:	2b00      	cmp	r3, #0
 800408e:	bfbc      	itt	lt
 8004090:	232d      	movlt	r3, #45	; 0x2d
 8004092:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004096:	487f      	ldr	r0, [pc, #508]	; (8004294 <_printf_float+0x2e8>)
 8004098:	4b7f      	ldr	r3, [pc, #508]	; (8004298 <_printf_float+0x2ec>)
 800409a:	e7d1      	b.n	8004040 <_printf_float+0x94>
 800409c:	6863      	ldr	r3, [r4, #4]
 800409e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80040a2:	9206      	str	r2, [sp, #24]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	d13f      	bne.n	8004128 <_printf_float+0x17c>
 80040a8:	2306      	movs	r3, #6
 80040aa:	6063      	str	r3, [r4, #4]
 80040ac:	9b05      	ldr	r3, [sp, #20]
 80040ae:	6861      	ldr	r1, [r4, #4]
 80040b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80040b4:	2300      	movs	r3, #0
 80040b6:	9303      	str	r3, [sp, #12]
 80040b8:	ab0a      	add	r3, sp, #40	; 0x28
 80040ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80040be:	ab09      	add	r3, sp, #36	; 0x24
 80040c0:	ec49 8b10 	vmov	d0, r8, r9
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	6022      	str	r2, [r4, #0]
 80040c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80040cc:	4628      	mov	r0, r5
 80040ce:	f7ff fecd 	bl	8003e6c <__cvt>
 80040d2:	9b06      	ldr	r3, [sp, #24]
 80040d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040d6:	2b47      	cmp	r3, #71	; 0x47
 80040d8:	4680      	mov	r8, r0
 80040da:	d108      	bne.n	80040ee <_printf_float+0x142>
 80040dc:	1cc8      	adds	r0, r1, #3
 80040de:	db02      	blt.n	80040e6 <_printf_float+0x13a>
 80040e0:	6863      	ldr	r3, [r4, #4]
 80040e2:	4299      	cmp	r1, r3
 80040e4:	dd41      	ble.n	800416a <_printf_float+0x1be>
 80040e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80040ea:	fa5f fb8b 	uxtb.w	fp, fp
 80040ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80040f2:	d820      	bhi.n	8004136 <_printf_float+0x18a>
 80040f4:	3901      	subs	r1, #1
 80040f6:	465a      	mov	r2, fp
 80040f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040fc:	9109      	str	r1, [sp, #36]	; 0x24
 80040fe:	f7ff ff17 	bl	8003f30 <__exponent>
 8004102:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004104:	1813      	adds	r3, r2, r0
 8004106:	2a01      	cmp	r2, #1
 8004108:	4681      	mov	r9, r0
 800410a:	6123      	str	r3, [r4, #16]
 800410c:	dc02      	bgt.n	8004114 <_printf_float+0x168>
 800410e:	6822      	ldr	r2, [r4, #0]
 8004110:	07d2      	lsls	r2, r2, #31
 8004112:	d501      	bpl.n	8004118 <_printf_float+0x16c>
 8004114:	3301      	adds	r3, #1
 8004116:	6123      	str	r3, [r4, #16]
 8004118:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800411c:	2b00      	cmp	r3, #0
 800411e:	d09c      	beq.n	800405a <_printf_float+0xae>
 8004120:	232d      	movs	r3, #45	; 0x2d
 8004122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004126:	e798      	b.n	800405a <_printf_float+0xae>
 8004128:	9a06      	ldr	r2, [sp, #24]
 800412a:	2a47      	cmp	r2, #71	; 0x47
 800412c:	d1be      	bne.n	80040ac <_printf_float+0x100>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1bc      	bne.n	80040ac <_printf_float+0x100>
 8004132:	2301      	movs	r3, #1
 8004134:	e7b9      	b.n	80040aa <_printf_float+0xfe>
 8004136:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800413a:	d118      	bne.n	800416e <_printf_float+0x1c2>
 800413c:	2900      	cmp	r1, #0
 800413e:	6863      	ldr	r3, [r4, #4]
 8004140:	dd0b      	ble.n	800415a <_printf_float+0x1ae>
 8004142:	6121      	str	r1, [r4, #16]
 8004144:	b913      	cbnz	r3, 800414c <_printf_float+0x1a0>
 8004146:	6822      	ldr	r2, [r4, #0]
 8004148:	07d0      	lsls	r0, r2, #31
 800414a:	d502      	bpl.n	8004152 <_printf_float+0x1a6>
 800414c:	3301      	adds	r3, #1
 800414e:	440b      	add	r3, r1
 8004150:	6123      	str	r3, [r4, #16]
 8004152:	65a1      	str	r1, [r4, #88]	; 0x58
 8004154:	f04f 0900 	mov.w	r9, #0
 8004158:	e7de      	b.n	8004118 <_printf_float+0x16c>
 800415a:	b913      	cbnz	r3, 8004162 <_printf_float+0x1b6>
 800415c:	6822      	ldr	r2, [r4, #0]
 800415e:	07d2      	lsls	r2, r2, #31
 8004160:	d501      	bpl.n	8004166 <_printf_float+0x1ba>
 8004162:	3302      	adds	r3, #2
 8004164:	e7f4      	b.n	8004150 <_printf_float+0x1a4>
 8004166:	2301      	movs	r3, #1
 8004168:	e7f2      	b.n	8004150 <_printf_float+0x1a4>
 800416a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800416e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004170:	4299      	cmp	r1, r3
 8004172:	db05      	blt.n	8004180 <_printf_float+0x1d4>
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	6121      	str	r1, [r4, #16]
 8004178:	07d8      	lsls	r0, r3, #31
 800417a:	d5ea      	bpl.n	8004152 <_printf_float+0x1a6>
 800417c:	1c4b      	adds	r3, r1, #1
 800417e:	e7e7      	b.n	8004150 <_printf_float+0x1a4>
 8004180:	2900      	cmp	r1, #0
 8004182:	bfd4      	ite	le
 8004184:	f1c1 0202 	rsble	r2, r1, #2
 8004188:	2201      	movgt	r2, #1
 800418a:	4413      	add	r3, r2
 800418c:	e7e0      	b.n	8004150 <_printf_float+0x1a4>
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	055a      	lsls	r2, r3, #21
 8004192:	d407      	bmi.n	80041a4 <_printf_float+0x1f8>
 8004194:	6923      	ldr	r3, [r4, #16]
 8004196:	4642      	mov	r2, r8
 8004198:	4631      	mov	r1, r6
 800419a:	4628      	mov	r0, r5
 800419c:	47b8      	blx	r7
 800419e:	3001      	adds	r0, #1
 80041a0:	d12c      	bne.n	80041fc <_printf_float+0x250>
 80041a2:	e764      	b.n	800406e <_printf_float+0xc2>
 80041a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041a8:	f240 80e0 	bls.w	800436c <_printf_float+0x3c0>
 80041ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041b0:	2200      	movs	r2, #0
 80041b2:	2300      	movs	r3, #0
 80041b4:	f7fc fc90 	bl	8000ad8 <__aeabi_dcmpeq>
 80041b8:	2800      	cmp	r0, #0
 80041ba:	d034      	beq.n	8004226 <_printf_float+0x27a>
 80041bc:	4a37      	ldr	r2, [pc, #220]	; (800429c <_printf_float+0x2f0>)
 80041be:	2301      	movs	r3, #1
 80041c0:	4631      	mov	r1, r6
 80041c2:	4628      	mov	r0, r5
 80041c4:	47b8      	blx	r7
 80041c6:	3001      	adds	r0, #1
 80041c8:	f43f af51 	beq.w	800406e <_printf_float+0xc2>
 80041cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041d0:	429a      	cmp	r2, r3
 80041d2:	db02      	blt.n	80041da <_printf_float+0x22e>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	07d8      	lsls	r0, r3, #31
 80041d8:	d510      	bpl.n	80041fc <_printf_float+0x250>
 80041da:	ee18 3a10 	vmov	r3, s16
 80041de:	4652      	mov	r2, sl
 80041e0:	4631      	mov	r1, r6
 80041e2:	4628      	mov	r0, r5
 80041e4:	47b8      	blx	r7
 80041e6:	3001      	adds	r0, #1
 80041e8:	f43f af41 	beq.w	800406e <_printf_float+0xc2>
 80041ec:	f04f 0800 	mov.w	r8, #0
 80041f0:	f104 091a 	add.w	r9, r4, #26
 80041f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041f6:	3b01      	subs	r3, #1
 80041f8:	4543      	cmp	r3, r8
 80041fa:	dc09      	bgt.n	8004210 <_printf_float+0x264>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	079b      	lsls	r3, r3, #30
 8004200:	f100 8105 	bmi.w	800440e <_printf_float+0x462>
 8004204:	68e0      	ldr	r0, [r4, #12]
 8004206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004208:	4298      	cmp	r0, r3
 800420a:	bfb8      	it	lt
 800420c:	4618      	movlt	r0, r3
 800420e:	e730      	b.n	8004072 <_printf_float+0xc6>
 8004210:	2301      	movs	r3, #1
 8004212:	464a      	mov	r2, r9
 8004214:	4631      	mov	r1, r6
 8004216:	4628      	mov	r0, r5
 8004218:	47b8      	blx	r7
 800421a:	3001      	adds	r0, #1
 800421c:	f43f af27 	beq.w	800406e <_printf_float+0xc2>
 8004220:	f108 0801 	add.w	r8, r8, #1
 8004224:	e7e6      	b.n	80041f4 <_printf_float+0x248>
 8004226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004228:	2b00      	cmp	r3, #0
 800422a:	dc39      	bgt.n	80042a0 <_printf_float+0x2f4>
 800422c:	4a1b      	ldr	r2, [pc, #108]	; (800429c <_printf_float+0x2f0>)
 800422e:	2301      	movs	r3, #1
 8004230:	4631      	mov	r1, r6
 8004232:	4628      	mov	r0, r5
 8004234:	47b8      	blx	r7
 8004236:	3001      	adds	r0, #1
 8004238:	f43f af19 	beq.w	800406e <_printf_float+0xc2>
 800423c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004240:	4313      	orrs	r3, r2
 8004242:	d102      	bne.n	800424a <_printf_float+0x29e>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	07d9      	lsls	r1, r3, #31
 8004248:	d5d8      	bpl.n	80041fc <_printf_float+0x250>
 800424a:	ee18 3a10 	vmov	r3, s16
 800424e:	4652      	mov	r2, sl
 8004250:	4631      	mov	r1, r6
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	f43f af09 	beq.w	800406e <_printf_float+0xc2>
 800425c:	f04f 0900 	mov.w	r9, #0
 8004260:	f104 0a1a 	add.w	sl, r4, #26
 8004264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004266:	425b      	negs	r3, r3
 8004268:	454b      	cmp	r3, r9
 800426a:	dc01      	bgt.n	8004270 <_printf_float+0x2c4>
 800426c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800426e:	e792      	b.n	8004196 <_printf_float+0x1ea>
 8004270:	2301      	movs	r3, #1
 8004272:	4652      	mov	r2, sl
 8004274:	4631      	mov	r1, r6
 8004276:	4628      	mov	r0, r5
 8004278:	47b8      	blx	r7
 800427a:	3001      	adds	r0, #1
 800427c:	f43f aef7 	beq.w	800406e <_printf_float+0xc2>
 8004280:	f109 0901 	add.w	r9, r9, #1
 8004284:	e7ee      	b.n	8004264 <_printf_float+0x2b8>
 8004286:	bf00      	nop
 8004288:	7fefffff 	.word	0x7fefffff
 800428c:	08006cb0 	.word	0x08006cb0
 8004290:	08006cb4 	.word	0x08006cb4
 8004294:	08006cbc 	.word	0x08006cbc
 8004298:	08006cb8 	.word	0x08006cb8
 800429c:	08006cc0 	.word	0x08006cc0
 80042a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042a4:	429a      	cmp	r2, r3
 80042a6:	bfa8      	it	ge
 80042a8:	461a      	movge	r2, r3
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	4691      	mov	r9, r2
 80042ae:	dc37      	bgt.n	8004320 <_printf_float+0x374>
 80042b0:	f04f 0b00 	mov.w	fp, #0
 80042b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042b8:	f104 021a 	add.w	r2, r4, #26
 80042bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042be:	9305      	str	r3, [sp, #20]
 80042c0:	eba3 0309 	sub.w	r3, r3, r9
 80042c4:	455b      	cmp	r3, fp
 80042c6:	dc33      	bgt.n	8004330 <_printf_float+0x384>
 80042c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042cc:	429a      	cmp	r2, r3
 80042ce:	db3b      	blt.n	8004348 <_printf_float+0x39c>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	07da      	lsls	r2, r3, #31
 80042d4:	d438      	bmi.n	8004348 <_printf_float+0x39c>
 80042d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042d8:	9a05      	ldr	r2, [sp, #20]
 80042da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042dc:	1a9a      	subs	r2, r3, r2
 80042de:	eba3 0901 	sub.w	r9, r3, r1
 80042e2:	4591      	cmp	r9, r2
 80042e4:	bfa8      	it	ge
 80042e6:	4691      	movge	r9, r2
 80042e8:	f1b9 0f00 	cmp.w	r9, #0
 80042ec:	dc35      	bgt.n	800435a <_printf_float+0x3ae>
 80042ee:	f04f 0800 	mov.w	r8, #0
 80042f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042f6:	f104 0a1a 	add.w	sl, r4, #26
 80042fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	eba3 0309 	sub.w	r3, r3, r9
 8004304:	4543      	cmp	r3, r8
 8004306:	f77f af79 	ble.w	80041fc <_printf_float+0x250>
 800430a:	2301      	movs	r3, #1
 800430c:	4652      	mov	r2, sl
 800430e:	4631      	mov	r1, r6
 8004310:	4628      	mov	r0, r5
 8004312:	47b8      	blx	r7
 8004314:	3001      	adds	r0, #1
 8004316:	f43f aeaa 	beq.w	800406e <_printf_float+0xc2>
 800431a:	f108 0801 	add.w	r8, r8, #1
 800431e:	e7ec      	b.n	80042fa <_printf_float+0x34e>
 8004320:	4613      	mov	r3, r2
 8004322:	4631      	mov	r1, r6
 8004324:	4642      	mov	r2, r8
 8004326:	4628      	mov	r0, r5
 8004328:	47b8      	blx	r7
 800432a:	3001      	adds	r0, #1
 800432c:	d1c0      	bne.n	80042b0 <_printf_float+0x304>
 800432e:	e69e      	b.n	800406e <_printf_float+0xc2>
 8004330:	2301      	movs	r3, #1
 8004332:	4631      	mov	r1, r6
 8004334:	4628      	mov	r0, r5
 8004336:	9205      	str	r2, [sp, #20]
 8004338:	47b8      	blx	r7
 800433a:	3001      	adds	r0, #1
 800433c:	f43f ae97 	beq.w	800406e <_printf_float+0xc2>
 8004340:	9a05      	ldr	r2, [sp, #20]
 8004342:	f10b 0b01 	add.w	fp, fp, #1
 8004346:	e7b9      	b.n	80042bc <_printf_float+0x310>
 8004348:	ee18 3a10 	vmov	r3, s16
 800434c:	4652      	mov	r2, sl
 800434e:	4631      	mov	r1, r6
 8004350:	4628      	mov	r0, r5
 8004352:	47b8      	blx	r7
 8004354:	3001      	adds	r0, #1
 8004356:	d1be      	bne.n	80042d6 <_printf_float+0x32a>
 8004358:	e689      	b.n	800406e <_printf_float+0xc2>
 800435a:	9a05      	ldr	r2, [sp, #20]
 800435c:	464b      	mov	r3, r9
 800435e:	4442      	add	r2, r8
 8004360:	4631      	mov	r1, r6
 8004362:	4628      	mov	r0, r5
 8004364:	47b8      	blx	r7
 8004366:	3001      	adds	r0, #1
 8004368:	d1c1      	bne.n	80042ee <_printf_float+0x342>
 800436a:	e680      	b.n	800406e <_printf_float+0xc2>
 800436c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800436e:	2a01      	cmp	r2, #1
 8004370:	dc01      	bgt.n	8004376 <_printf_float+0x3ca>
 8004372:	07db      	lsls	r3, r3, #31
 8004374:	d538      	bpl.n	80043e8 <_printf_float+0x43c>
 8004376:	2301      	movs	r3, #1
 8004378:	4642      	mov	r2, r8
 800437a:	4631      	mov	r1, r6
 800437c:	4628      	mov	r0, r5
 800437e:	47b8      	blx	r7
 8004380:	3001      	adds	r0, #1
 8004382:	f43f ae74 	beq.w	800406e <_printf_float+0xc2>
 8004386:	ee18 3a10 	vmov	r3, s16
 800438a:	4652      	mov	r2, sl
 800438c:	4631      	mov	r1, r6
 800438e:	4628      	mov	r0, r5
 8004390:	47b8      	blx	r7
 8004392:	3001      	adds	r0, #1
 8004394:	f43f ae6b 	beq.w	800406e <_printf_float+0xc2>
 8004398:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800439c:	2200      	movs	r2, #0
 800439e:	2300      	movs	r3, #0
 80043a0:	f7fc fb9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80043a4:	b9d8      	cbnz	r0, 80043de <_printf_float+0x432>
 80043a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043a8:	f108 0201 	add.w	r2, r8, #1
 80043ac:	3b01      	subs	r3, #1
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	d10e      	bne.n	80043d6 <_printf_float+0x42a>
 80043b8:	e659      	b.n	800406e <_printf_float+0xc2>
 80043ba:	2301      	movs	r3, #1
 80043bc:	4652      	mov	r2, sl
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b8      	blx	r7
 80043c4:	3001      	adds	r0, #1
 80043c6:	f43f ae52 	beq.w	800406e <_printf_float+0xc2>
 80043ca:	f108 0801 	add.w	r8, r8, #1
 80043ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043d0:	3b01      	subs	r3, #1
 80043d2:	4543      	cmp	r3, r8
 80043d4:	dcf1      	bgt.n	80043ba <_printf_float+0x40e>
 80043d6:	464b      	mov	r3, r9
 80043d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80043dc:	e6dc      	b.n	8004198 <_printf_float+0x1ec>
 80043de:	f04f 0800 	mov.w	r8, #0
 80043e2:	f104 0a1a 	add.w	sl, r4, #26
 80043e6:	e7f2      	b.n	80043ce <_printf_float+0x422>
 80043e8:	2301      	movs	r3, #1
 80043ea:	4642      	mov	r2, r8
 80043ec:	e7df      	b.n	80043ae <_printf_float+0x402>
 80043ee:	2301      	movs	r3, #1
 80043f0:	464a      	mov	r2, r9
 80043f2:	4631      	mov	r1, r6
 80043f4:	4628      	mov	r0, r5
 80043f6:	47b8      	blx	r7
 80043f8:	3001      	adds	r0, #1
 80043fa:	f43f ae38 	beq.w	800406e <_printf_float+0xc2>
 80043fe:	f108 0801 	add.w	r8, r8, #1
 8004402:	68e3      	ldr	r3, [r4, #12]
 8004404:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004406:	1a5b      	subs	r3, r3, r1
 8004408:	4543      	cmp	r3, r8
 800440a:	dcf0      	bgt.n	80043ee <_printf_float+0x442>
 800440c:	e6fa      	b.n	8004204 <_printf_float+0x258>
 800440e:	f04f 0800 	mov.w	r8, #0
 8004412:	f104 0919 	add.w	r9, r4, #25
 8004416:	e7f4      	b.n	8004402 <_printf_float+0x456>

08004418 <_printf_common>:
 8004418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800441c:	4616      	mov	r6, r2
 800441e:	4699      	mov	r9, r3
 8004420:	688a      	ldr	r2, [r1, #8]
 8004422:	690b      	ldr	r3, [r1, #16]
 8004424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004428:	4293      	cmp	r3, r2
 800442a:	bfb8      	it	lt
 800442c:	4613      	movlt	r3, r2
 800442e:	6033      	str	r3, [r6, #0]
 8004430:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004434:	4607      	mov	r7, r0
 8004436:	460c      	mov	r4, r1
 8004438:	b10a      	cbz	r2, 800443e <_printf_common+0x26>
 800443a:	3301      	adds	r3, #1
 800443c:	6033      	str	r3, [r6, #0]
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	0699      	lsls	r1, r3, #26
 8004442:	bf42      	ittt	mi
 8004444:	6833      	ldrmi	r3, [r6, #0]
 8004446:	3302      	addmi	r3, #2
 8004448:	6033      	strmi	r3, [r6, #0]
 800444a:	6825      	ldr	r5, [r4, #0]
 800444c:	f015 0506 	ands.w	r5, r5, #6
 8004450:	d106      	bne.n	8004460 <_printf_common+0x48>
 8004452:	f104 0a19 	add.w	sl, r4, #25
 8004456:	68e3      	ldr	r3, [r4, #12]
 8004458:	6832      	ldr	r2, [r6, #0]
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	42ab      	cmp	r3, r5
 800445e:	dc26      	bgt.n	80044ae <_printf_common+0x96>
 8004460:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004464:	1e13      	subs	r3, r2, #0
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	bf18      	it	ne
 800446a:	2301      	movne	r3, #1
 800446c:	0692      	lsls	r2, r2, #26
 800446e:	d42b      	bmi.n	80044c8 <_printf_common+0xb0>
 8004470:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004474:	4649      	mov	r1, r9
 8004476:	4638      	mov	r0, r7
 8004478:	47c0      	blx	r8
 800447a:	3001      	adds	r0, #1
 800447c:	d01e      	beq.n	80044bc <_printf_common+0xa4>
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	68e5      	ldr	r5, [r4, #12]
 8004482:	6832      	ldr	r2, [r6, #0]
 8004484:	f003 0306 	and.w	r3, r3, #6
 8004488:	2b04      	cmp	r3, #4
 800448a:	bf08      	it	eq
 800448c:	1aad      	subeq	r5, r5, r2
 800448e:	68a3      	ldr	r3, [r4, #8]
 8004490:	6922      	ldr	r2, [r4, #16]
 8004492:	bf0c      	ite	eq
 8004494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004498:	2500      	movne	r5, #0
 800449a:	4293      	cmp	r3, r2
 800449c:	bfc4      	itt	gt
 800449e:	1a9b      	subgt	r3, r3, r2
 80044a0:	18ed      	addgt	r5, r5, r3
 80044a2:	2600      	movs	r6, #0
 80044a4:	341a      	adds	r4, #26
 80044a6:	42b5      	cmp	r5, r6
 80044a8:	d11a      	bne.n	80044e0 <_printf_common+0xc8>
 80044aa:	2000      	movs	r0, #0
 80044ac:	e008      	b.n	80044c0 <_printf_common+0xa8>
 80044ae:	2301      	movs	r3, #1
 80044b0:	4652      	mov	r2, sl
 80044b2:	4649      	mov	r1, r9
 80044b4:	4638      	mov	r0, r7
 80044b6:	47c0      	blx	r8
 80044b8:	3001      	adds	r0, #1
 80044ba:	d103      	bne.n	80044c4 <_printf_common+0xac>
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044c4:	3501      	adds	r5, #1
 80044c6:	e7c6      	b.n	8004456 <_printf_common+0x3e>
 80044c8:	18e1      	adds	r1, r4, r3
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	2030      	movs	r0, #48	; 0x30
 80044ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044d2:	4422      	add	r2, r4
 80044d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044dc:	3302      	adds	r3, #2
 80044de:	e7c7      	b.n	8004470 <_printf_common+0x58>
 80044e0:	2301      	movs	r3, #1
 80044e2:	4622      	mov	r2, r4
 80044e4:	4649      	mov	r1, r9
 80044e6:	4638      	mov	r0, r7
 80044e8:	47c0      	blx	r8
 80044ea:	3001      	adds	r0, #1
 80044ec:	d0e6      	beq.n	80044bc <_printf_common+0xa4>
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7d9      	b.n	80044a6 <_printf_common+0x8e>
	...

080044f4 <_printf_i>:
 80044f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f8:	7e0f      	ldrb	r7, [r1, #24]
 80044fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044fc:	2f78      	cmp	r7, #120	; 0x78
 80044fe:	4691      	mov	r9, r2
 8004500:	4680      	mov	r8, r0
 8004502:	460c      	mov	r4, r1
 8004504:	469a      	mov	sl, r3
 8004506:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800450a:	d807      	bhi.n	800451c <_printf_i+0x28>
 800450c:	2f62      	cmp	r7, #98	; 0x62
 800450e:	d80a      	bhi.n	8004526 <_printf_i+0x32>
 8004510:	2f00      	cmp	r7, #0
 8004512:	f000 80d8 	beq.w	80046c6 <_printf_i+0x1d2>
 8004516:	2f58      	cmp	r7, #88	; 0x58
 8004518:	f000 80a3 	beq.w	8004662 <_printf_i+0x16e>
 800451c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004520:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004524:	e03a      	b.n	800459c <_printf_i+0xa8>
 8004526:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800452a:	2b15      	cmp	r3, #21
 800452c:	d8f6      	bhi.n	800451c <_printf_i+0x28>
 800452e:	a101      	add	r1, pc, #4	; (adr r1, 8004534 <_printf_i+0x40>)
 8004530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004534:	0800458d 	.word	0x0800458d
 8004538:	080045a1 	.word	0x080045a1
 800453c:	0800451d 	.word	0x0800451d
 8004540:	0800451d 	.word	0x0800451d
 8004544:	0800451d 	.word	0x0800451d
 8004548:	0800451d 	.word	0x0800451d
 800454c:	080045a1 	.word	0x080045a1
 8004550:	0800451d 	.word	0x0800451d
 8004554:	0800451d 	.word	0x0800451d
 8004558:	0800451d 	.word	0x0800451d
 800455c:	0800451d 	.word	0x0800451d
 8004560:	080046ad 	.word	0x080046ad
 8004564:	080045d1 	.word	0x080045d1
 8004568:	0800468f 	.word	0x0800468f
 800456c:	0800451d 	.word	0x0800451d
 8004570:	0800451d 	.word	0x0800451d
 8004574:	080046cf 	.word	0x080046cf
 8004578:	0800451d 	.word	0x0800451d
 800457c:	080045d1 	.word	0x080045d1
 8004580:	0800451d 	.word	0x0800451d
 8004584:	0800451d 	.word	0x0800451d
 8004588:	08004697 	.word	0x08004697
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	1d1a      	adds	r2, r3, #4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	602a      	str	r2, [r5, #0]
 8004594:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004598:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800459c:	2301      	movs	r3, #1
 800459e:	e0a3      	b.n	80046e8 <_printf_i+0x1f4>
 80045a0:	6820      	ldr	r0, [r4, #0]
 80045a2:	6829      	ldr	r1, [r5, #0]
 80045a4:	0606      	lsls	r6, r0, #24
 80045a6:	f101 0304 	add.w	r3, r1, #4
 80045aa:	d50a      	bpl.n	80045c2 <_printf_i+0xce>
 80045ac:	680e      	ldr	r6, [r1, #0]
 80045ae:	602b      	str	r3, [r5, #0]
 80045b0:	2e00      	cmp	r6, #0
 80045b2:	da03      	bge.n	80045bc <_printf_i+0xc8>
 80045b4:	232d      	movs	r3, #45	; 0x2d
 80045b6:	4276      	negs	r6, r6
 80045b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045bc:	485e      	ldr	r0, [pc, #376]	; (8004738 <_printf_i+0x244>)
 80045be:	230a      	movs	r3, #10
 80045c0:	e019      	b.n	80045f6 <_printf_i+0x102>
 80045c2:	680e      	ldr	r6, [r1, #0]
 80045c4:	602b      	str	r3, [r5, #0]
 80045c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045ca:	bf18      	it	ne
 80045cc:	b236      	sxthne	r6, r6
 80045ce:	e7ef      	b.n	80045b0 <_printf_i+0xbc>
 80045d0:	682b      	ldr	r3, [r5, #0]
 80045d2:	6820      	ldr	r0, [r4, #0]
 80045d4:	1d19      	adds	r1, r3, #4
 80045d6:	6029      	str	r1, [r5, #0]
 80045d8:	0601      	lsls	r1, r0, #24
 80045da:	d501      	bpl.n	80045e0 <_printf_i+0xec>
 80045dc:	681e      	ldr	r6, [r3, #0]
 80045de:	e002      	b.n	80045e6 <_printf_i+0xf2>
 80045e0:	0646      	lsls	r6, r0, #25
 80045e2:	d5fb      	bpl.n	80045dc <_printf_i+0xe8>
 80045e4:	881e      	ldrh	r6, [r3, #0]
 80045e6:	4854      	ldr	r0, [pc, #336]	; (8004738 <_printf_i+0x244>)
 80045e8:	2f6f      	cmp	r7, #111	; 0x6f
 80045ea:	bf0c      	ite	eq
 80045ec:	2308      	moveq	r3, #8
 80045ee:	230a      	movne	r3, #10
 80045f0:	2100      	movs	r1, #0
 80045f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045f6:	6865      	ldr	r5, [r4, #4]
 80045f8:	60a5      	str	r5, [r4, #8]
 80045fa:	2d00      	cmp	r5, #0
 80045fc:	bfa2      	ittt	ge
 80045fe:	6821      	ldrge	r1, [r4, #0]
 8004600:	f021 0104 	bicge.w	r1, r1, #4
 8004604:	6021      	strge	r1, [r4, #0]
 8004606:	b90e      	cbnz	r6, 800460c <_printf_i+0x118>
 8004608:	2d00      	cmp	r5, #0
 800460a:	d04d      	beq.n	80046a8 <_printf_i+0x1b4>
 800460c:	4615      	mov	r5, r2
 800460e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004612:	fb03 6711 	mls	r7, r3, r1, r6
 8004616:	5dc7      	ldrb	r7, [r0, r7]
 8004618:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800461c:	4637      	mov	r7, r6
 800461e:	42bb      	cmp	r3, r7
 8004620:	460e      	mov	r6, r1
 8004622:	d9f4      	bls.n	800460e <_printf_i+0x11a>
 8004624:	2b08      	cmp	r3, #8
 8004626:	d10b      	bne.n	8004640 <_printf_i+0x14c>
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	07de      	lsls	r6, r3, #31
 800462c:	d508      	bpl.n	8004640 <_printf_i+0x14c>
 800462e:	6923      	ldr	r3, [r4, #16]
 8004630:	6861      	ldr	r1, [r4, #4]
 8004632:	4299      	cmp	r1, r3
 8004634:	bfde      	ittt	le
 8004636:	2330      	movle	r3, #48	; 0x30
 8004638:	f805 3c01 	strble.w	r3, [r5, #-1]
 800463c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004640:	1b52      	subs	r2, r2, r5
 8004642:	6122      	str	r2, [r4, #16]
 8004644:	f8cd a000 	str.w	sl, [sp]
 8004648:	464b      	mov	r3, r9
 800464a:	aa03      	add	r2, sp, #12
 800464c:	4621      	mov	r1, r4
 800464e:	4640      	mov	r0, r8
 8004650:	f7ff fee2 	bl	8004418 <_printf_common>
 8004654:	3001      	adds	r0, #1
 8004656:	d14c      	bne.n	80046f2 <_printf_i+0x1fe>
 8004658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800465c:	b004      	add	sp, #16
 800465e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004662:	4835      	ldr	r0, [pc, #212]	; (8004738 <_printf_i+0x244>)
 8004664:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004668:	6829      	ldr	r1, [r5, #0]
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004670:	6029      	str	r1, [r5, #0]
 8004672:	061d      	lsls	r5, r3, #24
 8004674:	d514      	bpl.n	80046a0 <_printf_i+0x1ac>
 8004676:	07df      	lsls	r7, r3, #31
 8004678:	bf44      	itt	mi
 800467a:	f043 0320 	orrmi.w	r3, r3, #32
 800467e:	6023      	strmi	r3, [r4, #0]
 8004680:	b91e      	cbnz	r6, 800468a <_printf_i+0x196>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	f023 0320 	bic.w	r3, r3, #32
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	2310      	movs	r3, #16
 800468c:	e7b0      	b.n	80045f0 <_printf_i+0xfc>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	f043 0320 	orr.w	r3, r3, #32
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	2378      	movs	r3, #120	; 0x78
 8004698:	4828      	ldr	r0, [pc, #160]	; (800473c <_printf_i+0x248>)
 800469a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800469e:	e7e3      	b.n	8004668 <_printf_i+0x174>
 80046a0:	0659      	lsls	r1, r3, #25
 80046a2:	bf48      	it	mi
 80046a4:	b2b6      	uxthmi	r6, r6
 80046a6:	e7e6      	b.n	8004676 <_printf_i+0x182>
 80046a8:	4615      	mov	r5, r2
 80046aa:	e7bb      	b.n	8004624 <_printf_i+0x130>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	6826      	ldr	r6, [r4, #0]
 80046b0:	6961      	ldr	r1, [r4, #20]
 80046b2:	1d18      	adds	r0, r3, #4
 80046b4:	6028      	str	r0, [r5, #0]
 80046b6:	0635      	lsls	r5, r6, #24
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	d501      	bpl.n	80046c0 <_printf_i+0x1cc>
 80046bc:	6019      	str	r1, [r3, #0]
 80046be:	e002      	b.n	80046c6 <_printf_i+0x1d2>
 80046c0:	0670      	lsls	r0, r6, #25
 80046c2:	d5fb      	bpl.n	80046bc <_printf_i+0x1c8>
 80046c4:	8019      	strh	r1, [r3, #0]
 80046c6:	2300      	movs	r3, #0
 80046c8:	6123      	str	r3, [r4, #16]
 80046ca:	4615      	mov	r5, r2
 80046cc:	e7ba      	b.n	8004644 <_printf_i+0x150>
 80046ce:	682b      	ldr	r3, [r5, #0]
 80046d0:	1d1a      	adds	r2, r3, #4
 80046d2:	602a      	str	r2, [r5, #0]
 80046d4:	681d      	ldr	r5, [r3, #0]
 80046d6:	6862      	ldr	r2, [r4, #4]
 80046d8:	2100      	movs	r1, #0
 80046da:	4628      	mov	r0, r5
 80046dc:	f7fb fd88 	bl	80001f0 <memchr>
 80046e0:	b108      	cbz	r0, 80046e6 <_printf_i+0x1f2>
 80046e2:	1b40      	subs	r0, r0, r5
 80046e4:	6060      	str	r0, [r4, #4]
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	6123      	str	r3, [r4, #16]
 80046ea:	2300      	movs	r3, #0
 80046ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046f0:	e7a8      	b.n	8004644 <_printf_i+0x150>
 80046f2:	6923      	ldr	r3, [r4, #16]
 80046f4:	462a      	mov	r2, r5
 80046f6:	4649      	mov	r1, r9
 80046f8:	4640      	mov	r0, r8
 80046fa:	47d0      	blx	sl
 80046fc:	3001      	adds	r0, #1
 80046fe:	d0ab      	beq.n	8004658 <_printf_i+0x164>
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	079b      	lsls	r3, r3, #30
 8004704:	d413      	bmi.n	800472e <_printf_i+0x23a>
 8004706:	68e0      	ldr	r0, [r4, #12]
 8004708:	9b03      	ldr	r3, [sp, #12]
 800470a:	4298      	cmp	r0, r3
 800470c:	bfb8      	it	lt
 800470e:	4618      	movlt	r0, r3
 8004710:	e7a4      	b.n	800465c <_printf_i+0x168>
 8004712:	2301      	movs	r3, #1
 8004714:	4632      	mov	r2, r6
 8004716:	4649      	mov	r1, r9
 8004718:	4640      	mov	r0, r8
 800471a:	47d0      	blx	sl
 800471c:	3001      	adds	r0, #1
 800471e:	d09b      	beq.n	8004658 <_printf_i+0x164>
 8004720:	3501      	adds	r5, #1
 8004722:	68e3      	ldr	r3, [r4, #12]
 8004724:	9903      	ldr	r1, [sp, #12]
 8004726:	1a5b      	subs	r3, r3, r1
 8004728:	42ab      	cmp	r3, r5
 800472a:	dcf2      	bgt.n	8004712 <_printf_i+0x21e>
 800472c:	e7eb      	b.n	8004706 <_printf_i+0x212>
 800472e:	2500      	movs	r5, #0
 8004730:	f104 0619 	add.w	r6, r4, #25
 8004734:	e7f5      	b.n	8004722 <_printf_i+0x22e>
 8004736:	bf00      	nop
 8004738:	08006cc2 	.word	0x08006cc2
 800473c:	08006cd3 	.word	0x08006cd3

08004740 <iprintf>:
 8004740:	b40f      	push	{r0, r1, r2, r3}
 8004742:	4b0a      	ldr	r3, [pc, #40]	; (800476c <iprintf+0x2c>)
 8004744:	b513      	push	{r0, r1, r4, lr}
 8004746:	681c      	ldr	r4, [r3, #0]
 8004748:	b124      	cbz	r4, 8004754 <iprintf+0x14>
 800474a:	69a3      	ldr	r3, [r4, #24]
 800474c:	b913      	cbnz	r3, 8004754 <iprintf+0x14>
 800474e:	4620      	mov	r0, r4
 8004750:	f000 ff00 	bl	8005554 <__sinit>
 8004754:	ab05      	add	r3, sp, #20
 8004756:	9a04      	ldr	r2, [sp, #16]
 8004758:	68a1      	ldr	r1, [r4, #8]
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	4620      	mov	r0, r4
 800475e:	f001 fda7 	bl	80062b0 <_vfiprintf_r>
 8004762:	b002      	add	sp, #8
 8004764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004768:	b004      	add	sp, #16
 800476a:	4770      	bx	lr
 800476c:	20000008 	.word	0x20000008

08004770 <siprintf>:
 8004770:	b40e      	push	{r1, r2, r3}
 8004772:	b500      	push	{lr}
 8004774:	b09c      	sub	sp, #112	; 0x70
 8004776:	ab1d      	add	r3, sp, #116	; 0x74
 8004778:	9002      	str	r0, [sp, #8]
 800477a:	9006      	str	r0, [sp, #24]
 800477c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004780:	4809      	ldr	r0, [pc, #36]	; (80047a8 <siprintf+0x38>)
 8004782:	9107      	str	r1, [sp, #28]
 8004784:	9104      	str	r1, [sp, #16]
 8004786:	4909      	ldr	r1, [pc, #36]	; (80047ac <siprintf+0x3c>)
 8004788:	f853 2b04 	ldr.w	r2, [r3], #4
 800478c:	9105      	str	r1, [sp, #20]
 800478e:	6800      	ldr	r0, [r0, #0]
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	a902      	add	r1, sp, #8
 8004794:	f001 fc62 	bl	800605c <_svfiprintf_r>
 8004798:	9b02      	ldr	r3, [sp, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	b01c      	add	sp, #112	; 0x70
 80047a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80047a4:	b003      	add	sp, #12
 80047a6:	4770      	bx	lr
 80047a8:	20000008 	.word	0x20000008
 80047ac:	ffff0208 	.word	0xffff0208

080047b0 <quorem>:
 80047b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b4:	6903      	ldr	r3, [r0, #16]
 80047b6:	690c      	ldr	r4, [r1, #16]
 80047b8:	42a3      	cmp	r3, r4
 80047ba:	4607      	mov	r7, r0
 80047bc:	f2c0 8081 	blt.w	80048c2 <quorem+0x112>
 80047c0:	3c01      	subs	r4, #1
 80047c2:	f101 0814 	add.w	r8, r1, #20
 80047c6:	f100 0514 	add.w	r5, r0, #20
 80047ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80047d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047d8:	3301      	adds	r3, #1
 80047da:	429a      	cmp	r2, r3
 80047dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80047e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80047e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80047e8:	d331      	bcc.n	800484e <quorem+0x9e>
 80047ea:	f04f 0e00 	mov.w	lr, #0
 80047ee:	4640      	mov	r0, r8
 80047f0:	46ac      	mov	ip, r5
 80047f2:	46f2      	mov	sl, lr
 80047f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80047f8:	b293      	uxth	r3, r2
 80047fa:	fb06 e303 	mla	r3, r6, r3, lr
 80047fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004802:	b29b      	uxth	r3, r3
 8004804:	ebaa 0303 	sub.w	r3, sl, r3
 8004808:	f8dc a000 	ldr.w	sl, [ip]
 800480c:	0c12      	lsrs	r2, r2, #16
 800480e:	fa13 f38a 	uxtah	r3, r3, sl
 8004812:	fb06 e202 	mla	r2, r6, r2, lr
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	9b00      	ldr	r3, [sp, #0]
 800481a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800481e:	b292      	uxth	r2, r2
 8004820:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004824:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004828:	f8bd 3000 	ldrh.w	r3, [sp]
 800482c:	4581      	cmp	r9, r0
 800482e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004832:	f84c 3b04 	str.w	r3, [ip], #4
 8004836:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800483a:	d2db      	bcs.n	80047f4 <quorem+0x44>
 800483c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004840:	b92b      	cbnz	r3, 800484e <quorem+0x9e>
 8004842:	9b01      	ldr	r3, [sp, #4]
 8004844:	3b04      	subs	r3, #4
 8004846:	429d      	cmp	r5, r3
 8004848:	461a      	mov	r2, r3
 800484a:	d32e      	bcc.n	80048aa <quorem+0xfa>
 800484c:	613c      	str	r4, [r7, #16]
 800484e:	4638      	mov	r0, r7
 8004850:	f001 f9b0 	bl	8005bb4 <__mcmp>
 8004854:	2800      	cmp	r0, #0
 8004856:	db24      	blt.n	80048a2 <quorem+0xf2>
 8004858:	3601      	adds	r6, #1
 800485a:	4628      	mov	r0, r5
 800485c:	f04f 0c00 	mov.w	ip, #0
 8004860:	f858 2b04 	ldr.w	r2, [r8], #4
 8004864:	f8d0 e000 	ldr.w	lr, [r0]
 8004868:	b293      	uxth	r3, r2
 800486a:	ebac 0303 	sub.w	r3, ip, r3
 800486e:	0c12      	lsrs	r2, r2, #16
 8004870:	fa13 f38e 	uxtah	r3, r3, lr
 8004874:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004878:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800487c:	b29b      	uxth	r3, r3
 800487e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004882:	45c1      	cmp	r9, r8
 8004884:	f840 3b04 	str.w	r3, [r0], #4
 8004888:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800488c:	d2e8      	bcs.n	8004860 <quorem+0xb0>
 800488e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004892:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004896:	b922      	cbnz	r2, 80048a2 <quorem+0xf2>
 8004898:	3b04      	subs	r3, #4
 800489a:	429d      	cmp	r5, r3
 800489c:	461a      	mov	r2, r3
 800489e:	d30a      	bcc.n	80048b6 <quorem+0x106>
 80048a0:	613c      	str	r4, [r7, #16]
 80048a2:	4630      	mov	r0, r6
 80048a4:	b003      	add	sp, #12
 80048a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	3b04      	subs	r3, #4
 80048ae:	2a00      	cmp	r2, #0
 80048b0:	d1cc      	bne.n	800484c <quorem+0x9c>
 80048b2:	3c01      	subs	r4, #1
 80048b4:	e7c7      	b.n	8004846 <quorem+0x96>
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	3b04      	subs	r3, #4
 80048ba:	2a00      	cmp	r2, #0
 80048bc:	d1f0      	bne.n	80048a0 <quorem+0xf0>
 80048be:	3c01      	subs	r4, #1
 80048c0:	e7eb      	b.n	800489a <quorem+0xea>
 80048c2:	2000      	movs	r0, #0
 80048c4:	e7ee      	b.n	80048a4 <quorem+0xf4>
	...

080048c8 <_dtoa_r>:
 80048c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	ed2d 8b04 	vpush	{d8-d9}
 80048d0:	ec57 6b10 	vmov	r6, r7, d0
 80048d4:	b093      	sub	sp, #76	; 0x4c
 80048d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80048d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80048dc:	9106      	str	r1, [sp, #24]
 80048de:	ee10 aa10 	vmov	sl, s0
 80048e2:	4604      	mov	r4, r0
 80048e4:	9209      	str	r2, [sp, #36]	; 0x24
 80048e6:	930c      	str	r3, [sp, #48]	; 0x30
 80048e8:	46bb      	mov	fp, r7
 80048ea:	b975      	cbnz	r5, 800490a <_dtoa_r+0x42>
 80048ec:	2010      	movs	r0, #16
 80048ee:	f000 fed7 	bl	80056a0 <malloc>
 80048f2:	4602      	mov	r2, r0
 80048f4:	6260      	str	r0, [r4, #36]	; 0x24
 80048f6:	b920      	cbnz	r0, 8004902 <_dtoa_r+0x3a>
 80048f8:	4ba7      	ldr	r3, [pc, #668]	; (8004b98 <_dtoa_r+0x2d0>)
 80048fa:	21ea      	movs	r1, #234	; 0xea
 80048fc:	48a7      	ldr	r0, [pc, #668]	; (8004b9c <_dtoa_r+0x2d4>)
 80048fe:	f001 ff2d 	bl	800675c <__assert_func>
 8004902:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004906:	6005      	str	r5, [r0, #0]
 8004908:	60c5      	str	r5, [r0, #12]
 800490a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800490c:	6819      	ldr	r1, [r3, #0]
 800490e:	b151      	cbz	r1, 8004926 <_dtoa_r+0x5e>
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	604a      	str	r2, [r1, #4]
 8004914:	2301      	movs	r3, #1
 8004916:	4093      	lsls	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
 800491a:	4620      	mov	r0, r4
 800491c:	f000 ff08 	bl	8005730 <_Bfree>
 8004920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	1e3b      	subs	r3, r7, #0
 8004928:	bfaa      	itet	ge
 800492a:	2300      	movge	r3, #0
 800492c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004930:	f8c8 3000 	strge.w	r3, [r8]
 8004934:	4b9a      	ldr	r3, [pc, #616]	; (8004ba0 <_dtoa_r+0x2d8>)
 8004936:	bfbc      	itt	lt
 8004938:	2201      	movlt	r2, #1
 800493a:	f8c8 2000 	strlt.w	r2, [r8]
 800493e:	ea33 030b 	bics.w	r3, r3, fp
 8004942:	d11b      	bne.n	800497c <_dtoa_r+0xb4>
 8004944:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004946:	f242 730f 	movw	r3, #9999	; 0x270f
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004950:	4333      	orrs	r3, r6
 8004952:	f000 8592 	beq.w	800547a <_dtoa_r+0xbb2>
 8004956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004958:	b963      	cbnz	r3, 8004974 <_dtoa_r+0xac>
 800495a:	4b92      	ldr	r3, [pc, #584]	; (8004ba4 <_dtoa_r+0x2dc>)
 800495c:	e022      	b.n	80049a4 <_dtoa_r+0xdc>
 800495e:	4b92      	ldr	r3, [pc, #584]	; (8004ba8 <_dtoa_r+0x2e0>)
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	3308      	adds	r3, #8
 8004964:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	9801      	ldr	r0, [sp, #4]
 800496a:	b013      	add	sp, #76	; 0x4c
 800496c:	ecbd 8b04 	vpop	{d8-d9}
 8004970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004974:	4b8b      	ldr	r3, [pc, #556]	; (8004ba4 <_dtoa_r+0x2dc>)
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	3303      	adds	r3, #3
 800497a:	e7f3      	b.n	8004964 <_dtoa_r+0x9c>
 800497c:	2200      	movs	r2, #0
 800497e:	2300      	movs	r3, #0
 8004980:	4650      	mov	r0, sl
 8004982:	4659      	mov	r1, fp
 8004984:	f7fc f8a8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004988:	ec4b ab19 	vmov	d9, sl, fp
 800498c:	4680      	mov	r8, r0
 800498e:	b158      	cbz	r0, 80049a8 <_dtoa_r+0xe0>
 8004990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004992:	2301      	movs	r3, #1
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 856b 	beq.w	8005474 <_dtoa_r+0xbac>
 800499e:	4883      	ldr	r0, [pc, #524]	; (8004bac <_dtoa_r+0x2e4>)
 80049a0:	6018      	str	r0, [r3, #0]
 80049a2:	1e43      	subs	r3, r0, #1
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	e7df      	b.n	8004968 <_dtoa_r+0xa0>
 80049a8:	ec4b ab10 	vmov	d0, sl, fp
 80049ac:	aa10      	add	r2, sp, #64	; 0x40
 80049ae:	a911      	add	r1, sp, #68	; 0x44
 80049b0:	4620      	mov	r0, r4
 80049b2:	f001 f9a5 	bl	8005d00 <__d2b>
 80049b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80049ba:	ee08 0a10 	vmov	s16, r0
 80049be:	2d00      	cmp	r5, #0
 80049c0:	f000 8084 	beq.w	8004acc <_dtoa_r+0x204>
 80049c4:	ee19 3a90 	vmov	r3, s19
 80049c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80049d0:	4656      	mov	r6, sl
 80049d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80049d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80049da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80049de:	4b74      	ldr	r3, [pc, #464]	; (8004bb0 <_dtoa_r+0x2e8>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	4630      	mov	r0, r6
 80049e4:	4639      	mov	r1, r7
 80049e6:	f7fb fc57 	bl	8000298 <__aeabi_dsub>
 80049ea:	a365      	add	r3, pc, #404	; (adr r3, 8004b80 <_dtoa_r+0x2b8>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f7fb fe0a 	bl	8000608 <__aeabi_dmul>
 80049f4:	a364      	add	r3, pc, #400	; (adr r3, 8004b88 <_dtoa_r+0x2c0>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	f7fb fc4f 	bl	800029c <__adddf3>
 80049fe:	4606      	mov	r6, r0
 8004a00:	4628      	mov	r0, r5
 8004a02:	460f      	mov	r7, r1
 8004a04:	f7fb fd96 	bl	8000534 <__aeabi_i2d>
 8004a08:	a361      	add	r3, pc, #388	; (adr r3, 8004b90 <_dtoa_r+0x2c8>)
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f7fb fdfb 	bl	8000608 <__aeabi_dmul>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4630      	mov	r0, r6
 8004a18:	4639      	mov	r1, r7
 8004a1a:	f7fb fc3f 	bl	800029c <__adddf3>
 8004a1e:	4606      	mov	r6, r0
 8004a20:	460f      	mov	r7, r1
 8004a22:	f7fc f8a1 	bl	8000b68 <__aeabi_d2iz>
 8004a26:	2200      	movs	r2, #0
 8004a28:	9000      	str	r0, [sp, #0]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	4639      	mov	r1, r7
 8004a30:	f7fc f85c 	bl	8000aec <__aeabi_dcmplt>
 8004a34:	b150      	cbz	r0, 8004a4c <_dtoa_r+0x184>
 8004a36:	9800      	ldr	r0, [sp, #0]
 8004a38:	f7fb fd7c 	bl	8000534 <__aeabi_i2d>
 8004a3c:	4632      	mov	r2, r6
 8004a3e:	463b      	mov	r3, r7
 8004a40:	f7fc f84a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a44:	b910      	cbnz	r0, 8004a4c <_dtoa_r+0x184>
 8004a46:	9b00      	ldr	r3, [sp, #0]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	9b00      	ldr	r3, [sp, #0]
 8004a4e:	2b16      	cmp	r3, #22
 8004a50:	d85a      	bhi.n	8004b08 <_dtoa_r+0x240>
 8004a52:	9a00      	ldr	r2, [sp, #0]
 8004a54:	4b57      	ldr	r3, [pc, #348]	; (8004bb4 <_dtoa_r+0x2ec>)
 8004a56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5e:	ec51 0b19 	vmov	r0, r1, d9
 8004a62:	f7fc f843 	bl	8000aec <__aeabi_dcmplt>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d050      	beq.n	8004b0c <_dtoa_r+0x244>
 8004a6a:	9b00      	ldr	r3, [sp, #0]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	2300      	movs	r3, #0
 8004a72:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004a76:	1b5d      	subs	r5, r3, r5
 8004a78:	1e6b      	subs	r3, r5, #1
 8004a7a:	9305      	str	r3, [sp, #20]
 8004a7c:	bf45      	ittet	mi
 8004a7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004a82:	9304      	strmi	r3, [sp, #16]
 8004a84:	2300      	movpl	r3, #0
 8004a86:	2300      	movmi	r3, #0
 8004a88:	bf4c      	ite	mi
 8004a8a:	9305      	strmi	r3, [sp, #20]
 8004a8c:	9304      	strpl	r3, [sp, #16]
 8004a8e:	9b00      	ldr	r3, [sp, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	db3d      	blt.n	8004b10 <_dtoa_r+0x248>
 8004a94:	9b05      	ldr	r3, [sp, #20]
 8004a96:	9a00      	ldr	r2, [sp, #0]
 8004a98:	920a      	str	r2, [sp, #40]	; 0x28
 8004a9a:	4413      	add	r3, r2
 8004a9c:	9305      	str	r3, [sp, #20]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9307      	str	r3, [sp, #28]
 8004aa2:	9b06      	ldr	r3, [sp, #24]
 8004aa4:	2b09      	cmp	r3, #9
 8004aa6:	f200 8089 	bhi.w	8004bbc <_dtoa_r+0x2f4>
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	bfc4      	itt	gt
 8004aae:	3b04      	subgt	r3, #4
 8004ab0:	9306      	strgt	r3, [sp, #24]
 8004ab2:	9b06      	ldr	r3, [sp, #24]
 8004ab4:	f1a3 0302 	sub.w	r3, r3, #2
 8004ab8:	bfcc      	ite	gt
 8004aba:	2500      	movgt	r5, #0
 8004abc:	2501      	movle	r5, #1
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	f200 8087 	bhi.w	8004bd2 <_dtoa_r+0x30a>
 8004ac4:	e8df f003 	tbb	[pc, r3]
 8004ac8:	59383a2d 	.word	0x59383a2d
 8004acc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004ad0:	441d      	add	r5, r3
 8004ad2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	bfc1      	itttt	gt
 8004ada:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ade:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004ae2:	fa0b f303 	lslgt.w	r3, fp, r3
 8004ae6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004aea:	bfda      	itte	le
 8004aec:	f1c3 0320 	rsble	r3, r3, #32
 8004af0:	fa06 f003 	lslle.w	r0, r6, r3
 8004af4:	4318      	orrgt	r0, r3
 8004af6:	f7fb fd0d 	bl	8000514 <__aeabi_ui2d>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4606      	mov	r6, r0
 8004afe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004b02:	3d01      	subs	r5, #1
 8004b04:	930e      	str	r3, [sp, #56]	; 0x38
 8004b06:	e76a      	b.n	80049de <_dtoa_r+0x116>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e7b2      	b.n	8004a72 <_dtoa_r+0x1aa>
 8004b0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004b0e:	e7b1      	b.n	8004a74 <_dtoa_r+0x1ac>
 8004b10:	9b04      	ldr	r3, [sp, #16]
 8004b12:	9a00      	ldr	r2, [sp, #0]
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	9304      	str	r3, [sp, #16]
 8004b18:	4253      	negs	r3, r2
 8004b1a:	9307      	str	r3, [sp, #28]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8004b20:	e7bf      	b.n	8004aa2 <_dtoa_r+0x1da>
 8004b22:	2300      	movs	r3, #0
 8004b24:	9308      	str	r3, [sp, #32]
 8004b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	dc55      	bgt.n	8004bd8 <_dtoa_r+0x310>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004b32:	461a      	mov	r2, r3
 8004b34:	9209      	str	r2, [sp, #36]	; 0x24
 8004b36:	e00c      	b.n	8004b52 <_dtoa_r+0x28a>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e7f3      	b.n	8004b24 <_dtoa_r+0x25c>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b40:	9308      	str	r3, [sp, #32]
 8004b42:	9b00      	ldr	r3, [sp, #0]
 8004b44:	4413      	add	r3, r2
 8004b46:	9302      	str	r3, [sp, #8]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	9303      	str	r3, [sp, #12]
 8004b4e:	bfb8      	it	lt
 8004b50:	2301      	movlt	r3, #1
 8004b52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004b54:	2200      	movs	r2, #0
 8004b56:	6042      	str	r2, [r0, #4]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	f102 0614 	add.w	r6, r2, #20
 8004b5e:	429e      	cmp	r6, r3
 8004b60:	6841      	ldr	r1, [r0, #4]
 8004b62:	d93d      	bls.n	8004be0 <_dtoa_r+0x318>
 8004b64:	4620      	mov	r0, r4
 8004b66:	f000 fda3 	bl	80056b0 <_Balloc>
 8004b6a:	9001      	str	r0, [sp, #4]
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d13b      	bne.n	8004be8 <_dtoa_r+0x320>
 8004b70:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <_dtoa_r+0x2f0>)
 8004b72:	4602      	mov	r2, r0
 8004b74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004b78:	e6c0      	b.n	80048fc <_dtoa_r+0x34>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e7df      	b.n	8004b3e <_dtoa_r+0x276>
 8004b7e:	bf00      	nop
 8004b80:	636f4361 	.word	0x636f4361
 8004b84:	3fd287a7 	.word	0x3fd287a7
 8004b88:	8b60c8b3 	.word	0x8b60c8b3
 8004b8c:	3fc68a28 	.word	0x3fc68a28
 8004b90:	509f79fb 	.word	0x509f79fb
 8004b94:	3fd34413 	.word	0x3fd34413
 8004b98:	08006cf1 	.word	0x08006cf1
 8004b9c:	08006d08 	.word	0x08006d08
 8004ba0:	7ff00000 	.word	0x7ff00000
 8004ba4:	08006ced 	.word	0x08006ced
 8004ba8:	08006ce4 	.word	0x08006ce4
 8004bac:	08006cc1 	.word	0x08006cc1
 8004bb0:	3ff80000 	.word	0x3ff80000
 8004bb4:	08006e58 	.word	0x08006e58
 8004bb8:	08006d63 	.word	0x08006d63
 8004bbc:	2501      	movs	r5, #1
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9306      	str	r3, [sp, #24]
 8004bc2:	9508      	str	r5, [sp, #32]
 8004bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2312      	movs	r3, #18
 8004bd0:	e7b0      	b.n	8004b34 <_dtoa_r+0x26c>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	9308      	str	r3, [sp, #32]
 8004bd6:	e7f5      	b.n	8004bc4 <_dtoa_r+0x2fc>
 8004bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004bde:	e7b8      	b.n	8004b52 <_dtoa_r+0x28a>
 8004be0:	3101      	adds	r1, #1
 8004be2:	6041      	str	r1, [r0, #4]
 8004be4:	0052      	lsls	r2, r2, #1
 8004be6:	e7b8      	b.n	8004b5a <_dtoa_r+0x292>
 8004be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bea:	9a01      	ldr	r2, [sp, #4]
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	9b03      	ldr	r3, [sp, #12]
 8004bf0:	2b0e      	cmp	r3, #14
 8004bf2:	f200 809d 	bhi.w	8004d30 <_dtoa_r+0x468>
 8004bf6:	2d00      	cmp	r5, #0
 8004bf8:	f000 809a 	beq.w	8004d30 <_dtoa_r+0x468>
 8004bfc:	9b00      	ldr	r3, [sp, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	dd32      	ble.n	8004c68 <_dtoa_r+0x3a0>
 8004c02:	4ab7      	ldr	r2, [pc, #732]	; (8004ee0 <_dtoa_r+0x618>)
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c10:	9b00      	ldr	r3, [sp, #0]
 8004c12:	05d8      	lsls	r0, r3, #23
 8004c14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004c18:	d516      	bpl.n	8004c48 <_dtoa_r+0x380>
 8004c1a:	4bb2      	ldr	r3, [pc, #712]	; (8004ee4 <_dtoa_r+0x61c>)
 8004c1c:	ec51 0b19 	vmov	r0, r1, d9
 8004c20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c24:	f7fb fe1a 	bl	800085c <__aeabi_ddiv>
 8004c28:	f007 070f 	and.w	r7, r7, #15
 8004c2c:	4682      	mov	sl, r0
 8004c2e:	468b      	mov	fp, r1
 8004c30:	2503      	movs	r5, #3
 8004c32:	4eac      	ldr	r6, [pc, #688]	; (8004ee4 <_dtoa_r+0x61c>)
 8004c34:	b957      	cbnz	r7, 8004c4c <_dtoa_r+0x384>
 8004c36:	4642      	mov	r2, r8
 8004c38:	464b      	mov	r3, r9
 8004c3a:	4650      	mov	r0, sl
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	f7fb fe0d 	bl	800085c <__aeabi_ddiv>
 8004c42:	4682      	mov	sl, r0
 8004c44:	468b      	mov	fp, r1
 8004c46:	e028      	b.n	8004c9a <_dtoa_r+0x3d2>
 8004c48:	2502      	movs	r5, #2
 8004c4a:	e7f2      	b.n	8004c32 <_dtoa_r+0x36a>
 8004c4c:	07f9      	lsls	r1, r7, #31
 8004c4e:	d508      	bpl.n	8004c62 <_dtoa_r+0x39a>
 8004c50:	4640      	mov	r0, r8
 8004c52:	4649      	mov	r1, r9
 8004c54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c58:	f7fb fcd6 	bl	8000608 <__aeabi_dmul>
 8004c5c:	3501      	adds	r5, #1
 8004c5e:	4680      	mov	r8, r0
 8004c60:	4689      	mov	r9, r1
 8004c62:	107f      	asrs	r7, r7, #1
 8004c64:	3608      	adds	r6, #8
 8004c66:	e7e5      	b.n	8004c34 <_dtoa_r+0x36c>
 8004c68:	f000 809b 	beq.w	8004da2 <_dtoa_r+0x4da>
 8004c6c:	9b00      	ldr	r3, [sp, #0]
 8004c6e:	4f9d      	ldr	r7, [pc, #628]	; (8004ee4 <_dtoa_r+0x61c>)
 8004c70:	425e      	negs	r6, r3
 8004c72:	4b9b      	ldr	r3, [pc, #620]	; (8004ee0 <_dtoa_r+0x618>)
 8004c74:	f006 020f 	and.w	r2, r6, #15
 8004c78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	ec51 0b19 	vmov	r0, r1, d9
 8004c84:	f7fb fcc0 	bl	8000608 <__aeabi_dmul>
 8004c88:	1136      	asrs	r6, r6, #4
 8004c8a:	4682      	mov	sl, r0
 8004c8c:	468b      	mov	fp, r1
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2502      	movs	r5, #2
 8004c92:	2e00      	cmp	r6, #0
 8004c94:	d17a      	bne.n	8004d8c <_dtoa_r+0x4c4>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1d3      	bne.n	8004c42 <_dtoa_r+0x37a>
 8004c9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 8082 	beq.w	8004da6 <_dtoa_r+0x4de>
 8004ca2:	4b91      	ldr	r3, [pc, #580]	; (8004ee8 <_dtoa_r+0x620>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	4650      	mov	r0, sl
 8004ca8:	4659      	mov	r1, fp
 8004caa:	f7fb ff1f 	bl	8000aec <__aeabi_dcmplt>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d079      	beq.n	8004da6 <_dtoa_r+0x4de>
 8004cb2:	9b03      	ldr	r3, [sp, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d076      	beq.n	8004da6 <_dtoa_r+0x4de>
 8004cb8:	9b02      	ldr	r3, [sp, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	dd36      	ble.n	8004d2c <_dtoa_r+0x464>
 8004cbe:	9b00      	ldr	r3, [sp, #0]
 8004cc0:	4650      	mov	r0, sl
 8004cc2:	4659      	mov	r1, fp
 8004cc4:	1e5f      	subs	r7, r3, #1
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	4b88      	ldr	r3, [pc, #544]	; (8004eec <_dtoa_r+0x624>)
 8004cca:	f7fb fc9d 	bl	8000608 <__aeabi_dmul>
 8004cce:	9e02      	ldr	r6, [sp, #8]
 8004cd0:	4682      	mov	sl, r0
 8004cd2:	468b      	mov	fp, r1
 8004cd4:	3501      	adds	r5, #1
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f7fb fc2c 	bl	8000534 <__aeabi_i2d>
 8004cdc:	4652      	mov	r2, sl
 8004cde:	465b      	mov	r3, fp
 8004ce0:	f7fb fc92 	bl	8000608 <__aeabi_dmul>
 8004ce4:	4b82      	ldr	r3, [pc, #520]	; (8004ef0 <_dtoa_r+0x628>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f7fb fad8 	bl	800029c <__adddf3>
 8004cec:	46d0      	mov	r8, sl
 8004cee:	46d9      	mov	r9, fp
 8004cf0:	4682      	mov	sl, r0
 8004cf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004cf6:	2e00      	cmp	r6, #0
 8004cf8:	d158      	bne.n	8004dac <_dtoa_r+0x4e4>
 8004cfa:	4b7e      	ldr	r3, [pc, #504]	; (8004ef4 <_dtoa_r+0x62c>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	4640      	mov	r0, r8
 8004d00:	4649      	mov	r1, r9
 8004d02:	f7fb fac9 	bl	8000298 <__aeabi_dsub>
 8004d06:	4652      	mov	r2, sl
 8004d08:	465b      	mov	r3, fp
 8004d0a:	4680      	mov	r8, r0
 8004d0c:	4689      	mov	r9, r1
 8004d0e:	f7fb ff0b 	bl	8000b28 <__aeabi_dcmpgt>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	f040 8295 	bne.w	8005242 <_dtoa_r+0x97a>
 8004d18:	4652      	mov	r2, sl
 8004d1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004d1e:	4640      	mov	r0, r8
 8004d20:	4649      	mov	r1, r9
 8004d22:	f7fb fee3 	bl	8000aec <__aeabi_dcmplt>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	f040 8289 	bne.w	800523e <_dtoa_r+0x976>
 8004d2c:	ec5b ab19 	vmov	sl, fp, d9
 8004d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f2c0 8148 	blt.w	8004fc8 <_dtoa_r+0x700>
 8004d38:	9a00      	ldr	r2, [sp, #0]
 8004d3a:	2a0e      	cmp	r2, #14
 8004d3c:	f300 8144 	bgt.w	8004fc8 <_dtoa_r+0x700>
 8004d40:	4b67      	ldr	r3, [pc, #412]	; (8004ee0 <_dtoa_r+0x618>)
 8004d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f280 80d5 	bge.w	8004efc <_dtoa_r+0x634>
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f300 80d1 	bgt.w	8004efc <_dtoa_r+0x634>
 8004d5a:	f040 826f 	bne.w	800523c <_dtoa_r+0x974>
 8004d5e:	4b65      	ldr	r3, [pc, #404]	; (8004ef4 <_dtoa_r+0x62c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	4640      	mov	r0, r8
 8004d64:	4649      	mov	r1, r9
 8004d66:	f7fb fc4f 	bl	8000608 <__aeabi_dmul>
 8004d6a:	4652      	mov	r2, sl
 8004d6c:	465b      	mov	r3, fp
 8004d6e:	f7fb fed1 	bl	8000b14 <__aeabi_dcmpge>
 8004d72:	9e03      	ldr	r6, [sp, #12]
 8004d74:	4637      	mov	r7, r6
 8004d76:	2800      	cmp	r0, #0
 8004d78:	f040 8245 	bne.w	8005206 <_dtoa_r+0x93e>
 8004d7c:	9d01      	ldr	r5, [sp, #4]
 8004d7e:	2331      	movs	r3, #49	; 0x31
 8004d80:	f805 3b01 	strb.w	r3, [r5], #1
 8004d84:	9b00      	ldr	r3, [sp, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	e240      	b.n	800520e <_dtoa_r+0x946>
 8004d8c:	07f2      	lsls	r2, r6, #31
 8004d8e:	d505      	bpl.n	8004d9c <_dtoa_r+0x4d4>
 8004d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d94:	f7fb fc38 	bl	8000608 <__aeabi_dmul>
 8004d98:	3501      	adds	r5, #1
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	1076      	asrs	r6, r6, #1
 8004d9e:	3708      	adds	r7, #8
 8004da0:	e777      	b.n	8004c92 <_dtoa_r+0x3ca>
 8004da2:	2502      	movs	r5, #2
 8004da4:	e779      	b.n	8004c9a <_dtoa_r+0x3d2>
 8004da6:	9f00      	ldr	r7, [sp, #0]
 8004da8:	9e03      	ldr	r6, [sp, #12]
 8004daa:	e794      	b.n	8004cd6 <_dtoa_r+0x40e>
 8004dac:	9901      	ldr	r1, [sp, #4]
 8004dae:	4b4c      	ldr	r3, [pc, #304]	; (8004ee0 <_dtoa_r+0x618>)
 8004db0:	4431      	add	r1, r6
 8004db2:	910d      	str	r1, [sp, #52]	; 0x34
 8004db4:	9908      	ldr	r1, [sp, #32]
 8004db6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004dba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004dbe:	2900      	cmp	r1, #0
 8004dc0:	d043      	beq.n	8004e4a <_dtoa_r+0x582>
 8004dc2:	494d      	ldr	r1, [pc, #308]	; (8004ef8 <_dtoa_r+0x630>)
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f7fb fd49 	bl	800085c <__aeabi_ddiv>
 8004dca:	4652      	mov	r2, sl
 8004dcc:	465b      	mov	r3, fp
 8004dce:	f7fb fa63 	bl	8000298 <__aeabi_dsub>
 8004dd2:	9d01      	ldr	r5, [sp, #4]
 8004dd4:	4682      	mov	sl, r0
 8004dd6:	468b      	mov	fp, r1
 8004dd8:	4649      	mov	r1, r9
 8004dda:	4640      	mov	r0, r8
 8004ddc:	f7fb fec4 	bl	8000b68 <__aeabi_d2iz>
 8004de0:	4606      	mov	r6, r0
 8004de2:	f7fb fba7 	bl	8000534 <__aeabi_i2d>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4640      	mov	r0, r8
 8004dec:	4649      	mov	r1, r9
 8004dee:	f7fb fa53 	bl	8000298 <__aeabi_dsub>
 8004df2:	3630      	adds	r6, #48	; 0x30
 8004df4:	f805 6b01 	strb.w	r6, [r5], #1
 8004df8:	4652      	mov	r2, sl
 8004dfa:	465b      	mov	r3, fp
 8004dfc:	4680      	mov	r8, r0
 8004dfe:	4689      	mov	r9, r1
 8004e00:	f7fb fe74 	bl	8000aec <__aeabi_dcmplt>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d163      	bne.n	8004ed0 <_dtoa_r+0x608>
 8004e08:	4642      	mov	r2, r8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	4936      	ldr	r1, [pc, #216]	; (8004ee8 <_dtoa_r+0x620>)
 8004e0e:	2000      	movs	r0, #0
 8004e10:	f7fb fa42 	bl	8000298 <__aeabi_dsub>
 8004e14:	4652      	mov	r2, sl
 8004e16:	465b      	mov	r3, fp
 8004e18:	f7fb fe68 	bl	8000aec <__aeabi_dcmplt>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	f040 80b5 	bne.w	8004f8c <_dtoa_r+0x6c4>
 8004e22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e24:	429d      	cmp	r5, r3
 8004e26:	d081      	beq.n	8004d2c <_dtoa_r+0x464>
 8004e28:	4b30      	ldr	r3, [pc, #192]	; (8004eec <_dtoa_r+0x624>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	4650      	mov	r0, sl
 8004e2e:	4659      	mov	r1, fp
 8004e30:	f7fb fbea 	bl	8000608 <__aeabi_dmul>
 8004e34:	4b2d      	ldr	r3, [pc, #180]	; (8004eec <_dtoa_r+0x624>)
 8004e36:	4682      	mov	sl, r0
 8004e38:	468b      	mov	fp, r1
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	4649      	mov	r1, r9
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f7fb fbe2 	bl	8000608 <__aeabi_dmul>
 8004e44:	4680      	mov	r8, r0
 8004e46:	4689      	mov	r9, r1
 8004e48:	e7c6      	b.n	8004dd8 <_dtoa_r+0x510>
 8004e4a:	4650      	mov	r0, sl
 8004e4c:	4659      	mov	r1, fp
 8004e4e:	f7fb fbdb 	bl	8000608 <__aeabi_dmul>
 8004e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e54:	9d01      	ldr	r5, [sp, #4]
 8004e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e58:	4682      	mov	sl, r0
 8004e5a:	468b      	mov	fp, r1
 8004e5c:	4649      	mov	r1, r9
 8004e5e:	4640      	mov	r0, r8
 8004e60:	f7fb fe82 	bl	8000b68 <__aeabi_d2iz>
 8004e64:	4606      	mov	r6, r0
 8004e66:	f7fb fb65 	bl	8000534 <__aeabi_i2d>
 8004e6a:	3630      	adds	r6, #48	; 0x30
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4640      	mov	r0, r8
 8004e72:	4649      	mov	r1, r9
 8004e74:	f7fb fa10 	bl	8000298 <__aeabi_dsub>
 8004e78:	f805 6b01 	strb.w	r6, [r5], #1
 8004e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e7e:	429d      	cmp	r5, r3
 8004e80:	4680      	mov	r8, r0
 8004e82:	4689      	mov	r9, r1
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	d124      	bne.n	8004ed4 <_dtoa_r+0x60c>
 8004e8a:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <_dtoa_r+0x630>)
 8004e8c:	4650      	mov	r0, sl
 8004e8e:	4659      	mov	r1, fp
 8004e90:	f7fb fa04 	bl	800029c <__adddf3>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4640      	mov	r0, r8
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	f7fb fe44 	bl	8000b28 <__aeabi_dcmpgt>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	d173      	bne.n	8004f8c <_dtoa_r+0x6c4>
 8004ea4:	4652      	mov	r2, sl
 8004ea6:	465b      	mov	r3, fp
 8004ea8:	4913      	ldr	r1, [pc, #76]	; (8004ef8 <_dtoa_r+0x630>)
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f7fb f9f4 	bl	8000298 <__aeabi_dsub>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	f7fb fe18 	bl	8000aec <__aeabi_dcmplt>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	f43f af35 	beq.w	8004d2c <_dtoa_r+0x464>
 8004ec2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004ec4:	1e6b      	subs	r3, r5, #1
 8004ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ec8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004ecc:	2b30      	cmp	r3, #48	; 0x30
 8004ece:	d0f8      	beq.n	8004ec2 <_dtoa_r+0x5fa>
 8004ed0:	9700      	str	r7, [sp, #0]
 8004ed2:	e049      	b.n	8004f68 <_dtoa_r+0x6a0>
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <_dtoa_r+0x624>)
 8004ed6:	f7fb fb97 	bl	8000608 <__aeabi_dmul>
 8004eda:	4680      	mov	r8, r0
 8004edc:	4689      	mov	r9, r1
 8004ede:	e7bd      	b.n	8004e5c <_dtoa_r+0x594>
 8004ee0:	08006e58 	.word	0x08006e58
 8004ee4:	08006e30 	.word	0x08006e30
 8004ee8:	3ff00000 	.word	0x3ff00000
 8004eec:	40240000 	.word	0x40240000
 8004ef0:	401c0000 	.word	0x401c0000
 8004ef4:	40140000 	.word	0x40140000
 8004ef8:	3fe00000 	.word	0x3fe00000
 8004efc:	9d01      	ldr	r5, [sp, #4]
 8004efe:	4656      	mov	r6, sl
 8004f00:	465f      	mov	r7, fp
 8004f02:	4642      	mov	r2, r8
 8004f04:	464b      	mov	r3, r9
 8004f06:	4630      	mov	r0, r6
 8004f08:	4639      	mov	r1, r7
 8004f0a:	f7fb fca7 	bl	800085c <__aeabi_ddiv>
 8004f0e:	f7fb fe2b 	bl	8000b68 <__aeabi_d2iz>
 8004f12:	4682      	mov	sl, r0
 8004f14:	f7fb fb0e 	bl	8000534 <__aeabi_i2d>
 8004f18:	4642      	mov	r2, r8
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	f7fb fb74 	bl	8000608 <__aeabi_dmul>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4630      	mov	r0, r6
 8004f26:	4639      	mov	r1, r7
 8004f28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004f2c:	f7fb f9b4 	bl	8000298 <__aeabi_dsub>
 8004f30:	f805 6b01 	strb.w	r6, [r5], #1
 8004f34:	9e01      	ldr	r6, [sp, #4]
 8004f36:	9f03      	ldr	r7, [sp, #12]
 8004f38:	1bae      	subs	r6, r5, r6
 8004f3a:	42b7      	cmp	r7, r6
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	d135      	bne.n	8004fae <_dtoa_r+0x6e6>
 8004f42:	f7fb f9ab 	bl	800029c <__adddf3>
 8004f46:	4642      	mov	r2, r8
 8004f48:	464b      	mov	r3, r9
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460f      	mov	r7, r1
 8004f4e:	f7fb fdeb 	bl	8000b28 <__aeabi_dcmpgt>
 8004f52:	b9d0      	cbnz	r0, 8004f8a <_dtoa_r+0x6c2>
 8004f54:	4642      	mov	r2, r8
 8004f56:	464b      	mov	r3, r9
 8004f58:	4630      	mov	r0, r6
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f7fb fdbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f60:	b110      	cbz	r0, 8004f68 <_dtoa_r+0x6a0>
 8004f62:	f01a 0f01 	tst.w	sl, #1
 8004f66:	d110      	bne.n	8004f8a <_dtoa_r+0x6c2>
 8004f68:	4620      	mov	r0, r4
 8004f6a:	ee18 1a10 	vmov	r1, s16
 8004f6e:	f000 fbdf 	bl	8005730 <_Bfree>
 8004f72:	2300      	movs	r3, #0
 8004f74:	9800      	ldr	r0, [sp, #0]
 8004f76:	702b      	strb	r3, [r5, #0]
 8004f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	6018      	str	r0, [r3, #0]
 8004f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f43f acf1 	beq.w	8004968 <_dtoa_r+0xa0>
 8004f86:	601d      	str	r5, [r3, #0]
 8004f88:	e4ee      	b.n	8004968 <_dtoa_r+0xa0>
 8004f8a:	9f00      	ldr	r7, [sp, #0]
 8004f8c:	462b      	mov	r3, r5
 8004f8e:	461d      	mov	r5, r3
 8004f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f94:	2a39      	cmp	r2, #57	; 0x39
 8004f96:	d106      	bne.n	8004fa6 <_dtoa_r+0x6de>
 8004f98:	9a01      	ldr	r2, [sp, #4]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d1f7      	bne.n	8004f8e <_dtoa_r+0x6c6>
 8004f9e:	9901      	ldr	r1, [sp, #4]
 8004fa0:	2230      	movs	r2, #48	; 0x30
 8004fa2:	3701      	adds	r7, #1
 8004fa4:	700a      	strb	r2, [r1, #0]
 8004fa6:	781a      	ldrb	r2, [r3, #0]
 8004fa8:	3201      	adds	r2, #1
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	e790      	b.n	8004ed0 <_dtoa_r+0x608>
 8004fae:	4ba6      	ldr	r3, [pc, #664]	; (8005248 <_dtoa_r+0x980>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f7fb fb29 	bl	8000608 <__aeabi_dmul>
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	2300      	movs	r3, #0
 8004fba:	4606      	mov	r6, r0
 8004fbc:	460f      	mov	r7, r1
 8004fbe:	f7fb fd8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d09d      	beq.n	8004f02 <_dtoa_r+0x63a>
 8004fc6:	e7cf      	b.n	8004f68 <_dtoa_r+0x6a0>
 8004fc8:	9a08      	ldr	r2, [sp, #32]
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	f000 80d7 	beq.w	800517e <_dtoa_r+0x8b6>
 8004fd0:	9a06      	ldr	r2, [sp, #24]
 8004fd2:	2a01      	cmp	r2, #1
 8004fd4:	f300 80ba 	bgt.w	800514c <_dtoa_r+0x884>
 8004fd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fda:	2a00      	cmp	r2, #0
 8004fdc:	f000 80b2 	beq.w	8005144 <_dtoa_r+0x87c>
 8004fe0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004fe4:	9e07      	ldr	r6, [sp, #28]
 8004fe6:	9d04      	ldr	r5, [sp, #16]
 8004fe8:	9a04      	ldr	r2, [sp, #16]
 8004fea:	441a      	add	r2, r3
 8004fec:	9204      	str	r2, [sp, #16]
 8004fee:	9a05      	ldr	r2, [sp, #20]
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	441a      	add	r2, r3
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	9205      	str	r2, [sp, #20]
 8004ff8:	f000 fc52 	bl	80058a0 <__i2b>
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	2d00      	cmp	r5, #0
 8005000:	dd0c      	ble.n	800501c <_dtoa_r+0x754>
 8005002:	9b05      	ldr	r3, [sp, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	dd09      	ble.n	800501c <_dtoa_r+0x754>
 8005008:	42ab      	cmp	r3, r5
 800500a:	9a04      	ldr	r2, [sp, #16]
 800500c:	bfa8      	it	ge
 800500e:	462b      	movge	r3, r5
 8005010:	1ad2      	subs	r2, r2, r3
 8005012:	9204      	str	r2, [sp, #16]
 8005014:	9a05      	ldr	r2, [sp, #20]
 8005016:	1aed      	subs	r5, r5, r3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	9305      	str	r3, [sp, #20]
 800501c:	9b07      	ldr	r3, [sp, #28]
 800501e:	b31b      	cbz	r3, 8005068 <_dtoa_r+0x7a0>
 8005020:	9b08      	ldr	r3, [sp, #32]
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80af 	beq.w	8005186 <_dtoa_r+0x8be>
 8005028:	2e00      	cmp	r6, #0
 800502a:	dd13      	ble.n	8005054 <_dtoa_r+0x78c>
 800502c:	4639      	mov	r1, r7
 800502e:	4632      	mov	r2, r6
 8005030:	4620      	mov	r0, r4
 8005032:	f000 fcf5 	bl	8005a20 <__pow5mult>
 8005036:	ee18 2a10 	vmov	r2, s16
 800503a:	4601      	mov	r1, r0
 800503c:	4607      	mov	r7, r0
 800503e:	4620      	mov	r0, r4
 8005040:	f000 fc44 	bl	80058cc <__multiply>
 8005044:	ee18 1a10 	vmov	r1, s16
 8005048:	4680      	mov	r8, r0
 800504a:	4620      	mov	r0, r4
 800504c:	f000 fb70 	bl	8005730 <_Bfree>
 8005050:	ee08 8a10 	vmov	s16, r8
 8005054:	9b07      	ldr	r3, [sp, #28]
 8005056:	1b9a      	subs	r2, r3, r6
 8005058:	d006      	beq.n	8005068 <_dtoa_r+0x7a0>
 800505a:	ee18 1a10 	vmov	r1, s16
 800505e:	4620      	mov	r0, r4
 8005060:	f000 fcde 	bl	8005a20 <__pow5mult>
 8005064:	ee08 0a10 	vmov	s16, r0
 8005068:	2101      	movs	r1, #1
 800506a:	4620      	mov	r0, r4
 800506c:	f000 fc18 	bl	80058a0 <__i2b>
 8005070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005072:	2b00      	cmp	r3, #0
 8005074:	4606      	mov	r6, r0
 8005076:	f340 8088 	ble.w	800518a <_dtoa_r+0x8c2>
 800507a:	461a      	mov	r2, r3
 800507c:	4601      	mov	r1, r0
 800507e:	4620      	mov	r0, r4
 8005080:	f000 fcce 	bl	8005a20 <__pow5mult>
 8005084:	9b06      	ldr	r3, [sp, #24]
 8005086:	2b01      	cmp	r3, #1
 8005088:	4606      	mov	r6, r0
 800508a:	f340 8081 	ble.w	8005190 <_dtoa_r+0x8c8>
 800508e:	f04f 0800 	mov.w	r8, #0
 8005092:	6933      	ldr	r3, [r6, #16]
 8005094:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005098:	6918      	ldr	r0, [r3, #16]
 800509a:	f000 fbb1 	bl	8005800 <__hi0bits>
 800509e:	f1c0 0020 	rsb	r0, r0, #32
 80050a2:	9b05      	ldr	r3, [sp, #20]
 80050a4:	4418      	add	r0, r3
 80050a6:	f010 001f 	ands.w	r0, r0, #31
 80050aa:	f000 8092 	beq.w	80051d2 <_dtoa_r+0x90a>
 80050ae:	f1c0 0320 	rsb	r3, r0, #32
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	f340 808a 	ble.w	80051cc <_dtoa_r+0x904>
 80050b8:	f1c0 001c 	rsb	r0, r0, #28
 80050bc:	9b04      	ldr	r3, [sp, #16]
 80050be:	4403      	add	r3, r0
 80050c0:	9304      	str	r3, [sp, #16]
 80050c2:	9b05      	ldr	r3, [sp, #20]
 80050c4:	4403      	add	r3, r0
 80050c6:	4405      	add	r5, r0
 80050c8:	9305      	str	r3, [sp, #20]
 80050ca:	9b04      	ldr	r3, [sp, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	dd07      	ble.n	80050e0 <_dtoa_r+0x818>
 80050d0:	ee18 1a10 	vmov	r1, s16
 80050d4:	461a      	mov	r2, r3
 80050d6:	4620      	mov	r0, r4
 80050d8:	f000 fcfc 	bl	8005ad4 <__lshift>
 80050dc:	ee08 0a10 	vmov	s16, r0
 80050e0:	9b05      	ldr	r3, [sp, #20]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	dd05      	ble.n	80050f2 <_dtoa_r+0x82a>
 80050e6:	4631      	mov	r1, r6
 80050e8:	461a      	mov	r2, r3
 80050ea:	4620      	mov	r0, r4
 80050ec:	f000 fcf2 	bl	8005ad4 <__lshift>
 80050f0:	4606      	mov	r6, r0
 80050f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d06e      	beq.n	80051d6 <_dtoa_r+0x90e>
 80050f8:	ee18 0a10 	vmov	r0, s16
 80050fc:	4631      	mov	r1, r6
 80050fe:	f000 fd59 	bl	8005bb4 <__mcmp>
 8005102:	2800      	cmp	r0, #0
 8005104:	da67      	bge.n	80051d6 <_dtoa_r+0x90e>
 8005106:	9b00      	ldr	r3, [sp, #0]
 8005108:	3b01      	subs	r3, #1
 800510a:	ee18 1a10 	vmov	r1, s16
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	220a      	movs	r2, #10
 8005112:	2300      	movs	r3, #0
 8005114:	4620      	mov	r0, r4
 8005116:	f000 fb2d 	bl	8005774 <__multadd>
 800511a:	9b08      	ldr	r3, [sp, #32]
 800511c:	ee08 0a10 	vmov	s16, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 81b1 	beq.w	8005488 <_dtoa_r+0xbc0>
 8005126:	2300      	movs	r3, #0
 8005128:	4639      	mov	r1, r7
 800512a:	220a      	movs	r2, #10
 800512c:	4620      	mov	r0, r4
 800512e:	f000 fb21 	bl	8005774 <__multadd>
 8005132:	9b02      	ldr	r3, [sp, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	4607      	mov	r7, r0
 8005138:	f300 808e 	bgt.w	8005258 <_dtoa_r+0x990>
 800513c:	9b06      	ldr	r3, [sp, #24]
 800513e:	2b02      	cmp	r3, #2
 8005140:	dc51      	bgt.n	80051e6 <_dtoa_r+0x91e>
 8005142:	e089      	b.n	8005258 <_dtoa_r+0x990>
 8005144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005146:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800514a:	e74b      	b.n	8004fe4 <_dtoa_r+0x71c>
 800514c:	9b03      	ldr	r3, [sp, #12]
 800514e:	1e5e      	subs	r6, r3, #1
 8005150:	9b07      	ldr	r3, [sp, #28]
 8005152:	42b3      	cmp	r3, r6
 8005154:	bfbf      	itttt	lt
 8005156:	9b07      	ldrlt	r3, [sp, #28]
 8005158:	9607      	strlt	r6, [sp, #28]
 800515a:	1af2      	sublt	r2, r6, r3
 800515c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800515e:	bfb6      	itet	lt
 8005160:	189b      	addlt	r3, r3, r2
 8005162:	1b9e      	subge	r6, r3, r6
 8005164:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005166:	9b03      	ldr	r3, [sp, #12]
 8005168:	bfb8      	it	lt
 800516a:	2600      	movlt	r6, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	bfb7      	itett	lt
 8005170:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005174:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005178:	1a9d      	sublt	r5, r3, r2
 800517a:	2300      	movlt	r3, #0
 800517c:	e734      	b.n	8004fe8 <_dtoa_r+0x720>
 800517e:	9e07      	ldr	r6, [sp, #28]
 8005180:	9d04      	ldr	r5, [sp, #16]
 8005182:	9f08      	ldr	r7, [sp, #32]
 8005184:	e73b      	b.n	8004ffe <_dtoa_r+0x736>
 8005186:	9a07      	ldr	r2, [sp, #28]
 8005188:	e767      	b.n	800505a <_dtoa_r+0x792>
 800518a:	9b06      	ldr	r3, [sp, #24]
 800518c:	2b01      	cmp	r3, #1
 800518e:	dc18      	bgt.n	80051c2 <_dtoa_r+0x8fa>
 8005190:	f1ba 0f00 	cmp.w	sl, #0
 8005194:	d115      	bne.n	80051c2 <_dtoa_r+0x8fa>
 8005196:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800519a:	b993      	cbnz	r3, 80051c2 <_dtoa_r+0x8fa>
 800519c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80051a0:	0d1b      	lsrs	r3, r3, #20
 80051a2:	051b      	lsls	r3, r3, #20
 80051a4:	b183      	cbz	r3, 80051c8 <_dtoa_r+0x900>
 80051a6:	9b04      	ldr	r3, [sp, #16]
 80051a8:	3301      	adds	r3, #1
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	9b05      	ldr	r3, [sp, #20]
 80051ae:	3301      	adds	r3, #1
 80051b0:	9305      	str	r3, [sp, #20]
 80051b2:	f04f 0801 	mov.w	r8, #1
 80051b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f47f af6a 	bne.w	8005092 <_dtoa_r+0x7ca>
 80051be:	2001      	movs	r0, #1
 80051c0:	e76f      	b.n	80050a2 <_dtoa_r+0x7da>
 80051c2:	f04f 0800 	mov.w	r8, #0
 80051c6:	e7f6      	b.n	80051b6 <_dtoa_r+0x8ee>
 80051c8:	4698      	mov	r8, r3
 80051ca:	e7f4      	b.n	80051b6 <_dtoa_r+0x8ee>
 80051cc:	f43f af7d 	beq.w	80050ca <_dtoa_r+0x802>
 80051d0:	4618      	mov	r0, r3
 80051d2:	301c      	adds	r0, #28
 80051d4:	e772      	b.n	80050bc <_dtoa_r+0x7f4>
 80051d6:	9b03      	ldr	r3, [sp, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	dc37      	bgt.n	800524c <_dtoa_r+0x984>
 80051dc:	9b06      	ldr	r3, [sp, #24]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	dd34      	ble.n	800524c <_dtoa_r+0x984>
 80051e2:	9b03      	ldr	r3, [sp, #12]
 80051e4:	9302      	str	r3, [sp, #8]
 80051e6:	9b02      	ldr	r3, [sp, #8]
 80051e8:	b96b      	cbnz	r3, 8005206 <_dtoa_r+0x93e>
 80051ea:	4631      	mov	r1, r6
 80051ec:	2205      	movs	r2, #5
 80051ee:	4620      	mov	r0, r4
 80051f0:	f000 fac0 	bl	8005774 <__multadd>
 80051f4:	4601      	mov	r1, r0
 80051f6:	4606      	mov	r6, r0
 80051f8:	ee18 0a10 	vmov	r0, s16
 80051fc:	f000 fcda 	bl	8005bb4 <__mcmp>
 8005200:	2800      	cmp	r0, #0
 8005202:	f73f adbb 	bgt.w	8004d7c <_dtoa_r+0x4b4>
 8005206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005208:	9d01      	ldr	r5, [sp, #4]
 800520a:	43db      	mvns	r3, r3
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	f04f 0800 	mov.w	r8, #0
 8005212:	4631      	mov	r1, r6
 8005214:	4620      	mov	r0, r4
 8005216:	f000 fa8b 	bl	8005730 <_Bfree>
 800521a:	2f00      	cmp	r7, #0
 800521c:	f43f aea4 	beq.w	8004f68 <_dtoa_r+0x6a0>
 8005220:	f1b8 0f00 	cmp.w	r8, #0
 8005224:	d005      	beq.n	8005232 <_dtoa_r+0x96a>
 8005226:	45b8      	cmp	r8, r7
 8005228:	d003      	beq.n	8005232 <_dtoa_r+0x96a>
 800522a:	4641      	mov	r1, r8
 800522c:	4620      	mov	r0, r4
 800522e:	f000 fa7f 	bl	8005730 <_Bfree>
 8005232:	4639      	mov	r1, r7
 8005234:	4620      	mov	r0, r4
 8005236:	f000 fa7b 	bl	8005730 <_Bfree>
 800523a:	e695      	b.n	8004f68 <_dtoa_r+0x6a0>
 800523c:	2600      	movs	r6, #0
 800523e:	4637      	mov	r7, r6
 8005240:	e7e1      	b.n	8005206 <_dtoa_r+0x93e>
 8005242:	9700      	str	r7, [sp, #0]
 8005244:	4637      	mov	r7, r6
 8005246:	e599      	b.n	8004d7c <_dtoa_r+0x4b4>
 8005248:	40240000 	.word	0x40240000
 800524c:	9b08      	ldr	r3, [sp, #32]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80ca 	beq.w	80053e8 <_dtoa_r+0xb20>
 8005254:	9b03      	ldr	r3, [sp, #12]
 8005256:	9302      	str	r3, [sp, #8]
 8005258:	2d00      	cmp	r5, #0
 800525a:	dd05      	ble.n	8005268 <_dtoa_r+0x9a0>
 800525c:	4639      	mov	r1, r7
 800525e:	462a      	mov	r2, r5
 8005260:	4620      	mov	r0, r4
 8005262:	f000 fc37 	bl	8005ad4 <__lshift>
 8005266:	4607      	mov	r7, r0
 8005268:	f1b8 0f00 	cmp.w	r8, #0
 800526c:	d05b      	beq.n	8005326 <_dtoa_r+0xa5e>
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4620      	mov	r0, r4
 8005272:	f000 fa1d 	bl	80056b0 <_Balloc>
 8005276:	4605      	mov	r5, r0
 8005278:	b928      	cbnz	r0, 8005286 <_dtoa_r+0x9be>
 800527a:	4b87      	ldr	r3, [pc, #540]	; (8005498 <_dtoa_r+0xbd0>)
 800527c:	4602      	mov	r2, r0
 800527e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005282:	f7ff bb3b 	b.w	80048fc <_dtoa_r+0x34>
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	3202      	adds	r2, #2
 800528a:	0092      	lsls	r2, r2, #2
 800528c:	f107 010c 	add.w	r1, r7, #12
 8005290:	300c      	adds	r0, #12
 8005292:	f7fe fdd5 	bl	8003e40 <memcpy>
 8005296:	2201      	movs	r2, #1
 8005298:	4629      	mov	r1, r5
 800529a:	4620      	mov	r0, r4
 800529c:	f000 fc1a 	bl	8005ad4 <__lshift>
 80052a0:	9b01      	ldr	r3, [sp, #4]
 80052a2:	f103 0901 	add.w	r9, r3, #1
 80052a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80052aa:	4413      	add	r3, r2
 80052ac:	9305      	str	r3, [sp, #20]
 80052ae:	f00a 0301 	and.w	r3, sl, #1
 80052b2:	46b8      	mov	r8, r7
 80052b4:	9304      	str	r3, [sp, #16]
 80052b6:	4607      	mov	r7, r0
 80052b8:	4631      	mov	r1, r6
 80052ba:	ee18 0a10 	vmov	r0, s16
 80052be:	f7ff fa77 	bl	80047b0 <quorem>
 80052c2:	4641      	mov	r1, r8
 80052c4:	9002      	str	r0, [sp, #8]
 80052c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80052ca:	ee18 0a10 	vmov	r0, s16
 80052ce:	f000 fc71 	bl	8005bb4 <__mcmp>
 80052d2:	463a      	mov	r2, r7
 80052d4:	9003      	str	r0, [sp, #12]
 80052d6:	4631      	mov	r1, r6
 80052d8:	4620      	mov	r0, r4
 80052da:	f000 fc87 	bl	8005bec <__mdiff>
 80052de:	68c2      	ldr	r2, [r0, #12]
 80052e0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80052e4:	4605      	mov	r5, r0
 80052e6:	bb02      	cbnz	r2, 800532a <_dtoa_r+0xa62>
 80052e8:	4601      	mov	r1, r0
 80052ea:	ee18 0a10 	vmov	r0, s16
 80052ee:	f000 fc61 	bl	8005bb4 <__mcmp>
 80052f2:	4602      	mov	r2, r0
 80052f4:	4629      	mov	r1, r5
 80052f6:	4620      	mov	r0, r4
 80052f8:	9207      	str	r2, [sp, #28]
 80052fa:	f000 fa19 	bl	8005730 <_Bfree>
 80052fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005302:	ea43 0102 	orr.w	r1, r3, r2
 8005306:	9b04      	ldr	r3, [sp, #16]
 8005308:	430b      	orrs	r3, r1
 800530a:	464d      	mov	r5, r9
 800530c:	d10f      	bne.n	800532e <_dtoa_r+0xa66>
 800530e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005312:	d02a      	beq.n	800536a <_dtoa_r+0xaa2>
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	dd02      	ble.n	8005320 <_dtoa_r+0xa58>
 800531a:	9b02      	ldr	r3, [sp, #8]
 800531c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005320:	f88b a000 	strb.w	sl, [fp]
 8005324:	e775      	b.n	8005212 <_dtoa_r+0x94a>
 8005326:	4638      	mov	r0, r7
 8005328:	e7ba      	b.n	80052a0 <_dtoa_r+0x9d8>
 800532a:	2201      	movs	r2, #1
 800532c:	e7e2      	b.n	80052f4 <_dtoa_r+0xa2c>
 800532e:	9b03      	ldr	r3, [sp, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	db04      	blt.n	800533e <_dtoa_r+0xa76>
 8005334:	9906      	ldr	r1, [sp, #24]
 8005336:	430b      	orrs	r3, r1
 8005338:	9904      	ldr	r1, [sp, #16]
 800533a:	430b      	orrs	r3, r1
 800533c:	d122      	bne.n	8005384 <_dtoa_r+0xabc>
 800533e:	2a00      	cmp	r2, #0
 8005340:	ddee      	ble.n	8005320 <_dtoa_r+0xa58>
 8005342:	ee18 1a10 	vmov	r1, s16
 8005346:	2201      	movs	r2, #1
 8005348:	4620      	mov	r0, r4
 800534a:	f000 fbc3 	bl	8005ad4 <__lshift>
 800534e:	4631      	mov	r1, r6
 8005350:	ee08 0a10 	vmov	s16, r0
 8005354:	f000 fc2e 	bl	8005bb4 <__mcmp>
 8005358:	2800      	cmp	r0, #0
 800535a:	dc03      	bgt.n	8005364 <_dtoa_r+0xa9c>
 800535c:	d1e0      	bne.n	8005320 <_dtoa_r+0xa58>
 800535e:	f01a 0f01 	tst.w	sl, #1
 8005362:	d0dd      	beq.n	8005320 <_dtoa_r+0xa58>
 8005364:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005368:	d1d7      	bne.n	800531a <_dtoa_r+0xa52>
 800536a:	2339      	movs	r3, #57	; 0x39
 800536c:	f88b 3000 	strb.w	r3, [fp]
 8005370:	462b      	mov	r3, r5
 8005372:	461d      	mov	r5, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800537a:	2a39      	cmp	r2, #57	; 0x39
 800537c:	d071      	beq.n	8005462 <_dtoa_r+0xb9a>
 800537e:	3201      	adds	r2, #1
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	e746      	b.n	8005212 <_dtoa_r+0x94a>
 8005384:	2a00      	cmp	r2, #0
 8005386:	dd07      	ble.n	8005398 <_dtoa_r+0xad0>
 8005388:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800538c:	d0ed      	beq.n	800536a <_dtoa_r+0xaa2>
 800538e:	f10a 0301 	add.w	r3, sl, #1
 8005392:	f88b 3000 	strb.w	r3, [fp]
 8005396:	e73c      	b.n	8005212 <_dtoa_r+0x94a>
 8005398:	9b05      	ldr	r3, [sp, #20]
 800539a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800539e:	4599      	cmp	r9, r3
 80053a0:	d047      	beq.n	8005432 <_dtoa_r+0xb6a>
 80053a2:	ee18 1a10 	vmov	r1, s16
 80053a6:	2300      	movs	r3, #0
 80053a8:	220a      	movs	r2, #10
 80053aa:	4620      	mov	r0, r4
 80053ac:	f000 f9e2 	bl	8005774 <__multadd>
 80053b0:	45b8      	cmp	r8, r7
 80053b2:	ee08 0a10 	vmov	s16, r0
 80053b6:	f04f 0300 	mov.w	r3, #0
 80053ba:	f04f 020a 	mov.w	r2, #10
 80053be:	4641      	mov	r1, r8
 80053c0:	4620      	mov	r0, r4
 80053c2:	d106      	bne.n	80053d2 <_dtoa_r+0xb0a>
 80053c4:	f000 f9d6 	bl	8005774 <__multadd>
 80053c8:	4680      	mov	r8, r0
 80053ca:	4607      	mov	r7, r0
 80053cc:	f109 0901 	add.w	r9, r9, #1
 80053d0:	e772      	b.n	80052b8 <_dtoa_r+0x9f0>
 80053d2:	f000 f9cf 	bl	8005774 <__multadd>
 80053d6:	4639      	mov	r1, r7
 80053d8:	4680      	mov	r8, r0
 80053da:	2300      	movs	r3, #0
 80053dc:	220a      	movs	r2, #10
 80053de:	4620      	mov	r0, r4
 80053e0:	f000 f9c8 	bl	8005774 <__multadd>
 80053e4:	4607      	mov	r7, r0
 80053e6:	e7f1      	b.n	80053cc <_dtoa_r+0xb04>
 80053e8:	9b03      	ldr	r3, [sp, #12]
 80053ea:	9302      	str	r3, [sp, #8]
 80053ec:	9d01      	ldr	r5, [sp, #4]
 80053ee:	ee18 0a10 	vmov	r0, s16
 80053f2:	4631      	mov	r1, r6
 80053f4:	f7ff f9dc 	bl	80047b0 <quorem>
 80053f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80053fc:	9b01      	ldr	r3, [sp, #4]
 80053fe:	f805 ab01 	strb.w	sl, [r5], #1
 8005402:	1aea      	subs	r2, r5, r3
 8005404:	9b02      	ldr	r3, [sp, #8]
 8005406:	4293      	cmp	r3, r2
 8005408:	dd09      	ble.n	800541e <_dtoa_r+0xb56>
 800540a:	ee18 1a10 	vmov	r1, s16
 800540e:	2300      	movs	r3, #0
 8005410:	220a      	movs	r2, #10
 8005412:	4620      	mov	r0, r4
 8005414:	f000 f9ae 	bl	8005774 <__multadd>
 8005418:	ee08 0a10 	vmov	s16, r0
 800541c:	e7e7      	b.n	80053ee <_dtoa_r+0xb26>
 800541e:	9b02      	ldr	r3, [sp, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	bfc8      	it	gt
 8005424:	461d      	movgt	r5, r3
 8005426:	9b01      	ldr	r3, [sp, #4]
 8005428:	bfd8      	it	le
 800542a:	2501      	movle	r5, #1
 800542c:	441d      	add	r5, r3
 800542e:	f04f 0800 	mov.w	r8, #0
 8005432:	ee18 1a10 	vmov	r1, s16
 8005436:	2201      	movs	r2, #1
 8005438:	4620      	mov	r0, r4
 800543a:	f000 fb4b 	bl	8005ad4 <__lshift>
 800543e:	4631      	mov	r1, r6
 8005440:	ee08 0a10 	vmov	s16, r0
 8005444:	f000 fbb6 	bl	8005bb4 <__mcmp>
 8005448:	2800      	cmp	r0, #0
 800544a:	dc91      	bgt.n	8005370 <_dtoa_r+0xaa8>
 800544c:	d102      	bne.n	8005454 <_dtoa_r+0xb8c>
 800544e:	f01a 0f01 	tst.w	sl, #1
 8005452:	d18d      	bne.n	8005370 <_dtoa_r+0xaa8>
 8005454:	462b      	mov	r3, r5
 8005456:	461d      	mov	r5, r3
 8005458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800545c:	2a30      	cmp	r2, #48	; 0x30
 800545e:	d0fa      	beq.n	8005456 <_dtoa_r+0xb8e>
 8005460:	e6d7      	b.n	8005212 <_dtoa_r+0x94a>
 8005462:	9a01      	ldr	r2, [sp, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d184      	bne.n	8005372 <_dtoa_r+0xaaa>
 8005468:	9b00      	ldr	r3, [sp, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	2331      	movs	r3, #49	; 0x31
 8005470:	7013      	strb	r3, [r2, #0]
 8005472:	e6ce      	b.n	8005212 <_dtoa_r+0x94a>
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <_dtoa_r+0xbd4>)
 8005476:	f7ff ba95 	b.w	80049a4 <_dtoa_r+0xdc>
 800547a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800547c:	2b00      	cmp	r3, #0
 800547e:	f47f aa6e 	bne.w	800495e <_dtoa_r+0x96>
 8005482:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <_dtoa_r+0xbd8>)
 8005484:	f7ff ba8e 	b.w	80049a4 <_dtoa_r+0xdc>
 8005488:	9b02      	ldr	r3, [sp, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	dcae      	bgt.n	80053ec <_dtoa_r+0xb24>
 800548e:	9b06      	ldr	r3, [sp, #24]
 8005490:	2b02      	cmp	r3, #2
 8005492:	f73f aea8 	bgt.w	80051e6 <_dtoa_r+0x91e>
 8005496:	e7a9      	b.n	80053ec <_dtoa_r+0xb24>
 8005498:	08006d63 	.word	0x08006d63
 800549c:	08006cc0 	.word	0x08006cc0
 80054a0:	08006ce4 	.word	0x08006ce4

080054a4 <std>:
 80054a4:	2300      	movs	r3, #0
 80054a6:	b510      	push	{r4, lr}
 80054a8:	4604      	mov	r4, r0
 80054aa:	e9c0 3300 	strd	r3, r3, [r0]
 80054ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054b2:	6083      	str	r3, [r0, #8]
 80054b4:	8181      	strh	r1, [r0, #12]
 80054b6:	6643      	str	r3, [r0, #100]	; 0x64
 80054b8:	81c2      	strh	r2, [r0, #14]
 80054ba:	6183      	str	r3, [r0, #24]
 80054bc:	4619      	mov	r1, r3
 80054be:	2208      	movs	r2, #8
 80054c0:	305c      	adds	r0, #92	; 0x5c
 80054c2:	f7fe fccb 	bl	8003e5c <memset>
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <std+0x38>)
 80054c8:	6263      	str	r3, [r4, #36]	; 0x24
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <std+0x3c>)
 80054cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <std+0x40>)
 80054d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054d2:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <std+0x44>)
 80054d4:	6224      	str	r4, [r4, #32]
 80054d6:	6323      	str	r3, [r4, #48]	; 0x30
 80054d8:	bd10      	pop	{r4, pc}
 80054da:	bf00      	nop
 80054dc:	08006531 	.word	0x08006531
 80054e0:	08006553 	.word	0x08006553
 80054e4:	0800658b 	.word	0x0800658b
 80054e8:	080065af 	.word	0x080065af

080054ec <_cleanup_r>:
 80054ec:	4901      	ldr	r1, [pc, #4]	; (80054f4 <_cleanup_r+0x8>)
 80054ee:	f000 b8af 	b.w	8005650 <_fwalk_reent>
 80054f2:	bf00      	nop
 80054f4:	080068c5 	.word	0x080068c5

080054f8 <__sfmoreglue>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	2268      	movs	r2, #104	; 0x68
 80054fc:	1e4d      	subs	r5, r1, #1
 80054fe:	4355      	muls	r5, r2
 8005500:	460e      	mov	r6, r1
 8005502:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005506:	f000 fcd9 	bl	8005ebc <_malloc_r>
 800550a:	4604      	mov	r4, r0
 800550c:	b140      	cbz	r0, 8005520 <__sfmoreglue+0x28>
 800550e:	2100      	movs	r1, #0
 8005510:	e9c0 1600 	strd	r1, r6, [r0]
 8005514:	300c      	adds	r0, #12
 8005516:	60a0      	str	r0, [r4, #8]
 8005518:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800551c:	f7fe fc9e 	bl	8003e5c <memset>
 8005520:	4620      	mov	r0, r4
 8005522:	bd70      	pop	{r4, r5, r6, pc}

08005524 <__sfp_lock_acquire>:
 8005524:	4801      	ldr	r0, [pc, #4]	; (800552c <__sfp_lock_acquire+0x8>)
 8005526:	f000 b8b8 	b.w	800569a <__retarget_lock_acquire_recursive>
 800552a:	bf00      	nop
 800552c:	20004b99 	.word	0x20004b99

08005530 <__sfp_lock_release>:
 8005530:	4801      	ldr	r0, [pc, #4]	; (8005538 <__sfp_lock_release+0x8>)
 8005532:	f000 b8b3 	b.w	800569c <__retarget_lock_release_recursive>
 8005536:	bf00      	nop
 8005538:	20004b99 	.word	0x20004b99

0800553c <__sinit_lock_acquire>:
 800553c:	4801      	ldr	r0, [pc, #4]	; (8005544 <__sinit_lock_acquire+0x8>)
 800553e:	f000 b8ac 	b.w	800569a <__retarget_lock_acquire_recursive>
 8005542:	bf00      	nop
 8005544:	20004b9a 	.word	0x20004b9a

08005548 <__sinit_lock_release>:
 8005548:	4801      	ldr	r0, [pc, #4]	; (8005550 <__sinit_lock_release+0x8>)
 800554a:	f000 b8a7 	b.w	800569c <__retarget_lock_release_recursive>
 800554e:	bf00      	nop
 8005550:	20004b9a 	.word	0x20004b9a

08005554 <__sinit>:
 8005554:	b510      	push	{r4, lr}
 8005556:	4604      	mov	r4, r0
 8005558:	f7ff fff0 	bl	800553c <__sinit_lock_acquire>
 800555c:	69a3      	ldr	r3, [r4, #24]
 800555e:	b11b      	cbz	r3, 8005568 <__sinit+0x14>
 8005560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005564:	f7ff bff0 	b.w	8005548 <__sinit_lock_release>
 8005568:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800556c:	6523      	str	r3, [r4, #80]	; 0x50
 800556e:	4b13      	ldr	r3, [pc, #76]	; (80055bc <__sinit+0x68>)
 8005570:	4a13      	ldr	r2, [pc, #76]	; (80055c0 <__sinit+0x6c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	62a2      	str	r2, [r4, #40]	; 0x28
 8005576:	42a3      	cmp	r3, r4
 8005578:	bf04      	itt	eq
 800557a:	2301      	moveq	r3, #1
 800557c:	61a3      	streq	r3, [r4, #24]
 800557e:	4620      	mov	r0, r4
 8005580:	f000 f820 	bl	80055c4 <__sfp>
 8005584:	6060      	str	r0, [r4, #4]
 8005586:	4620      	mov	r0, r4
 8005588:	f000 f81c 	bl	80055c4 <__sfp>
 800558c:	60a0      	str	r0, [r4, #8]
 800558e:	4620      	mov	r0, r4
 8005590:	f000 f818 	bl	80055c4 <__sfp>
 8005594:	2200      	movs	r2, #0
 8005596:	60e0      	str	r0, [r4, #12]
 8005598:	2104      	movs	r1, #4
 800559a:	6860      	ldr	r0, [r4, #4]
 800559c:	f7ff ff82 	bl	80054a4 <std>
 80055a0:	68a0      	ldr	r0, [r4, #8]
 80055a2:	2201      	movs	r2, #1
 80055a4:	2109      	movs	r1, #9
 80055a6:	f7ff ff7d 	bl	80054a4 <std>
 80055aa:	68e0      	ldr	r0, [r4, #12]
 80055ac:	2202      	movs	r2, #2
 80055ae:	2112      	movs	r1, #18
 80055b0:	f7ff ff78 	bl	80054a4 <std>
 80055b4:	2301      	movs	r3, #1
 80055b6:	61a3      	str	r3, [r4, #24]
 80055b8:	e7d2      	b.n	8005560 <__sinit+0xc>
 80055ba:	bf00      	nop
 80055bc:	08006cac 	.word	0x08006cac
 80055c0:	080054ed 	.word	0x080054ed

080055c4 <__sfp>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	4607      	mov	r7, r0
 80055c8:	f7ff ffac 	bl	8005524 <__sfp_lock_acquire>
 80055cc:	4b1e      	ldr	r3, [pc, #120]	; (8005648 <__sfp+0x84>)
 80055ce:	681e      	ldr	r6, [r3, #0]
 80055d0:	69b3      	ldr	r3, [r6, #24]
 80055d2:	b913      	cbnz	r3, 80055da <__sfp+0x16>
 80055d4:	4630      	mov	r0, r6
 80055d6:	f7ff ffbd 	bl	8005554 <__sinit>
 80055da:	3648      	adds	r6, #72	; 0x48
 80055dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	d503      	bpl.n	80055ec <__sfp+0x28>
 80055e4:	6833      	ldr	r3, [r6, #0]
 80055e6:	b30b      	cbz	r3, 800562c <__sfp+0x68>
 80055e8:	6836      	ldr	r6, [r6, #0]
 80055ea:	e7f7      	b.n	80055dc <__sfp+0x18>
 80055ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80055f0:	b9d5      	cbnz	r5, 8005628 <__sfp+0x64>
 80055f2:	4b16      	ldr	r3, [pc, #88]	; (800564c <__sfp+0x88>)
 80055f4:	60e3      	str	r3, [r4, #12]
 80055f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055fa:	6665      	str	r5, [r4, #100]	; 0x64
 80055fc:	f000 f84c 	bl	8005698 <__retarget_lock_init_recursive>
 8005600:	f7ff ff96 	bl	8005530 <__sfp_lock_release>
 8005604:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005608:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800560c:	6025      	str	r5, [r4, #0]
 800560e:	61a5      	str	r5, [r4, #24]
 8005610:	2208      	movs	r2, #8
 8005612:	4629      	mov	r1, r5
 8005614:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005618:	f7fe fc20 	bl	8003e5c <memset>
 800561c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005620:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005624:	4620      	mov	r0, r4
 8005626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005628:	3468      	adds	r4, #104	; 0x68
 800562a:	e7d9      	b.n	80055e0 <__sfp+0x1c>
 800562c:	2104      	movs	r1, #4
 800562e:	4638      	mov	r0, r7
 8005630:	f7ff ff62 	bl	80054f8 <__sfmoreglue>
 8005634:	4604      	mov	r4, r0
 8005636:	6030      	str	r0, [r6, #0]
 8005638:	2800      	cmp	r0, #0
 800563a:	d1d5      	bne.n	80055e8 <__sfp+0x24>
 800563c:	f7ff ff78 	bl	8005530 <__sfp_lock_release>
 8005640:	230c      	movs	r3, #12
 8005642:	603b      	str	r3, [r7, #0]
 8005644:	e7ee      	b.n	8005624 <__sfp+0x60>
 8005646:	bf00      	nop
 8005648:	08006cac 	.word	0x08006cac
 800564c:	ffff0001 	.word	0xffff0001

08005650 <_fwalk_reent>:
 8005650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005654:	4606      	mov	r6, r0
 8005656:	4688      	mov	r8, r1
 8005658:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800565c:	2700      	movs	r7, #0
 800565e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005662:	f1b9 0901 	subs.w	r9, r9, #1
 8005666:	d505      	bpl.n	8005674 <_fwalk_reent+0x24>
 8005668:	6824      	ldr	r4, [r4, #0]
 800566a:	2c00      	cmp	r4, #0
 800566c:	d1f7      	bne.n	800565e <_fwalk_reent+0xe>
 800566e:	4638      	mov	r0, r7
 8005670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005674:	89ab      	ldrh	r3, [r5, #12]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d907      	bls.n	800568a <_fwalk_reent+0x3a>
 800567a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800567e:	3301      	adds	r3, #1
 8005680:	d003      	beq.n	800568a <_fwalk_reent+0x3a>
 8005682:	4629      	mov	r1, r5
 8005684:	4630      	mov	r0, r6
 8005686:	47c0      	blx	r8
 8005688:	4307      	orrs	r7, r0
 800568a:	3568      	adds	r5, #104	; 0x68
 800568c:	e7e9      	b.n	8005662 <_fwalk_reent+0x12>
	...

08005690 <_localeconv_r>:
 8005690:	4800      	ldr	r0, [pc, #0]	; (8005694 <_localeconv_r+0x4>)
 8005692:	4770      	bx	lr
 8005694:	2000015c 	.word	0x2000015c

08005698 <__retarget_lock_init_recursive>:
 8005698:	4770      	bx	lr

0800569a <__retarget_lock_acquire_recursive>:
 800569a:	4770      	bx	lr

0800569c <__retarget_lock_release_recursive>:
 800569c:	4770      	bx	lr
	...

080056a0 <malloc>:
 80056a0:	4b02      	ldr	r3, [pc, #8]	; (80056ac <malloc+0xc>)
 80056a2:	4601      	mov	r1, r0
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	f000 bc09 	b.w	8005ebc <_malloc_r>
 80056aa:	bf00      	nop
 80056ac:	20000008 	.word	0x20000008

080056b0 <_Balloc>:
 80056b0:	b570      	push	{r4, r5, r6, lr}
 80056b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056b4:	4604      	mov	r4, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	b976      	cbnz	r6, 80056d8 <_Balloc+0x28>
 80056ba:	2010      	movs	r0, #16
 80056bc:	f7ff fff0 	bl	80056a0 <malloc>
 80056c0:	4602      	mov	r2, r0
 80056c2:	6260      	str	r0, [r4, #36]	; 0x24
 80056c4:	b920      	cbnz	r0, 80056d0 <_Balloc+0x20>
 80056c6:	4b18      	ldr	r3, [pc, #96]	; (8005728 <_Balloc+0x78>)
 80056c8:	4818      	ldr	r0, [pc, #96]	; (800572c <_Balloc+0x7c>)
 80056ca:	2166      	movs	r1, #102	; 0x66
 80056cc:	f001 f846 	bl	800675c <__assert_func>
 80056d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056d4:	6006      	str	r6, [r0, #0]
 80056d6:	60c6      	str	r6, [r0, #12]
 80056d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056da:	68f3      	ldr	r3, [r6, #12]
 80056dc:	b183      	cbz	r3, 8005700 <_Balloc+0x50>
 80056de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056e6:	b9b8      	cbnz	r0, 8005718 <_Balloc+0x68>
 80056e8:	2101      	movs	r1, #1
 80056ea:	fa01 f605 	lsl.w	r6, r1, r5
 80056ee:	1d72      	adds	r2, r6, #5
 80056f0:	0092      	lsls	r2, r2, #2
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 fb60 	bl	8005db8 <_calloc_r>
 80056f8:	b160      	cbz	r0, 8005714 <_Balloc+0x64>
 80056fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056fe:	e00e      	b.n	800571e <_Balloc+0x6e>
 8005700:	2221      	movs	r2, #33	; 0x21
 8005702:	2104      	movs	r1, #4
 8005704:	4620      	mov	r0, r4
 8005706:	f000 fb57 	bl	8005db8 <_calloc_r>
 800570a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800570c:	60f0      	str	r0, [r6, #12]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e4      	bne.n	80056de <_Balloc+0x2e>
 8005714:	2000      	movs	r0, #0
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	6802      	ldr	r2, [r0, #0]
 800571a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800571e:	2300      	movs	r3, #0
 8005720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005724:	e7f7      	b.n	8005716 <_Balloc+0x66>
 8005726:	bf00      	nop
 8005728:	08006cf1 	.word	0x08006cf1
 800572c:	08006dd4 	.word	0x08006dd4

08005730 <_Bfree>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005734:	4605      	mov	r5, r0
 8005736:	460c      	mov	r4, r1
 8005738:	b976      	cbnz	r6, 8005758 <_Bfree+0x28>
 800573a:	2010      	movs	r0, #16
 800573c:	f7ff ffb0 	bl	80056a0 <malloc>
 8005740:	4602      	mov	r2, r0
 8005742:	6268      	str	r0, [r5, #36]	; 0x24
 8005744:	b920      	cbnz	r0, 8005750 <_Bfree+0x20>
 8005746:	4b09      	ldr	r3, [pc, #36]	; (800576c <_Bfree+0x3c>)
 8005748:	4809      	ldr	r0, [pc, #36]	; (8005770 <_Bfree+0x40>)
 800574a:	218a      	movs	r1, #138	; 0x8a
 800574c:	f001 f806 	bl	800675c <__assert_func>
 8005750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005754:	6006      	str	r6, [r0, #0]
 8005756:	60c6      	str	r6, [r0, #12]
 8005758:	b13c      	cbz	r4, 800576a <_Bfree+0x3a>
 800575a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800575c:	6862      	ldr	r2, [r4, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005764:	6021      	str	r1, [r4, #0]
 8005766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	08006cf1 	.word	0x08006cf1
 8005770:	08006dd4 	.word	0x08006dd4

08005774 <__multadd>:
 8005774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005778:	690d      	ldr	r5, [r1, #16]
 800577a:	4607      	mov	r7, r0
 800577c:	460c      	mov	r4, r1
 800577e:	461e      	mov	r6, r3
 8005780:	f101 0c14 	add.w	ip, r1, #20
 8005784:	2000      	movs	r0, #0
 8005786:	f8dc 3000 	ldr.w	r3, [ip]
 800578a:	b299      	uxth	r1, r3
 800578c:	fb02 6101 	mla	r1, r2, r1, r6
 8005790:	0c1e      	lsrs	r6, r3, #16
 8005792:	0c0b      	lsrs	r3, r1, #16
 8005794:	fb02 3306 	mla	r3, r2, r6, r3
 8005798:	b289      	uxth	r1, r1
 800579a:	3001      	adds	r0, #1
 800579c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80057a0:	4285      	cmp	r5, r0
 80057a2:	f84c 1b04 	str.w	r1, [ip], #4
 80057a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80057aa:	dcec      	bgt.n	8005786 <__multadd+0x12>
 80057ac:	b30e      	cbz	r6, 80057f2 <__multadd+0x7e>
 80057ae:	68a3      	ldr	r3, [r4, #8]
 80057b0:	42ab      	cmp	r3, r5
 80057b2:	dc19      	bgt.n	80057e8 <__multadd+0x74>
 80057b4:	6861      	ldr	r1, [r4, #4]
 80057b6:	4638      	mov	r0, r7
 80057b8:	3101      	adds	r1, #1
 80057ba:	f7ff ff79 	bl	80056b0 <_Balloc>
 80057be:	4680      	mov	r8, r0
 80057c0:	b928      	cbnz	r0, 80057ce <__multadd+0x5a>
 80057c2:	4602      	mov	r2, r0
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <__multadd+0x84>)
 80057c6:	480d      	ldr	r0, [pc, #52]	; (80057fc <__multadd+0x88>)
 80057c8:	21b5      	movs	r1, #181	; 0xb5
 80057ca:	f000 ffc7 	bl	800675c <__assert_func>
 80057ce:	6922      	ldr	r2, [r4, #16]
 80057d0:	3202      	adds	r2, #2
 80057d2:	f104 010c 	add.w	r1, r4, #12
 80057d6:	0092      	lsls	r2, r2, #2
 80057d8:	300c      	adds	r0, #12
 80057da:	f7fe fb31 	bl	8003e40 <memcpy>
 80057de:	4621      	mov	r1, r4
 80057e0:	4638      	mov	r0, r7
 80057e2:	f7ff ffa5 	bl	8005730 <_Bfree>
 80057e6:	4644      	mov	r4, r8
 80057e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057ec:	3501      	adds	r5, #1
 80057ee:	615e      	str	r6, [r3, #20]
 80057f0:	6125      	str	r5, [r4, #16]
 80057f2:	4620      	mov	r0, r4
 80057f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f8:	08006d63 	.word	0x08006d63
 80057fc:	08006dd4 	.word	0x08006dd4

08005800 <__hi0bits>:
 8005800:	0c03      	lsrs	r3, r0, #16
 8005802:	041b      	lsls	r3, r3, #16
 8005804:	b9d3      	cbnz	r3, 800583c <__hi0bits+0x3c>
 8005806:	0400      	lsls	r0, r0, #16
 8005808:	2310      	movs	r3, #16
 800580a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800580e:	bf04      	itt	eq
 8005810:	0200      	lsleq	r0, r0, #8
 8005812:	3308      	addeq	r3, #8
 8005814:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005818:	bf04      	itt	eq
 800581a:	0100      	lsleq	r0, r0, #4
 800581c:	3304      	addeq	r3, #4
 800581e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005822:	bf04      	itt	eq
 8005824:	0080      	lsleq	r0, r0, #2
 8005826:	3302      	addeq	r3, #2
 8005828:	2800      	cmp	r0, #0
 800582a:	db05      	blt.n	8005838 <__hi0bits+0x38>
 800582c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005830:	f103 0301 	add.w	r3, r3, #1
 8005834:	bf08      	it	eq
 8005836:	2320      	moveq	r3, #32
 8005838:	4618      	mov	r0, r3
 800583a:	4770      	bx	lr
 800583c:	2300      	movs	r3, #0
 800583e:	e7e4      	b.n	800580a <__hi0bits+0xa>

08005840 <__lo0bits>:
 8005840:	6803      	ldr	r3, [r0, #0]
 8005842:	f013 0207 	ands.w	r2, r3, #7
 8005846:	4601      	mov	r1, r0
 8005848:	d00b      	beq.n	8005862 <__lo0bits+0x22>
 800584a:	07da      	lsls	r2, r3, #31
 800584c:	d423      	bmi.n	8005896 <__lo0bits+0x56>
 800584e:	0798      	lsls	r0, r3, #30
 8005850:	bf49      	itett	mi
 8005852:	085b      	lsrmi	r3, r3, #1
 8005854:	089b      	lsrpl	r3, r3, #2
 8005856:	2001      	movmi	r0, #1
 8005858:	600b      	strmi	r3, [r1, #0]
 800585a:	bf5c      	itt	pl
 800585c:	600b      	strpl	r3, [r1, #0]
 800585e:	2002      	movpl	r0, #2
 8005860:	4770      	bx	lr
 8005862:	b298      	uxth	r0, r3
 8005864:	b9a8      	cbnz	r0, 8005892 <__lo0bits+0x52>
 8005866:	0c1b      	lsrs	r3, r3, #16
 8005868:	2010      	movs	r0, #16
 800586a:	b2da      	uxtb	r2, r3
 800586c:	b90a      	cbnz	r2, 8005872 <__lo0bits+0x32>
 800586e:	3008      	adds	r0, #8
 8005870:	0a1b      	lsrs	r3, r3, #8
 8005872:	071a      	lsls	r2, r3, #28
 8005874:	bf04      	itt	eq
 8005876:	091b      	lsreq	r3, r3, #4
 8005878:	3004      	addeq	r0, #4
 800587a:	079a      	lsls	r2, r3, #30
 800587c:	bf04      	itt	eq
 800587e:	089b      	lsreq	r3, r3, #2
 8005880:	3002      	addeq	r0, #2
 8005882:	07da      	lsls	r2, r3, #31
 8005884:	d403      	bmi.n	800588e <__lo0bits+0x4e>
 8005886:	085b      	lsrs	r3, r3, #1
 8005888:	f100 0001 	add.w	r0, r0, #1
 800588c:	d005      	beq.n	800589a <__lo0bits+0x5a>
 800588e:	600b      	str	r3, [r1, #0]
 8005890:	4770      	bx	lr
 8005892:	4610      	mov	r0, r2
 8005894:	e7e9      	b.n	800586a <__lo0bits+0x2a>
 8005896:	2000      	movs	r0, #0
 8005898:	4770      	bx	lr
 800589a:	2020      	movs	r0, #32
 800589c:	4770      	bx	lr
	...

080058a0 <__i2b>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	460c      	mov	r4, r1
 80058a4:	2101      	movs	r1, #1
 80058a6:	f7ff ff03 	bl	80056b0 <_Balloc>
 80058aa:	4602      	mov	r2, r0
 80058ac:	b928      	cbnz	r0, 80058ba <__i2b+0x1a>
 80058ae:	4b05      	ldr	r3, [pc, #20]	; (80058c4 <__i2b+0x24>)
 80058b0:	4805      	ldr	r0, [pc, #20]	; (80058c8 <__i2b+0x28>)
 80058b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058b6:	f000 ff51 	bl	800675c <__assert_func>
 80058ba:	2301      	movs	r3, #1
 80058bc:	6144      	str	r4, [r0, #20]
 80058be:	6103      	str	r3, [r0, #16]
 80058c0:	bd10      	pop	{r4, pc}
 80058c2:	bf00      	nop
 80058c4:	08006d63 	.word	0x08006d63
 80058c8:	08006dd4 	.word	0x08006dd4

080058cc <__multiply>:
 80058cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	4691      	mov	r9, r2
 80058d2:	690a      	ldr	r2, [r1, #16]
 80058d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80058d8:	429a      	cmp	r2, r3
 80058da:	bfb8      	it	lt
 80058dc:	460b      	movlt	r3, r1
 80058de:	460c      	mov	r4, r1
 80058e0:	bfbc      	itt	lt
 80058e2:	464c      	movlt	r4, r9
 80058e4:	4699      	movlt	r9, r3
 80058e6:	6927      	ldr	r7, [r4, #16]
 80058e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80058ec:	68a3      	ldr	r3, [r4, #8]
 80058ee:	6861      	ldr	r1, [r4, #4]
 80058f0:	eb07 060a 	add.w	r6, r7, sl
 80058f4:	42b3      	cmp	r3, r6
 80058f6:	b085      	sub	sp, #20
 80058f8:	bfb8      	it	lt
 80058fa:	3101      	addlt	r1, #1
 80058fc:	f7ff fed8 	bl	80056b0 <_Balloc>
 8005900:	b930      	cbnz	r0, 8005910 <__multiply+0x44>
 8005902:	4602      	mov	r2, r0
 8005904:	4b44      	ldr	r3, [pc, #272]	; (8005a18 <__multiply+0x14c>)
 8005906:	4845      	ldr	r0, [pc, #276]	; (8005a1c <__multiply+0x150>)
 8005908:	f240 115d 	movw	r1, #349	; 0x15d
 800590c:	f000 ff26 	bl	800675c <__assert_func>
 8005910:	f100 0514 	add.w	r5, r0, #20
 8005914:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005918:	462b      	mov	r3, r5
 800591a:	2200      	movs	r2, #0
 800591c:	4543      	cmp	r3, r8
 800591e:	d321      	bcc.n	8005964 <__multiply+0x98>
 8005920:	f104 0314 	add.w	r3, r4, #20
 8005924:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005928:	f109 0314 	add.w	r3, r9, #20
 800592c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005930:	9202      	str	r2, [sp, #8]
 8005932:	1b3a      	subs	r2, r7, r4
 8005934:	3a15      	subs	r2, #21
 8005936:	f022 0203 	bic.w	r2, r2, #3
 800593a:	3204      	adds	r2, #4
 800593c:	f104 0115 	add.w	r1, r4, #21
 8005940:	428f      	cmp	r7, r1
 8005942:	bf38      	it	cc
 8005944:	2204      	movcc	r2, #4
 8005946:	9201      	str	r2, [sp, #4]
 8005948:	9a02      	ldr	r2, [sp, #8]
 800594a:	9303      	str	r3, [sp, #12]
 800594c:	429a      	cmp	r2, r3
 800594e:	d80c      	bhi.n	800596a <__multiply+0x9e>
 8005950:	2e00      	cmp	r6, #0
 8005952:	dd03      	ble.n	800595c <__multiply+0x90>
 8005954:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005958:	2b00      	cmp	r3, #0
 800595a:	d05a      	beq.n	8005a12 <__multiply+0x146>
 800595c:	6106      	str	r6, [r0, #16]
 800595e:	b005      	add	sp, #20
 8005960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005964:	f843 2b04 	str.w	r2, [r3], #4
 8005968:	e7d8      	b.n	800591c <__multiply+0x50>
 800596a:	f8b3 a000 	ldrh.w	sl, [r3]
 800596e:	f1ba 0f00 	cmp.w	sl, #0
 8005972:	d024      	beq.n	80059be <__multiply+0xf2>
 8005974:	f104 0e14 	add.w	lr, r4, #20
 8005978:	46a9      	mov	r9, r5
 800597a:	f04f 0c00 	mov.w	ip, #0
 800597e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005982:	f8d9 1000 	ldr.w	r1, [r9]
 8005986:	fa1f fb82 	uxth.w	fp, r2
 800598a:	b289      	uxth	r1, r1
 800598c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005990:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005994:	f8d9 2000 	ldr.w	r2, [r9]
 8005998:	4461      	add	r1, ip
 800599a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800599e:	fb0a c20b 	mla	r2, sl, fp, ip
 80059a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80059a6:	b289      	uxth	r1, r1
 80059a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80059ac:	4577      	cmp	r7, lr
 80059ae:	f849 1b04 	str.w	r1, [r9], #4
 80059b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80059b6:	d8e2      	bhi.n	800597e <__multiply+0xb2>
 80059b8:	9a01      	ldr	r2, [sp, #4]
 80059ba:	f845 c002 	str.w	ip, [r5, r2]
 80059be:	9a03      	ldr	r2, [sp, #12]
 80059c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059c4:	3304      	adds	r3, #4
 80059c6:	f1b9 0f00 	cmp.w	r9, #0
 80059ca:	d020      	beq.n	8005a0e <__multiply+0x142>
 80059cc:	6829      	ldr	r1, [r5, #0]
 80059ce:	f104 0c14 	add.w	ip, r4, #20
 80059d2:	46ae      	mov	lr, r5
 80059d4:	f04f 0a00 	mov.w	sl, #0
 80059d8:	f8bc b000 	ldrh.w	fp, [ip]
 80059dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80059e0:	fb09 220b 	mla	r2, r9, fp, r2
 80059e4:	4492      	add	sl, r2
 80059e6:	b289      	uxth	r1, r1
 80059e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80059ec:	f84e 1b04 	str.w	r1, [lr], #4
 80059f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80059f4:	f8be 1000 	ldrh.w	r1, [lr]
 80059f8:	0c12      	lsrs	r2, r2, #16
 80059fa:	fb09 1102 	mla	r1, r9, r2, r1
 80059fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005a02:	4567      	cmp	r7, ip
 8005a04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005a08:	d8e6      	bhi.n	80059d8 <__multiply+0x10c>
 8005a0a:	9a01      	ldr	r2, [sp, #4]
 8005a0c:	50a9      	str	r1, [r5, r2]
 8005a0e:	3504      	adds	r5, #4
 8005a10:	e79a      	b.n	8005948 <__multiply+0x7c>
 8005a12:	3e01      	subs	r6, #1
 8005a14:	e79c      	b.n	8005950 <__multiply+0x84>
 8005a16:	bf00      	nop
 8005a18:	08006d63 	.word	0x08006d63
 8005a1c:	08006dd4 	.word	0x08006dd4

08005a20 <__pow5mult>:
 8005a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a24:	4615      	mov	r5, r2
 8005a26:	f012 0203 	ands.w	r2, r2, #3
 8005a2a:	4606      	mov	r6, r0
 8005a2c:	460f      	mov	r7, r1
 8005a2e:	d007      	beq.n	8005a40 <__pow5mult+0x20>
 8005a30:	4c25      	ldr	r4, [pc, #148]	; (8005ac8 <__pow5mult+0xa8>)
 8005a32:	3a01      	subs	r2, #1
 8005a34:	2300      	movs	r3, #0
 8005a36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a3a:	f7ff fe9b 	bl	8005774 <__multadd>
 8005a3e:	4607      	mov	r7, r0
 8005a40:	10ad      	asrs	r5, r5, #2
 8005a42:	d03d      	beq.n	8005ac0 <__pow5mult+0xa0>
 8005a44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a46:	b97c      	cbnz	r4, 8005a68 <__pow5mult+0x48>
 8005a48:	2010      	movs	r0, #16
 8005a4a:	f7ff fe29 	bl	80056a0 <malloc>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	6270      	str	r0, [r6, #36]	; 0x24
 8005a52:	b928      	cbnz	r0, 8005a60 <__pow5mult+0x40>
 8005a54:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <__pow5mult+0xac>)
 8005a56:	481e      	ldr	r0, [pc, #120]	; (8005ad0 <__pow5mult+0xb0>)
 8005a58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a5c:	f000 fe7e 	bl	800675c <__assert_func>
 8005a60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a64:	6004      	str	r4, [r0, #0]
 8005a66:	60c4      	str	r4, [r0, #12]
 8005a68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a70:	b94c      	cbnz	r4, 8005a86 <__pow5mult+0x66>
 8005a72:	f240 2171 	movw	r1, #625	; 0x271
 8005a76:	4630      	mov	r0, r6
 8005a78:	f7ff ff12 	bl	80058a0 <__i2b>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a82:	4604      	mov	r4, r0
 8005a84:	6003      	str	r3, [r0, #0]
 8005a86:	f04f 0900 	mov.w	r9, #0
 8005a8a:	07eb      	lsls	r3, r5, #31
 8005a8c:	d50a      	bpl.n	8005aa4 <__pow5mult+0x84>
 8005a8e:	4639      	mov	r1, r7
 8005a90:	4622      	mov	r2, r4
 8005a92:	4630      	mov	r0, r6
 8005a94:	f7ff ff1a 	bl	80058cc <__multiply>
 8005a98:	4639      	mov	r1, r7
 8005a9a:	4680      	mov	r8, r0
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f7ff fe47 	bl	8005730 <_Bfree>
 8005aa2:	4647      	mov	r7, r8
 8005aa4:	106d      	asrs	r5, r5, #1
 8005aa6:	d00b      	beq.n	8005ac0 <__pow5mult+0xa0>
 8005aa8:	6820      	ldr	r0, [r4, #0]
 8005aaa:	b938      	cbnz	r0, 8005abc <__pow5mult+0x9c>
 8005aac:	4622      	mov	r2, r4
 8005aae:	4621      	mov	r1, r4
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f7ff ff0b 	bl	80058cc <__multiply>
 8005ab6:	6020      	str	r0, [r4, #0]
 8005ab8:	f8c0 9000 	str.w	r9, [r0]
 8005abc:	4604      	mov	r4, r0
 8005abe:	e7e4      	b.n	8005a8a <__pow5mult+0x6a>
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac6:	bf00      	nop
 8005ac8:	08006f20 	.word	0x08006f20
 8005acc:	08006cf1 	.word	0x08006cf1
 8005ad0:	08006dd4 	.word	0x08006dd4

08005ad4 <__lshift>:
 8005ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	460c      	mov	r4, r1
 8005ada:	6849      	ldr	r1, [r1, #4]
 8005adc:	6923      	ldr	r3, [r4, #16]
 8005ade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ae2:	68a3      	ldr	r3, [r4, #8]
 8005ae4:	4607      	mov	r7, r0
 8005ae6:	4691      	mov	r9, r2
 8005ae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005aec:	f108 0601 	add.w	r6, r8, #1
 8005af0:	42b3      	cmp	r3, r6
 8005af2:	db0b      	blt.n	8005b0c <__lshift+0x38>
 8005af4:	4638      	mov	r0, r7
 8005af6:	f7ff fddb 	bl	80056b0 <_Balloc>
 8005afa:	4605      	mov	r5, r0
 8005afc:	b948      	cbnz	r0, 8005b12 <__lshift+0x3e>
 8005afe:	4602      	mov	r2, r0
 8005b00:	4b2a      	ldr	r3, [pc, #168]	; (8005bac <__lshift+0xd8>)
 8005b02:	482b      	ldr	r0, [pc, #172]	; (8005bb0 <__lshift+0xdc>)
 8005b04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b08:	f000 fe28 	bl	800675c <__assert_func>
 8005b0c:	3101      	adds	r1, #1
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	e7ee      	b.n	8005af0 <__lshift+0x1c>
 8005b12:	2300      	movs	r3, #0
 8005b14:	f100 0114 	add.w	r1, r0, #20
 8005b18:	f100 0210 	add.w	r2, r0, #16
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	4553      	cmp	r3, sl
 8005b20:	db37      	blt.n	8005b92 <__lshift+0xbe>
 8005b22:	6920      	ldr	r0, [r4, #16]
 8005b24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b28:	f104 0314 	add.w	r3, r4, #20
 8005b2c:	f019 091f 	ands.w	r9, r9, #31
 8005b30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005b38:	d02f      	beq.n	8005b9a <__lshift+0xc6>
 8005b3a:	f1c9 0e20 	rsb	lr, r9, #32
 8005b3e:	468a      	mov	sl, r1
 8005b40:	f04f 0c00 	mov.w	ip, #0
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	fa02 f209 	lsl.w	r2, r2, r9
 8005b4a:	ea42 020c 	orr.w	r2, r2, ip
 8005b4e:	f84a 2b04 	str.w	r2, [sl], #4
 8005b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b56:	4298      	cmp	r0, r3
 8005b58:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005b5c:	d8f2      	bhi.n	8005b44 <__lshift+0x70>
 8005b5e:	1b03      	subs	r3, r0, r4
 8005b60:	3b15      	subs	r3, #21
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	3304      	adds	r3, #4
 8005b68:	f104 0215 	add.w	r2, r4, #21
 8005b6c:	4290      	cmp	r0, r2
 8005b6e:	bf38      	it	cc
 8005b70:	2304      	movcc	r3, #4
 8005b72:	f841 c003 	str.w	ip, [r1, r3]
 8005b76:	f1bc 0f00 	cmp.w	ip, #0
 8005b7a:	d001      	beq.n	8005b80 <__lshift+0xac>
 8005b7c:	f108 0602 	add.w	r6, r8, #2
 8005b80:	3e01      	subs	r6, #1
 8005b82:	4638      	mov	r0, r7
 8005b84:	612e      	str	r6, [r5, #16]
 8005b86:	4621      	mov	r1, r4
 8005b88:	f7ff fdd2 	bl	8005730 <_Bfree>
 8005b8c:	4628      	mov	r0, r5
 8005b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b92:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b96:	3301      	adds	r3, #1
 8005b98:	e7c1      	b.n	8005b1e <__lshift+0x4a>
 8005b9a:	3904      	subs	r1, #4
 8005b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ba4:	4298      	cmp	r0, r3
 8005ba6:	d8f9      	bhi.n	8005b9c <__lshift+0xc8>
 8005ba8:	e7ea      	b.n	8005b80 <__lshift+0xac>
 8005baa:	bf00      	nop
 8005bac:	08006d63 	.word	0x08006d63
 8005bb0:	08006dd4 	.word	0x08006dd4

08005bb4 <__mcmp>:
 8005bb4:	b530      	push	{r4, r5, lr}
 8005bb6:	6902      	ldr	r2, [r0, #16]
 8005bb8:	690c      	ldr	r4, [r1, #16]
 8005bba:	1b12      	subs	r2, r2, r4
 8005bbc:	d10e      	bne.n	8005bdc <__mcmp+0x28>
 8005bbe:	f100 0314 	add.w	r3, r0, #20
 8005bc2:	3114      	adds	r1, #20
 8005bc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005bc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005bcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005bd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005bd4:	42a5      	cmp	r5, r4
 8005bd6:	d003      	beq.n	8005be0 <__mcmp+0x2c>
 8005bd8:	d305      	bcc.n	8005be6 <__mcmp+0x32>
 8005bda:	2201      	movs	r2, #1
 8005bdc:	4610      	mov	r0, r2
 8005bde:	bd30      	pop	{r4, r5, pc}
 8005be0:	4283      	cmp	r3, r0
 8005be2:	d3f3      	bcc.n	8005bcc <__mcmp+0x18>
 8005be4:	e7fa      	b.n	8005bdc <__mcmp+0x28>
 8005be6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bea:	e7f7      	b.n	8005bdc <__mcmp+0x28>

08005bec <__mdiff>:
 8005bec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	4690      	mov	r8, r2
 8005bfa:	f7ff ffdb 	bl	8005bb4 <__mcmp>
 8005bfe:	1e05      	subs	r5, r0, #0
 8005c00:	d110      	bne.n	8005c24 <__mdiff+0x38>
 8005c02:	4629      	mov	r1, r5
 8005c04:	4630      	mov	r0, r6
 8005c06:	f7ff fd53 	bl	80056b0 <_Balloc>
 8005c0a:	b930      	cbnz	r0, 8005c1a <__mdiff+0x2e>
 8005c0c:	4b3a      	ldr	r3, [pc, #232]	; (8005cf8 <__mdiff+0x10c>)
 8005c0e:	4602      	mov	r2, r0
 8005c10:	f240 2132 	movw	r1, #562	; 0x232
 8005c14:	4839      	ldr	r0, [pc, #228]	; (8005cfc <__mdiff+0x110>)
 8005c16:	f000 fda1 	bl	800675c <__assert_func>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c24:	bfa4      	itt	ge
 8005c26:	4643      	movge	r3, r8
 8005c28:	46a0      	movge	r8, r4
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c30:	bfa6      	itte	ge
 8005c32:	461c      	movge	r4, r3
 8005c34:	2500      	movge	r5, #0
 8005c36:	2501      	movlt	r5, #1
 8005c38:	f7ff fd3a 	bl	80056b0 <_Balloc>
 8005c3c:	b920      	cbnz	r0, 8005c48 <__mdiff+0x5c>
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <__mdiff+0x10c>)
 8005c40:	4602      	mov	r2, r0
 8005c42:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c46:	e7e5      	b.n	8005c14 <__mdiff+0x28>
 8005c48:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c4c:	6926      	ldr	r6, [r4, #16]
 8005c4e:	60c5      	str	r5, [r0, #12]
 8005c50:	f104 0914 	add.w	r9, r4, #20
 8005c54:	f108 0514 	add.w	r5, r8, #20
 8005c58:	f100 0e14 	add.w	lr, r0, #20
 8005c5c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005c60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c64:	f108 0210 	add.w	r2, r8, #16
 8005c68:	46f2      	mov	sl, lr
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005c74:	fa1f f883 	uxth.w	r8, r3
 8005c78:	fa11 f18b 	uxtah	r1, r1, fp
 8005c7c:	0c1b      	lsrs	r3, r3, #16
 8005c7e:	eba1 0808 	sub.w	r8, r1, r8
 8005c82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005c8a:	fa1f f888 	uxth.w	r8, r8
 8005c8e:	1419      	asrs	r1, r3, #16
 8005c90:	454e      	cmp	r6, r9
 8005c92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005c96:	f84a 3b04 	str.w	r3, [sl], #4
 8005c9a:	d8e7      	bhi.n	8005c6c <__mdiff+0x80>
 8005c9c:	1b33      	subs	r3, r6, r4
 8005c9e:	3b15      	subs	r3, #21
 8005ca0:	f023 0303 	bic.w	r3, r3, #3
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	3415      	adds	r4, #21
 8005ca8:	42a6      	cmp	r6, r4
 8005caa:	bf38      	it	cc
 8005cac:	2304      	movcc	r3, #4
 8005cae:	441d      	add	r5, r3
 8005cb0:	4473      	add	r3, lr
 8005cb2:	469e      	mov	lr, r3
 8005cb4:	462e      	mov	r6, r5
 8005cb6:	4566      	cmp	r6, ip
 8005cb8:	d30e      	bcc.n	8005cd8 <__mdiff+0xec>
 8005cba:	f10c 0203 	add.w	r2, ip, #3
 8005cbe:	1b52      	subs	r2, r2, r5
 8005cc0:	f022 0203 	bic.w	r2, r2, #3
 8005cc4:	3d03      	subs	r5, #3
 8005cc6:	45ac      	cmp	ip, r5
 8005cc8:	bf38      	it	cc
 8005cca:	2200      	movcc	r2, #0
 8005ccc:	441a      	add	r2, r3
 8005cce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005cd2:	b17b      	cbz	r3, 8005cf4 <__mdiff+0x108>
 8005cd4:	6107      	str	r7, [r0, #16]
 8005cd6:	e7a3      	b.n	8005c20 <__mdiff+0x34>
 8005cd8:	f856 8b04 	ldr.w	r8, [r6], #4
 8005cdc:	fa11 f288 	uxtah	r2, r1, r8
 8005ce0:	1414      	asrs	r4, r2, #16
 8005ce2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ce6:	b292      	uxth	r2, r2
 8005ce8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005cec:	f84e 2b04 	str.w	r2, [lr], #4
 8005cf0:	1421      	asrs	r1, r4, #16
 8005cf2:	e7e0      	b.n	8005cb6 <__mdiff+0xca>
 8005cf4:	3f01      	subs	r7, #1
 8005cf6:	e7ea      	b.n	8005cce <__mdiff+0xe2>
 8005cf8:	08006d63 	.word	0x08006d63
 8005cfc:	08006dd4 	.word	0x08006dd4

08005d00 <__d2b>:
 8005d00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d04:	4689      	mov	r9, r1
 8005d06:	2101      	movs	r1, #1
 8005d08:	ec57 6b10 	vmov	r6, r7, d0
 8005d0c:	4690      	mov	r8, r2
 8005d0e:	f7ff fccf 	bl	80056b0 <_Balloc>
 8005d12:	4604      	mov	r4, r0
 8005d14:	b930      	cbnz	r0, 8005d24 <__d2b+0x24>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <__d2b+0xb0>)
 8005d1a:	4826      	ldr	r0, [pc, #152]	; (8005db4 <__d2b+0xb4>)
 8005d1c:	f240 310a 	movw	r1, #778	; 0x30a
 8005d20:	f000 fd1c 	bl	800675c <__assert_func>
 8005d24:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d2c:	bb35      	cbnz	r5, 8005d7c <__d2b+0x7c>
 8005d2e:	2e00      	cmp	r6, #0
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	d028      	beq.n	8005d86 <__d2b+0x86>
 8005d34:	4668      	mov	r0, sp
 8005d36:	9600      	str	r6, [sp, #0]
 8005d38:	f7ff fd82 	bl	8005840 <__lo0bits>
 8005d3c:	9900      	ldr	r1, [sp, #0]
 8005d3e:	b300      	cbz	r0, 8005d82 <__d2b+0x82>
 8005d40:	9a01      	ldr	r2, [sp, #4]
 8005d42:	f1c0 0320 	rsb	r3, r0, #32
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	40c2      	lsrs	r2, r0
 8005d4e:	6163      	str	r3, [r4, #20]
 8005d50:	9201      	str	r2, [sp, #4]
 8005d52:	9b01      	ldr	r3, [sp, #4]
 8005d54:	61a3      	str	r3, [r4, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf14      	ite	ne
 8005d5a:	2202      	movne	r2, #2
 8005d5c:	2201      	moveq	r2, #1
 8005d5e:	6122      	str	r2, [r4, #16]
 8005d60:	b1d5      	cbz	r5, 8005d98 <__d2b+0x98>
 8005d62:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d66:	4405      	add	r5, r0
 8005d68:	f8c9 5000 	str.w	r5, [r9]
 8005d6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d70:	f8c8 0000 	str.w	r0, [r8]
 8005d74:	4620      	mov	r0, r4
 8005d76:	b003      	add	sp, #12
 8005d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d80:	e7d5      	b.n	8005d2e <__d2b+0x2e>
 8005d82:	6161      	str	r1, [r4, #20]
 8005d84:	e7e5      	b.n	8005d52 <__d2b+0x52>
 8005d86:	a801      	add	r0, sp, #4
 8005d88:	f7ff fd5a 	bl	8005840 <__lo0bits>
 8005d8c:	9b01      	ldr	r3, [sp, #4]
 8005d8e:	6163      	str	r3, [r4, #20]
 8005d90:	2201      	movs	r2, #1
 8005d92:	6122      	str	r2, [r4, #16]
 8005d94:	3020      	adds	r0, #32
 8005d96:	e7e3      	b.n	8005d60 <__d2b+0x60>
 8005d98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005da0:	f8c9 0000 	str.w	r0, [r9]
 8005da4:	6918      	ldr	r0, [r3, #16]
 8005da6:	f7ff fd2b 	bl	8005800 <__hi0bits>
 8005daa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005dae:	e7df      	b.n	8005d70 <__d2b+0x70>
 8005db0:	08006d63 	.word	0x08006d63
 8005db4:	08006dd4 	.word	0x08006dd4

08005db8 <_calloc_r>:
 8005db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dba:	fba1 2402 	umull	r2, r4, r1, r2
 8005dbe:	b94c      	cbnz	r4, 8005dd4 <_calloc_r+0x1c>
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	9201      	str	r2, [sp, #4]
 8005dc4:	f000 f87a 	bl	8005ebc <_malloc_r>
 8005dc8:	9a01      	ldr	r2, [sp, #4]
 8005dca:	4605      	mov	r5, r0
 8005dcc:	b930      	cbnz	r0, 8005ddc <_calloc_r+0x24>
 8005dce:	4628      	mov	r0, r5
 8005dd0:	b003      	add	sp, #12
 8005dd2:	bd30      	pop	{r4, r5, pc}
 8005dd4:	220c      	movs	r2, #12
 8005dd6:	6002      	str	r2, [r0, #0]
 8005dd8:	2500      	movs	r5, #0
 8005dda:	e7f8      	b.n	8005dce <_calloc_r+0x16>
 8005ddc:	4621      	mov	r1, r4
 8005dde:	f7fe f83d 	bl	8003e5c <memset>
 8005de2:	e7f4      	b.n	8005dce <_calloc_r+0x16>

08005de4 <_free_r>:
 8005de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005de6:	2900      	cmp	r1, #0
 8005de8:	d044      	beq.n	8005e74 <_free_r+0x90>
 8005dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dee:	9001      	str	r0, [sp, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f1a1 0404 	sub.w	r4, r1, #4
 8005df6:	bfb8      	it	lt
 8005df8:	18e4      	addlt	r4, r4, r3
 8005dfa:	f000 fe55 	bl	8006aa8 <__malloc_lock>
 8005dfe:	4a1e      	ldr	r2, [pc, #120]	; (8005e78 <_free_r+0x94>)
 8005e00:	9801      	ldr	r0, [sp, #4]
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	b933      	cbnz	r3, 8005e14 <_free_r+0x30>
 8005e06:	6063      	str	r3, [r4, #4]
 8005e08:	6014      	str	r4, [r2, #0]
 8005e0a:	b003      	add	sp, #12
 8005e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e10:	f000 be50 	b.w	8006ab4 <__malloc_unlock>
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	d908      	bls.n	8005e2a <_free_r+0x46>
 8005e18:	6825      	ldr	r5, [r4, #0]
 8005e1a:	1961      	adds	r1, r4, r5
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	bf01      	itttt	eq
 8005e20:	6819      	ldreq	r1, [r3, #0]
 8005e22:	685b      	ldreq	r3, [r3, #4]
 8005e24:	1949      	addeq	r1, r1, r5
 8005e26:	6021      	streq	r1, [r4, #0]
 8005e28:	e7ed      	b.n	8005e06 <_free_r+0x22>
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	b10b      	cbz	r3, 8005e34 <_free_r+0x50>
 8005e30:	42a3      	cmp	r3, r4
 8005e32:	d9fa      	bls.n	8005e2a <_free_r+0x46>
 8005e34:	6811      	ldr	r1, [r2, #0]
 8005e36:	1855      	adds	r5, r2, r1
 8005e38:	42a5      	cmp	r5, r4
 8005e3a:	d10b      	bne.n	8005e54 <_free_r+0x70>
 8005e3c:	6824      	ldr	r4, [r4, #0]
 8005e3e:	4421      	add	r1, r4
 8005e40:	1854      	adds	r4, r2, r1
 8005e42:	42a3      	cmp	r3, r4
 8005e44:	6011      	str	r1, [r2, #0]
 8005e46:	d1e0      	bne.n	8005e0a <_free_r+0x26>
 8005e48:	681c      	ldr	r4, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	6053      	str	r3, [r2, #4]
 8005e4e:	4421      	add	r1, r4
 8005e50:	6011      	str	r1, [r2, #0]
 8005e52:	e7da      	b.n	8005e0a <_free_r+0x26>
 8005e54:	d902      	bls.n	8005e5c <_free_r+0x78>
 8005e56:	230c      	movs	r3, #12
 8005e58:	6003      	str	r3, [r0, #0]
 8005e5a:	e7d6      	b.n	8005e0a <_free_r+0x26>
 8005e5c:	6825      	ldr	r5, [r4, #0]
 8005e5e:	1961      	adds	r1, r4, r5
 8005e60:	428b      	cmp	r3, r1
 8005e62:	bf04      	itt	eq
 8005e64:	6819      	ldreq	r1, [r3, #0]
 8005e66:	685b      	ldreq	r3, [r3, #4]
 8005e68:	6063      	str	r3, [r4, #4]
 8005e6a:	bf04      	itt	eq
 8005e6c:	1949      	addeq	r1, r1, r5
 8005e6e:	6021      	streq	r1, [r4, #0]
 8005e70:	6054      	str	r4, [r2, #4]
 8005e72:	e7ca      	b.n	8005e0a <_free_r+0x26>
 8005e74:	b003      	add	sp, #12
 8005e76:	bd30      	pop	{r4, r5, pc}
 8005e78:	20004b9c 	.word	0x20004b9c

08005e7c <sbrk_aligned>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	4e0e      	ldr	r6, [pc, #56]	; (8005eb8 <sbrk_aligned+0x3c>)
 8005e80:	460c      	mov	r4, r1
 8005e82:	6831      	ldr	r1, [r6, #0]
 8005e84:	4605      	mov	r5, r0
 8005e86:	b911      	cbnz	r1, 8005e8e <sbrk_aligned+0x12>
 8005e88:	f000 fb42 	bl	8006510 <_sbrk_r>
 8005e8c:	6030      	str	r0, [r6, #0]
 8005e8e:	4621      	mov	r1, r4
 8005e90:	4628      	mov	r0, r5
 8005e92:	f000 fb3d 	bl	8006510 <_sbrk_r>
 8005e96:	1c43      	adds	r3, r0, #1
 8005e98:	d00a      	beq.n	8005eb0 <sbrk_aligned+0x34>
 8005e9a:	1cc4      	adds	r4, r0, #3
 8005e9c:	f024 0403 	bic.w	r4, r4, #3
 8005ea0:	42a0      	cmp	r0, r4
 8005ea2:	d007      	beq.n	8005eb4 <sbrk_aligned+0x38>
 8005ea4:	1a21      	subs	r1, r4, r0
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f000 fb32 	bl	8006510 <_sbrk_r>
 8005eac:	3001      	adds	r0, #1
 8005eae:	d101      	bne.n	8005eb4 <sbrk_aligned+0x38>
 8005eb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}
 8005eb8:	20004ba0 	.word	0x20004ba0

08005ebc <_malloc_r>:
 8005ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec0:	1ccd      	adds	r5, r1, #3
 8005ec2:	f025 0503 	bic.w	r5, r5, #3
 8005ec6:	3508      	adds	r5, #8
 8005ec8:	2d0c      	cmp	r5, #12
 8005eca:	bf38      	it	cc
 8005ecc:	250c      	movcc	r5, #12
 8005ece:	2d00      	cmp	r5, #0
 8005ed0:	4607      	mov	r7, r0
 8005ed2:	db01      	blt.n	8005ed8 <_malloc_r+0x1c>
 8005ed4:	42a9      	cmp	r1, r5
 8005ed6:	d905      	bls.n	8005ee4 <_malloc_r+0x28>
 8005ed8:	230c      	movs	r3, #12
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	2600      	movs	r6, #0
 8005ede:	4630      	mov	r0, r6
 8005ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee4:	4e2e      	ldr	r6, [pc, #184]	; (8005fa0 <_malloc_r+0xe4>)
 8005ee6:	f000 fddf 	bl	8006aa8 <__malloc_lock>
 8005eea:	6833      	ldr	r3, [r6, #0]
 8005eec:	461c      	mov	r4, r3
 8005eee:	bb34      	cbnz	r4, 8005f3e <_malloc_r+0x82>
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	f7ff ffc2 	bl	8005e7c <sbrk_aligned>
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	4604      	mov	r4, r0
 8005efc:	d14d      	bne.n	8005f9a <_malloc_r+0xde>
 8005efe:	6834      	ldr	r4, [r6, #0]
 8005f00:	4626      	mov	r6, r4
 8005f02:	2e00      	cmp	r6, #0
 8005f04:	d140      	bne.n	8005f88 <_malloc_r+0xcc>
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	eb04 0803 	add.w	r8, r4, r3
 8005f10:	f000 fafe 	bl	8006510 <_sbrk_r>
 8005f14:	4580      	cmp	r8, r0
 8005f16:	d13a      	bne.n	8005f8e <_malloc_r+0xd2>
 8005f18:	6821      	ldr	r1, [r4, #0]
 8005f1a:	3503      	adds	r5, #3
 8005f1c:	1a6d      	subs	r5, r5, r1
 8005f1e:	f025 0503 	bic.w	r5, r5, #3
 8005f22:	3508      	adds	r5, #8
 8005f24:	2d0c      	cmp	r5, #12
 8005f26:	bf38      	it	cc
 8005f28:	250c      	movcc	r5, #12
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	f7ff ffa5 	bl	8005e7c <sbrk_aligned>
 8005f32:	3001      	adds	r0, #1
 8005f34:	d02b      	beq.n	8005f8e <_malloc_r+0xd2>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	442b      	add	r3, r5
 8005f3a:	6023      	str	r3, [r4, #0]
 8005f3c:	e00e      	b.n	8005f5c <_malloc_r+0xa0>
 8005f3e:	6822      	ldr	r2, [r4, #0]
 8005f40:	1b52      	subs	r2, r2, r5
 8005f42:	d41e      	bmi.n	8005f82 <_malloc_r+0xc6>
 8005f44:	2a0b      	cmp	r2, #11
 8005f46:	d916      	bls.n	8005f76 <_malloc_r+0xba>
 8005f48:	1961      	adds	r1, r4, r5
 8005f4a:	42a3      	cmp	r3, r4
 8005f4c:	6025      	str	r5, [r4, #0]
 8005f4e:	bf18      	it	ne
 8005f50:	6059      	strne	r1, [r3, #4]
 8005f52:	6863      	ldr	r3, [r4, #4]
 8005f54:	bf08      	it	eq
 8005f56:	6031      	streq	r1, [r6, #0]
 8005f58:	5162      	str	r2, [r4, r5]
 8005f5a:	604b      	str	r3, [r1, #4]
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	f104 060b 	add.w	r6, r4, #11
 8005f62:	f000 fda7 	bl	8006ab4 <__malloc_unlock>
 8005f66:	f026 0607 	bic.w	r6, r6, #7
 8005f6a:	1d23      	adds	r3, r4, #4
 8005f6c:	1af2      	subs	r2, r6, r3
 8005f6e:	d0b6      	beq.n	8005ede <_malloc_r+0x22>
 8005f70:	1b9b      	subs	r3, r3, r6
 8005f72:	50a3      	str	r3, [r4, r2]
 8005f74:	e7b3      	b.n	8005ede <_malloc_r+0x22>
 8005f76:	6862      	ldr	r2, [r4, #4]
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	bf0c      	ite	eq
 8005f7c:	6032      	streq	r2, [r6, #0]
 8005f7e:	605a      	strne	r2, [r3, #4]
 8005f80:	e7ec      	b.n	8005f5c <_malloc_r+0xa0>
 8005f82:	4623      	mov	r3, r4
 8005f84:	6864      	ldr	r4, [r4, #4]
 8005f86:	e7b2      	b.n	8005eee <_malloc_r+0x32>
 8005f88:	4634      	mov	r4, r6
 8005f8a:	6876      	ldr	r6, [r6, #4]
 8005f8c:	e7b9      	b.n	8005f02 <_malloc_r+0x46>
 8005f8e:	230c      	movs	r3, #12
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	4638      	mov	r0, r7
 8005f94:	f000 fd8e 	bl	8006ab4 <__malloc_unlock>
 8005f98:	e7a1      	b.n	8005ede <_malloc_r+0x22>
 8005f9a:	6025      	str	r5, [r4, #0]
 8005f9c:	e7de      	b.n	8005f5c <_malloc_r+0xa0>
 8005f9e:	bf00      	nop
 8005fa0:	20004b9c 	.word	0x20004b9c

08005fa4 <__ssputs_r>:
 8005fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa8:	688e      	ldr	r6, [r1, #8]
 8005faa:	429e      	cmp	r6, r3
 8005fac:	4682      	mov	sl, r0
 8005fae:	460c      	mov	r4, r1
 8005fb0:	4690      	mov	r8, r2
 8005fb2:	461f      	mov	r7, r3
 8005fb4:	d838      	bhi.n	8006028 <__ssputs_r+0x84>
 8005fb6:	898a      	ldrh	r2, [r1, #12]
 8005fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fbc:	d032      	beq.n	8006024 <__ssputs_r+0x80>
 8005fbe:	6825      	ldr	r5, [r4, #0]
 8005fc0:	6909      	ldr	r1, [r1, #16]
 8005fc2:	eba5 0901 	sub.w	r9, r5, r1
 8005fc6:	6965      	ldr	r5, [r4, #20]
 8005fc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	444b      	add	r3, r9
 8005fd4:	106d      	asrs	r5, r5, #1
 8005fd6:	429d      	cmp	r5, r3
 8005fd8:	bf38      	it	cc
 8005fda:	461d      	movcc	r5, r3
 8005fdc:	0553      	lsls	r3, r2, #21
 8005fde:	d531      	bpl.n	8006044 <__ssputs_r+0xa0>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7ff ff6b 	bl	8005ebc <_malloc_r>
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	b950      	cbnz	r0, 8006000 <__ssputs_r+0x5c>
 8005fea:	230c      	movs	r3, #12
 8005fec:	f8ca 3000 	str.w	r3, [sl]
 8005ff0:	89a3      	ldrh	r3, [r4, #12]
 8005ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006000:	6921      	ldr	r1, [r4, #16]
 8006002:	464a      	mov	r2, r9
 8006004:	f7fd ff1c 	bl	8003e40 <memcpy>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800600e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006012:	81a3      	strh	r3, [r4, #12]
 8006014:	6126      	str	r6, [r4, #16]
 8006016:	6165      	str	r5, [r4, #20]
 8006018:	444e      	add	r6, r9
 800601a:	eba5 0509 	sub.w	r5, r5, r9
 800601e:	6026      	str	r6, [r4, #0]
 8006020:	60a5      	str	r5, [r4, #8]
 8006022:	463e      	mov	r6, r7
 8006024:	42be      	cmp	r6, r7
 8006026:	d900      	bls.n	800602a <__ssputs_r+0x86>
 8006028:	463e      	mov	r6, r7
 800602a:	6820      	ldr	r0, [r4, #0]
 800602c:	4632      	mov	r2, r6
 800602e:	4641      	mov	r1, r8
 8006030:	f000 fd20 	bl	8006a74 <memmove>
 8006034:	68a3      	ldr	r3, [r4, #8]
 8006036:	1b9b      	subs	r3, r3, r6
 8006038:	60a3      	str	r3, [r4, #8]
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	4433      	add	r3, r6
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	2000      	movs	r0, #0
 8006042:	e7db      	b.n	8005ffc <__ssputs_r+0x58>
 8006044:	462a      	mov	r2, r5
 8006046:	f000 fd3b 	bl	8006ac0 <_realloc_r>
 800604a:	4606      	mov	r6, r0
 800604c:	2800      	cmp	r0, #0
 800604e:	d1e1      	bne.n	8006014 <__ssputs_r+0x70>
 8006050:	6921      	ldr	r1, [r4, #16]
 8006052:	4650      	mov	r0, sl
 8006054:	f7ff fec6 	bl	8005de4 <_free_r>
 8006058:	e7c7      	b.n	8005fea <__ssputs_r+0x46>
	...

0800605c <_svfiprintf_r>:
 800605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006060:	4698      	mov	r8, r3
 8006062:	898b      	ldrh	r3, [r1, #12]
 8006064:	061b      	lsls	r3, r3, #24
 8006066:	b09d      	sub	sp, #116	; 0x74
 8006068:	4607      	mov	r7, r0
 800606a:	460d      	mov	r5, r1
 800606c:	4614      	mov	r4, r2
 800606e:	d50e      	bpl.n	800608e <_svfiprintf_r+0x32>
 8006070:	690b      	ldr	r3, [r1, #16]
 8006072:	b963      	cbnz	r3, 800608e <_svfiprintf_r+0x32>
 8006074:	2140      	movs	r1, #64	; 0x40
 8006076:	f7ff ff21 	bl	8005ebc <_malloc_r>
 800607a:	6028      	str	r0, [r5, #0]
 800607c:	6128      	str	r0, [r5, #16]
 800607e:	b920      	cbnz	r0, 800608a <_svfiprintf_r+0x2e>
 8006080:	230c      	movs	r3, #12
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006088:	e0d1      	b.n	800622e <_svfiprintf_r+0x1d2>
 800608a:	2340      	movs	r3, #64	; 0x40
 800608c:	616b      	str	r3, [r5, #20]
 800608e:	2300      	movs	r3, #0
 8006090:	9309      	str	r3, [sp, #36]	; 0x24
 8006092:	2320      	movs	r3, #32
 8006094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006098:	f8cd 800c 	str.w	r8, [sp, #12]
 800609c:	2330      	movs	r3, #48	; 0x30
 800609e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006248 <_svfiprintf_r+0x1ec>
 80060a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060a6:	f04f 0901 	mov.w	r9, #1
 80060aa:	4623      	mov	r3, r4
 80060ac:	469a      	mov	sl, r3
 80060ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060b2:	b10a      	cbz	r2, 80060b8 <_svfiprintf_r+0x5c>
 80060b4:	2a25      	cmp	r2, #37	; 0x25
 80060b6:	d1f9      	bne.n	80060ac <_svfiprintf_r+0x50>
 80060b8:	ebba 0b04 	subs.w	fp, sl, r4
 80060bc:	d00b      	beq.n	80060d6 <_svfiprintf_r+0x7a>
 80060be:	465b      	mov	r3, fp
 80060c0:	4622      	mov	r2, r4
 80060c2:	4629      	mov	r1, r5
 80060c4:	4638      	mov	r0, r7
 80060c6:	f7ff ff6d 	bl	8005fa4 <__ssputs_r>
 80060ca:	3001      	adds	r0, #1
 80060cc:	f000 80aa 	beq.w	8006224 <_svfiprintf_r+0x1c8>
 80060d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060d2:	445a      	add	r2, fp
 80060d4:	9209      	str	r2, [sp, #36]	; 0x24
 80060d6:	f89a 3000 	ldrb.w	r3, [sl]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 80a2 	beq.w	8006224 <_svfiprintf_r+0x1c8>
 80060e0:	2300      	movs	r3, #0
 80060e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060ea:	f10a 0a01 	add.w	sl, sl, #1
 80060ee:	9304      	str	r3, [sp, #16]
 80060f0:	9307      	str	r3, [sp, #28]
 80060f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060f6:	931a      	str	r3, [sp, #104]	; 0x68
 80060f8:	4654      	mov	r4, sl
 80060fa:	2205      	movs	r2, #5
 80060fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006100:	4851      	ldr	r0, [pc, #324]	; (8006248 <_svfiprintf_r+0x1ec>)
 8006102:	f7fa f875 	bl	80001f0 <memchr>
 8006106:	9a04      	ldr	r2, [sp, #16]
 8006108:	b9d8      	cbnz	r0, 8006142 <_svfiprintf_r+0xe6>
 800610a:	06d0      	lsls	r0, r2, #27
 800610c:	bf44      	itt	mi
 800610e:	2320      	movmi	r3, #32
 8006110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006114:	0711      	lsls	r1, r2, #28
 8006116:	bf44      	itt	mi
 8006118:	232b      	movmi	r3, #43	; 0x2b
 800611a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800611e:	f89a 3000 	ldrb.w	r3, [sl]
 8006122:	2b2a      	cmp	r3, #42	; 0x2a
 8006124:	d015      	beq.n	8006152 <_svfiprintf_r+0xf6>
 8006126:	9a07      	ldr	r2, [sp, #28]
 8006128:	4654      	mov	r4, sl
 800612a:	2000      	movs	r0, #0
 800612c:	f04f 0c0a 	mov.w	ip, #10
 8006130:	4621      	mov	r1, r4
 8006132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006136:	3b30      	subs	r3, #48	; 0x30
 8006138:	2b09      	cmp	r3, #9
 800613a:	d94e      	bls.n	80061da <_svfiprintf_r+0x17e>
 800613c:	b1b0      	cbz	r0, 800616c <_svfiprintf_r+0x110>
 800613e:	9207      	str	r2, [sp, #28]
 8006140:	e014      	b.n	800616c <_svfiprintf_r+0x110>
 8006142:	eba0 0308 	sub.w	r3, r0, r8
 8006146:	fa09 f303 	lsl.w	r3, r9, r3
 800614a:	4313      	orrs	r3, r2
 800614c:	9304      	str	r3, [sp, #16]
 800614e:	46a2      	mov	sl, r4
 8006150:	e7d2      	b.n	80060f8 <_svfiprintf_r+0x9c>
 8006152:	9b03      	ldr	r3, [sp, #12]
 8006154:	1d19      	adds	r1, r3, #4
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	9103      	str	r1, [sp, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	bfbb      	ittet	lt
 800615e:	425b      	neglt	r3, r3
 8006160:	f042 0202 	orrlt.w	r2, r2, #2
 8006164:	9307      	strge	r3, [sp, #28]
 8006166:	9307      	strlt	r3, [sp, #28]
 8006168:	bfb8      	it	lt
 800616a:	9204      	strlt	r2, [sp, #16]
 800616c:	7823      	ldrb	r3, [r4, #0]
 800616e:	2b2e      	cmp	r3, #46	; 0x2e
 8006170:	d10c      	bne.n	800618c <_svfiprintf_r+0x130>
 8006172:	7863      	ldrb	r3, [r4, #1]
 8006174:	2b2a      	cmp	r3, #42	; 0x2a
 8006176:	d135      	bne.n	80061e4 <_svfiprintf_r+0x188>
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	1d1a      	adds	r2, r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	9203      	str	r2, [sp, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	bfb8      	it	lt
 8006184:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006188:	3402      	adds	r4, #2
 800618a:	9305      	str	r3, [sp, #20]
 800618c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006258 <_svfiprintf_r+0x1fc>
 8006190:	7821      	ldrb	r1, [r4, #0]
 8006192:	2203      	movs	r2, #3
 8006194:	4650      	mov	r0, sl
 8006196:	f7fa f82b 	bl	80001f0 <memchr>
 800619a:	b140      	cbz	r0, 80061ae <_svfiprintf_r+0x152>
 800619c:	2340      	movs	r3, #64	; 0x40
 800619e:	eba0 000a 	sub.w	r0, r0, sl
 80061a2:	fa03 f000 	lsl.w	r0, r3, r0
 80061a6:	9b04      	ldr	r3, [sp, #16]
 80061a8:	4303      	orrs	r3, r0
 80061aa:	3401      	adds	r4, #1
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b2:	4826      	ldr	r0, [pc, #152]	; (800624c <_svfiprintf_r+0x1f0>)
 80061b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061b8:	2206      	movs	r2, #6
 80061ba:	f7fa f819 	bl	80001f0 <memchr>
 80061be:	2800      	cmp	r0, #0
 80061c0:	d038      	beq.n	8006234 <_svfiprintf_r+0x1d8>
 80061c2:	4b23      	ldr	r3, [pc, #140]	; (8006250 <_svfiprintf_r+0x1f4>)
 80061c4:	bb1b      	cbnz	r3, 800620e <_svfiprintf_r+0x1b2>
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	3307      	adds	r3, #7
 80061ca:	f023 0307 	bic.w	r3, r3, #7
 80061ce:	3308      	adds	r3, #8
 80061d0:	9303      	str	r3, [sp, #12]
 80061d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d4:	4433      	add	r3, r6
 80061d6:	9309      	str	r3, [sp, #36]	; 0x24
 80061d8:	e767      	b.n	80060aa <_svfiprintf_r+0x4e>
 80061da:	fb0c 3202 	mla	r2, ip, r2, r3
 80061de:	460c      	mov	r4, r1
 80061e0:	2001      	movs	r0, #1
 80061e2:	e7a5      	b.n	8006130 <_svfiprintf_r+0xd4>
 80061e4:	2300      	movs	r3, #0
 80061e6:	3401      	adds	r4, #1
 80061e8:	9305      	str	r3, [sp, #20]
 80061ea:	4619      	mov	r1, r3
 80061ec:	f04f 0c0a 	mov.w	ip, #10
 80061f0:	4620      	mov	r0, r4
 80061f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061f6:	3a30      	subs	r2, #48	; 0x30
 80061f8:	2a09      	cmp	r2, #9
 80061fa:	d903      	bls.n	8006204 <_svfiprintf_r+0x1a8>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0c5      	beq.n	800618c <_svfiprintf_r+0x130>
 8006200:	9105      	str	r1, [sp, #20]
 8006202:	e7c3      	b.n	800618c <_svfiprintf_r+0x130>
 8006204:	fb0c 2101 	mla	r1, ip, r1, r2
 8006208:	4604      	mov	r4, r0
 800620a:	2301      	movs	r3, #1
 800620c:	e7f0      	b.n	80061f0 <_svfiprintf_r+0x194>
 800620e:	ab03      	add	r3, sp, #12
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	462a      	mov	r2, r5
 8006214:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <_svfiprintf_r+0x1f8>)
 8006216:	a904      	add	r1, sp, #16
 8006218:	4638      	mov	r0, r7
 800621a:	f7fd fec7 	bl	8003fac <_printf_float>
 800621e:	1c42      	adds	r2, r0, #1
 8006220:	4606      	mov	r6, r0
 8006222:	d1d6      	bne.n	80061d2 <_svfiprintf_r+0x176>
 8006224:	89ab      	ldrh	r3, [r5, #12]
 8006226:	065b      	lsls	r3, r3, #25
 8006228:	f53f af2c 	bmi.w	8006084 <_svfiprintf_r+0x28>
 800622c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800622e:	b01d      	add	sp, #116	; 0x74
 8006230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006234:	ab03      	add	r3, sp, #12
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	462a      	mov	r2, r5
 800623a:	4b06      	ldr	r3, [pc, #24]	; (8006254 <_svfiprintf_r+0x1f8>)
 800623c:	a904      	add	r1, sp, #16
 800623e:	4638      	mov	r0, r7
 8006240:	f7fe f958 	bl	80044f4 <_printf_i>
 8006244:	e7eb      	b.n	800621e <_svfiprintf_r+0x1c2>
 8006246:	bf00      	nop
 8006248:	08006f2c 	.word	0x08006f2c
 800624c:	08006f36 	.word	0x08006f36
 8006250:	08003fad 	.word	0x08003fad
 8006254:	08005fa5 	.word	0x08005fa5
 8006258:	08006f32 	.word	0x08006f32

0800625c <__sfputc_r>:
 800625c:	6893      	ldr	r3, [r2, #8]
 800625e:	3b01      	subs	r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	b410      	push	{r4}
 8006264:	6093      	str	r3, [r2, #8]
 8006266:	da08      	bge.n	800627a <__sfputc_r+0x1e>
 8006268:	6994      	ldr	r4, [r2, #24]
 800626a:	42a3      	cmp	r3, r4
 800626c:	db01      	blt.n	8006272 <__sfputc_r+0x16>
 800626e:	290a      	cmp	r1, #10
 8006270:	d103      	bne.n	800627a <__sfputc_r+0x1e>
 8006272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006276:	f000 b99f 	b.w	80065b8 <__swbuf_r>
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	1c58      	adds	r0, r3, #1
 800627e:	6010      	str	r0, [r2, #0]
 8006280:	7019      	strb	r1, [r3, #0]
 8006282:	4608      	mov	r0, r1
 8006284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006288:	4770      	bx	lr

0800628a <__sfputs_r>:
 800628a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628c:	4606      	mov	r6, r0
 800628e:	460f      	mov	r7, r1
 8006290:	4614      	mov	r4, r2
 8006292:	18d5      	adds	r5, r2, r3
 8006294:	42ac      	cmp	r4, r5
 8006296:	d101      	bne.n	800629c <__sfputs_r+0x12>
 8006298:	2000      	movs	r0, #0
 800629a:	e007      	b.n	80062ac <__sfputs_r+0x22>
 800629c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062a0:	463a      	mov	r2, r7
 80062a2:	4630      	mov	r0, r6
 80062a4:	f7ff ffda 	bl	800625c <__sfputc_r>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d1f3      	bne.n	8006294 <__sfputs_r+0xa>
 80062ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062b0 <_vfiprintf_r>:
 80062b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b4:	460d      	mov	r5, r1
 80062b6:	b09d      	sub	sp, #116	; 0x74
 80062b8:	4614      	mov	r4, r2
 80062ba:	4698      	mov	r8, r3
 80062bc:	4606      	mov	r6, r0
 80062be:	b118      	cbz	r0, 80062c8 <_vfiprintf_r+0x18>
 80062c0:	6983      	ldr	r3, [r0, #24]
 80062c2:	b90b      	cbnz	r3, 80062c8 <_vfiprintf_r+0x18>
 80062c4:	f7ff f946 	bl	8005554 <__sinit>
 80062c8:	4b89      	ldr	r3, [pc, #548]	; (80064f0 <_vfiprintf_r+0x240>)
 80062ca:	429d      	cmp	r5, r3
 80062cc:	d11b      	bne.n	8006306 <_vfiprintf_r+0x56>
 80062ce:	6875      	ldr	r5, [r6, #4]
 80062d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062d2:	07d9      	lsls	r1, r3, #31
 80062d4:	d405      	bmi.n	80062e2 <_vfiprintf_r+0x32>
 80062d6:	89ab      	ldrh	r3, [r5, #12]
 80062d8:	059a      	lsls	r2, r3, #22
 80062da:	d402      	bmi.n	80062e2 <_vfiprintf_r+0x32>
 80062dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062de:	f7ff f9dc 	bl	800569a <__retarget_lock_acquire_recursive>
 80062e2:	89ab      	ldrh	r3, [r5, #12]
 80062e4:	071b      	lsls	r3, r3, #28
 80062e6:	d501      	bpl.n	80062ec <_vfiprintf_r+0x3c>
 80062e8:	692b      	ldr	r3, [r5, #16]
 80062ea:	b9eb      	cbnz	r3, 8006328 <_vfiprintf_r+0x78>
 80062ec:	4629      	mov	r1, r5
 80062ee:	4630      	mov	r0, r6
 80062f0:	f000 f9c6 	bl	8006680 <__swsetup_r>
 80062f4:	b1c0      	cbz	r0, 8006328 <_vfiprintf_r+0x78>
 80062f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062f8:	07dc      	lsls	r4, r3, #31
 80062fa:	d50e      	bpl.n	800631a <_vfiprintf_r+0x6a>
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006300:	b01d      	add	sp, #116	; 0x74
 8006302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006306:	4b7b      	ldr	r3, [pc, #492]	; (80064f4 <_vfiprintf_r+0x244>)
 8006308:	429d      	cmp	r5, r3
 800630a:	d101      	bne.n	8006310 <_vfiprintf_r+0x60>
 800630c:	68b5      	ldr	r5, [r6, #8]
 800630e:	e7df      	b.n	80062d0 <_vfiprintf_r+0x20>
 8006310:	4b79      	ldr	r3, [pc, #484]	; (80064f8 <_vfiprintf_r+0x248>)
 8006312:	429d      	cmp	r5, r3
 8006314:	bf08      	it	eq
 8006316:	68f5      	ldreq	r5, [r6, #12]
 8006318:	e7da      	b.n	80062d0 <_vfiprintf_r+0x20>
 800631a:	89ab      	ldrh	r3, [r5, #12]
 800631c:	0598      	lsls	r0, r3, #22
 800631e:	d4ed      	bmi.n	80062fc <_vfiprintf_r+0x4c>
 8006320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006322:	f7ff f9bb 	bl	800569c <__retarget_lock_release_recursive>
 8006326:	e7e9      	b.n	80062fc <_vfiprintf_r+0x4c>
 8006328:	2300      	movs	r3, #0
 800632a:	9309      	str	r3, [sp, #36]	; 0x24
 800632c:	2320      	movs	r3, #32
 800632e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006332:	f8cd 800c 	str.w	r8, [sp, #12]
 8006336:	2330      	movs	r3, #48	; 0x30
 8006338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80064fc <_vfiprintf_r+0x24c>
 800633c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006340:	f04f 0901 	mov.w	r9, #1
 8006344:	4623      	mov	r3, r4
 8006346:	469a      	mov	sl, r3
 8006348:	f813 2b01 	ldrb.w	r2, [r3], #1
 800634c:	b10a      	cbz	r2, 8006352 <_vfiprintf_r+0xa2>
 800634e:	2a25      	cmp	r2, #37	; 0x25
 8006350:	d1f9      	bne.n	8006346 <_vfiprintf_r+0x96>
 8006352:	ebba 0b04 	subs.w	fp, sl, r4
 8006356:	d00b      	beq.n	8006370 <_vfiprintf_r+0xc0>
 8006358:	465b      	mov	r3, fp
 800635a:	4622      	mov	r2, r4
 800635c:	4629      	mov	r1, r5
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff ff93 	bl	800628a <__sfputs_r>
 8006364:	3001      	adds	r0, #1
 8006366:	f000 80aa 	beq.w	80064be <_vfiprintf_r+0x20e>
 800636a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800636c:	445a      	add	r2, fp
 800636e:	9209      	str	r2, [sp, #36]	; 0x24
 8006370:	f89a 3000 	ldrb.w	r3, [sl]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 80a2 	beq.w	80064be <_vfiprintf_r+0x20e>
 800637a:	2300      	movs	r3, #0
 800637c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006384:	f10a 0a01 	add.w	sl, sl, #1
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	9307      	str	r3, [sp, #28]
 800638c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006390:	931a      	str	r3, [sp, #104]	; 0x68
 8006392:	4654      	mov	r4, sl
 8006394:	2205      	movs	r2, #5
 8006396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800639a:	4858      	ldr	r0, [pc, #352]	; (80064fc <_vfiprintf_r+0x24c>)
 800639c:	f7f9 ff28 	bl	80001f0 <memchr>
 80063a0:	9a04      	ldr	r2, [sp, #16]
 80063a2:	b9d8      	cbnz	r0, 80063dc <_vfiprintf_r+0x12c>
 80063a4:	06d1      	lsls	r1, r2, #27
 80063a6:	bf44      	itt	mi
 80063a8:	2320      	movmi	r3, #32
 80063aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063ae:	0713      	lsls	r3, r2, #28
 80063b0:	bf44      	itt	mi
 80063b2:	232b      	movmi	r3, #43	; 0x2b
 80063b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063b8:	f89a 3000 	ldrb.w	r3, [sl]
 80063bc:	2b2a      	cmp	r3, #42	; 0x2a
 80063be:	d015      	beq.n	80063ec <_vfiprintf_r+0x13c>
 80063c0:	9a07      	ldr	r2, [sp, #28]
 80063c2:	4654      	mov	r4, sl
 80063c4:	2000      	movs	r0, #0
 80063c6:	f04f 0c0a 	mov.w	ip, #10
 80063ca:	4621      	mov	r1, r4
 80063cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063d0:	3b30      	subs	r3, #48	; 0x30
 80063d2:	2b09      	cmp	r3, #9
 80063d4:	d94e      	bls.n	8006474 <_vfiprintf_r+0x1c4>
 80063d6:	b1b0      	cbz	r0, 8006406 <_vfiprintf_r+0x156>
 80063d8:	9207      	str	r2, [sp, #28]
 80063da:	e014      	b.n	8006406 <_vfiprintf_r+0x156>
 80063dc:	eba0 0308 	sub.w	r3, r0, r8
 80063e0:	fa09 f303 	lsl.w	r3, r9, r3
 80063e4:	4313      	orrs	r3, r2
 80063e6:	9304      	str	r3, [sp, #16]
 80063e8:	46a2      	mov	sl, r4
 80063ea:	e7d2      	b.n	8006392 <_vfiprintf_r+0xe2>
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	1d19      	adds	r1, r3, #4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	9103      	str	r1, [sp, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	bfbb      	ittet	lt
 80063f8:	425b      	neglt	r3, r3
 80063fa:	f042 0202 	orrlt.w	r2, r2, #2
 80063fe:	9307      	strge	r3, [sp, #28]
 8006400:	9307      	strlt	r3, [sp, #28]
 8006402:	bfb8      	it	lt
 8006404:	9204      	strlt	r2, [sp, #16]
 8006406:	7823      	ldrb	r3, [r4, #0]
 8006408:	2b2e      	cmp	r3, #46	; 0x2e
 800640a:	d10c      	bne.n	8006426 <_vfiprintf_r+0x176>
 800640c:	7863      	ldrb	r3, [r4, #1]
 800640e:	2b2a      	cmp	r3, #42	; 0x2a
 8006410:	d135      	bne.n	800647e <_vfiprintf_r+0x1ce>
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	1d1a      	adds	r2, r3, #4
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	9203      	str	r2, [sp, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	bfb8      	it	lt
 800641e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006422:	3402      	adds	r4, #2
 8006424:	9305      	str	r3, [sp, #20]
 8006426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800650c <_vfiprintf_r+0x25c>
 800642a:	7821      	ldrb	r1, [r4, #0]
 800642c:	2203      	movs	r2, #3
 800642e:	4650      	mov	r0, sl
 8006430:	f7f9 fede 	bl	80001f0 <memchr>
 8006434:	b140      	cbz	r0, 8006448 <_vfiprintf_r+0x198>
 8006436:	2340      	movs	r3, #64	; 0x40
 8006438:	eba0 000a 	sub.w	r0, r0, sl
 800643c:	fa03 f000 	lsl.w	r0, r3, r0
 8006440:	9b04      	ldr	r3, [sp, #16]
 8006442:	4303      	orrs	r3, r0
 8006444:	3401      	adds	r4, #1
 8006446:	9304      	str	r3, [sp, #16]
 8006448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800644c:	482c      	ldr	r0, [pc, #176]	; (8006500 <_vfiprintf_r+0x250>)
 800644e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006452:	2206      	movs	r2, #6
 8006454:	f7f9 fecc 	bl	80001f0 <memchr>
 8006458:	2800      	cmp	r0, #0
 800645a:	d03f      	beq.n	80064dc <_vfiprintf_r+0x22c>
 800645c:	4b29      	ldr	r3, [pc, #164]	; (8006504 <_vfiprintf_r+0x254>)
 800645e:	bb1b      	cbnz	r3, 80064a8 <_vfiprintf_r+0x1f8>
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	3307      	adds	r3, #7
 8006464:	f023 0307 	bic.w	r3, r3, #7
 8006468:	3308      	adds	r3, #8
 800646a:	9303      	str	r3, [sp, #12]
 800646c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646e:	443b      	add	r3, r7
 8006470:	9309      	str	r3, [sp, #36]	; 0x24
 8006472:	e767      	b.n	8006344 <_vfiprintf_r+0x94>
 8006474:	fb0c 3202 	mla	r2, ip, r2, r3
 8006478:	460c      	mov	r4, r1
 800647a:	2001      	movs	r0, #1
 800647c:	e7a5      	b.n	80063ca <_vfiprintf_r+0x11a>
 800647e:	2300      	movs	r3, #0
 8006480:	3401      	adds	r4, #1
 8006482:	9305      	str	r3, [sp, #20]
 8006484:	4619      	mov	r1, r3
 8006486:	f04f 0c0a 	mov.w	ip, #10
 800648a:	4620      	mov	r0, r4
 800648c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006490:	3a30      	subs	r2, #48	; 0x30
 8006492:	2a09      	cmp	r2, #9
 8006494:	d903      	bls.n	800649e <_vfiprintf_r+0x1ee>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0c5      	beq.n	8006426 <_vfiprintf_r+0x176>
 800649a:	9105      	str	r1, [sp, #20]
 800649c:	e7c3      	b.n	8006426 <_vfiprintf_r+0x176>
 800649e:	fb0c 2101 	mla	r1, ip, r1, r2
 80064a2:	4604      	mov	r4, r0
 80064a4:	2301      	movs	r3, #1
 80064a6:	e7f0      	b.n	800648a <_vfiprintf_r+0x1da>
 80064a8:	ab03      	add	r3, sp, #12
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	462a      	mov	r2, r5
 80064ae:	4b16      	ldr	r3, [pc, #88]	; (8006508 <_vfiprintf_r+0x258>)
 80064b0:	a904      	add	r1, sp, #16
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7fd fd7a 	bl	8003fac <_printf_float>
 80064b8:	4607      	mov	r7, r0
 80064ba:	1c78      	adds	r0, r7, #1
 80064bc:	d1d6      	bne.n	800646c <_vfiprintf_r+0x1bc>
 80064be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064c0:	07d9      	lsls	r1, r3, #31
 80064c2:	d405      	bmi.n	80064d0 <_vfiprintf_r+0x220>
 80064c4:	89ab      	ldrh	r3, [r5, #12]
 80064c6:	059a      	lsls	r2, r3, #22
 80064c8:	d402      	bmi.n	80064d0 <_vfiprintf_r+0x220>
 80064ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064cc:	f7ff f8e6 	bl	800569c <__retarget_lock_release_recursive>
 80064d0:	89ab      	ldrh	r3, [r5, #12]
 80064d2:	065b      	lsls	r3, r3, #25
 80064d4:	f53f af12 	bmi.w	80062fc <_vfiprintf_r+0x4c>
 80064d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064da:	e711      	b.n	8006300 <_vfiprintf_r+0x50>
 80064dc:	ab03      	add	r3, sp, #12
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	462a      	mov	r2, r5
 80064e2:	4b09      	ldr	r3, [pc, #36]	; (8006508 <_vfiprintf_r+0x258>)
 80064e4:	a904      	add	r1, sp, #16
 80064e6:	4630      	mov	r0, r6
 80064e8:	f7fe f804 	bl	80044f4 <_printf_i>
 80064ec:	e7e4      	b.n	80064b8 <_vfiprintf_r+0x208>
 80064ee:	bf00      	nop
 80064f0:	08006d94 	.word	0x08006d94
 80064f4:	08006db4 	.word	0x08006db4
 80064f8:	08006d74 	.word	0x08006d74
 80064fc:	08006f2c 	.word	0x08006f2c
 8006500:	08006f36 	.word	0x08006f36
 8006504:	08003fad 	.word	0x08003fad
 8006508:	0800628b 	.word	0x0800628b
 800650c:	08006f32 	.word	0x08006f32

08006510 <_sbrk_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d06      	ldr	r5, [pc, #24]	; (800652c <_sbrk_r+0x1c>)
 8006514:	2300      	movs	r3, #0
 8006516:	4604      	mov	r4, r0
 8006518:	4608      	mov	r0, r1
 800651a:	602b      	str	r3, [r5, #0]
 800651c:	f7fa fe22 	bl	8001164 <_sbrk>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_sbrk_r+0x1a>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_sbrk_r+0x1a>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20004ba4 	.word	0x20004ba4

08006530 <__sread>:
 8006530:	b510      	push	{r4, lr}
 8006532:	460c      	mov	r4, r1
 8006534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006538:	f000 faf2 	bl	8006b20 <_read_r>
 800653c:	2800      	cmp	r0, #0
 800653e:	bfab      	itete	ge
 8006540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006542:	89a3      	ldrhlt	r3, [r4, #12]
 8006544:	181b      	addge	r3, r3, r0
 8006546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800654a:	bfac      	ite	ge
 800654c:	6563      	strge	r3, [r4, #84]	; 0x54
 800654e:	81a3      	strhlt	r3, [r4, #12]
 8006550:	bd10      	pop	{r4, pc}

08006552 <__swrite>:
 8006552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006556:	461f      	mov	r7, r3
 8006558:	898b      	ldrh	r3, [r1, #12]
 800655a:	05db      	lsls	r3, r3, #23
 800655c:	4605      	mov	r5, r0
 800655e:	460c      	mov	r4, r1
 8006560:	4616      	mov	r6, r2
 8006562:	d505      	bpl.n	8006570 <__swrite+0x1e>
 8006564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006568:	2302      	movs	r3, #2
 800656a:	2200      	movs	r2, #0
 800656c:	f000 f9f8 	bl	8006960 <_lseek_r>
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800657a:	81a3      	strh	r3, [r4, #12]
 800657c:	4632      	mov	r2, r6
 800657e:	463b      	mov	r3, r7
 8006580:	4628      	mov	r0, r5
 8006582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006586:	f000 b869 	b.w	800665c <_write_r>

0800658a <__sseek>:
 800658a:	b510      	push	{r4, lr}
 800658c:	460c      	mov	r4, r1
 800658e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006592:	f000 f9e5 	bl	8006960 <_lseek_r>
 8006596:	1c43      	adds	r3, r0, #1
 8006598:	89a3      	ldrh	r3, [r4, #12]
 800659a:	bf15      	itete	ne
 800659c:	6560      	strne	r0, [r4, #84]	; 0x54
 800659e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065a6:	81a3      	strheq	r3, [r4, #12]
 80065a8:	bf18      	it	ne
 80065aa:	81a3      	strhne	r3, [r4, #12]
 80065ac:	bd10      	pop	{r4, pc}

080065ae <__sclose>:
 80065ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b2:	f000 b8f1 	b.w	8006798 <_close_r>
	...

080065b8 <__swbuf_r>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	460e      	mov	r6, r1
 80065bc:	4614      	mov	r4, r2
 80065be:	4605      	mov	r5, r0
 80065c0:	b118      	cbz	r0, 80065ca <__swbuf_r+0x12>
 80065c2:	6983      	ldr	r3, [r0, #24]
 80065c4:	b90b      	cbnz	r3, 80065ca <__swbuf_r+0x12>
 80065c6:	f7fe ffc5 	bl	8005554 <__sinit>
 80065ca:	4b21      	ldr	r3, [pc, #132]	; (8006650 <__swbuf_r+0x98>)
 80065cc:	429c      	cmp	r4, r3
 80065ce:	d12b      	bne.n	8006628 <__swbuf_r+0x70>
 80065d0:	686c      	ldr	r4, [r5, #4]
 80065d2:	69a3      	ldr	r3, [r4, #24]
 80065d4:	60a3      	str	r3, [r4, #8]
 80065d6:	89a3      	ldrh	r3, [r4, #12]
 80065d8:	071a      	lsls	r2, r3, #28
 80065da:	d52f      	bpl.n	800663c <__swbuf_r+0x84>
 80065dc:	6923      	ldr	r3, [r4, #16]
 80065de:	b36b      	cbz	r3, 800663c <__swbuf_r+0x84>
 80065e0:	6923      	ldr	r3, [r4, #16]
 80065e2:	6820      	ldr	r0, [r4, #0]
 80065e4:	1ac0      	subs	r0, r0, r3
 80065e6:	6963      	ldr	r3, [r4, #20]
 80065e8:	b2f6      	uxtb	r6, r6
 80065ea:	4283      	cmp	r3, r0
 80065ec:	4637      	mov	r7, r6
 80065ee:	dc04      	bgt.n	80065fa <__swbuf_r+0x42>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f966 	bl	80068c4 <_fflush_r>
 80065f8:	bb30      	cbnz	r0, 8006648 <__swbuf_r+0x90>
 80065fa:	68a3      	ldr	r3, [r4, #8]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	60a3      	str	r3, [r4, #8]
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	6022      	str	r2, [r4, #0]
 8006606:	701e      	strb	r6, [r3, #0]
 8006608:	6963      	ldr	r3, [r4, #20]
 800660a:	3001      	adds	r0, #1
 800660c:	4283      	cmp	r3, r0
 800660e:	d004      	beq.n	800661a <__swbuf_r+0x62>
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	07db      	lsls	r3, r3, #31
 8006614:	d506      	bpl.n	8006624 <__swbuf_r+0x6c>
 8006616:	2e0a      	cmp	r6, #10
 8006618:	d104      	bne.n	8006624 <__swbuf_r+0x6c>
 800661a:	4621      	mov	r1, r4
 800661c:	4628      	mov	r0, r5
 800661e:	f000 f951 	bl	80068c4 <_fflush_r>
 8006622:	b988      	cbnz	r0, 8006648 <__swbuf_r+0x90>
 8006624:	4638      	mov	r0, r7
 8006626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006628:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <__swbuf_r+0x9c>)
 800662a:	429c      	cmp	r4, r3
 800662c:	d101      	bne.n	8006632 <__swbuf_r+0x7a>
 800662e:	68ac      	ldr	r4, [r5, #8]
 8006630:	e7cf      	b.n	80065d2 <__swbuf_r+0x1a>
 8006632:	4b09      	ldr	r3, [pc, #36]	; (8006658 <__swbuf_r+0xa0>)
 8006634:	429c      	cmp	r4, r3
 8006636:	bf08      	it	eq
 8006638:	68ec      	ldreq	r4, [r5, #12]
 800663a:	e7ca      	b.n	80065d2 <__swbuf_r+0x1a>
 800663c:	4621      	mov	r1, r4
 800663e:	4628      	mov	r0, r5
 8006640:	f000 f81e 	bl	8006680 <__swsetup_r>
 8006644:	2800      	cmp	r0, #0
 8006646:	d0cb      	beq.n	80065e0 <__swbuf_r+0x28>
 8006648:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800664c:	e7ea      	b.n	8006624 <__swbuf_r+0x6c>
 800664e:	bf00      	nop
 8006650:	08006d94 	.word	0x08006d94
 8006654:	08006db4 	.word	0x08006db4
 8006658:	08006d74 	.word	0x08006d74

0800665c <_write_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4d07      	ldr	r5, [pc, #28]	; (800667c <_write_r+0x20>)
 8006660:	4604      	mov	r4, r0
 8006662:	4608      	mov	r0, r1
 8006664:	4611      	mov	r1, r2
 8006666:	2200      	movs	r2, #0
 8006668:	602a      	str	r2, [r5, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	f7fa fd29 	bl	80010c2 <_write>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d102      	bne.n	800667a <_write_r+0x1e>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	b103      	cbz	r3, 800667a <_write_r+0x1e>
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	20004ba4 	.word	0x20004ba4

08006680 <__swsetup_r>:
 8006680:	4b32      	ldr	r3, [pc, #200]	; (800674c <__swsetup_r+0xcc>)
 8006682:	b570      	push	{r4, r5, r6, lr}
 8006684:	681d      	ldr	r5, [r3, #0]
 8006686:	4606      	mov	r6, r0
 8006688:	460c      	mov	r4, r1
 800668a:	b125      	cbz	r5, 8006696 <__swsetup_r+0x16>
 800668c:	69ab      	ldr	r3, [r5, #24]
 800668e:	b913      	cbnz	r3, 8006696 <__swsetup_r+0x16>
 8006690:	4628      	mov	r0, r5
 8006692:	f7fe ff5f 	bl	8005554 <__sinit>
 8006696:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <__swsetup_r+0xd0>)
 8006698:	429c      	cmp	r4, r3
 800669a:	d10f      	bne.n	80066bc <__swsetup_r+0x3c>
 800669c:	686c      	ldr	r4, [r5, #4]
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066a4:	0719      	lsls	r1, r3, #28
 80066a6:	d42c      	bmi.n	8006702 <__swsetup_r+0x82>
 80066a8:	06dd      	lsls	r5, r3, #27
 80066aa:	d411      	bmi.n	80066d0 <__swsetup_r+0x50>
 80066ac:	2309      	movs	r3, #9
 80066ae:	6033      	str	r3, [r6, #0]
 80066b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066b4:	81a3      	strh	r3, [r4, #12]
 80066b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066ba:	e03e      	b.n	800673a <__swsetup_r+0xba>
 80066bc:	4b25      	ldr	r3, [pc, #148]	; (8006754 <__swsetup_r+0xd4>)
 80066be:	429c      	cmp	r4, r3
 80066c0:	d101      	bne.n	80066c6 <__swsetup_r+0x46>
 80066c2:	68ac      	ldr	r4, [r5, #8]
 80066c4:	e7eb      	b.n	800669e <__swsetup_r+0x1e>
 80066c6:	4b24      	ldr	r3, [pc, #144]	; (8006758 <__swsetup_r+0xd8>)
 80066c8:	429c      	cmp	r4, r3
 80066ca:	bf08      	it	eq
 80066cc:	68ec      	ldreq	r4, [r5, #12]
 80066ce:	e7e6      	b.n	800669e <__swsetup_r+0x1e>
 80066d0:	0758      	lsls	r0, r3, #29
 80066d2:	d512      	bpl.n	80066fa <__swsetup_r+0x7a>
 80066d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066d6:	b141      	cbz	r1, 80066ea <__swsetup_r+0x6a>
 80066d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066dc:	4299      	cmp	r1, r3
 80066de:	d002      	beq.n	80066e6 <__swsetup_r+0x66>
 80066e0:	4630      	mov	r0, r6
 80066e2:	f7ff fb7f 	bl	8005de4 <_free_r>
 80066e6:	2300      	movs	r3, #0
 80066e8:	6363      	str	r3, [r4, #52]	; 0x34
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	2300      	movs	r3, #0
 80066f4:	6063      	str	r3, [r4, #4]
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	f043 0308 	orr.w	r3, r3, #8
 8006700:	81a3      	strh	r3, [r4, #12]
 8006702:	6923      	ldr	r3, [r4, #16]
 8006704:	b94b      	cbnz	r3, 800671a <__swsetup_r+0x9a>
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800670c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006710:	d003      	beq.n	800671a <__swsetup_r+0x9a>
 8006712:	4621      	mov	r1, r4
 8006714:	4630      	mov	r0, r6
 8006716:	f000 f95b 	bl	80069d0 <__smakebuf_r>
 800671a:	89a0      	ldrh	r0, [r4, #12]
 800671c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006720:	f010 0301 	ands.w	r3, r0, #1
 8006724:	d00a      	beq.n	800673c <__swsetup_r+0xbc>
 8006726:	2300      	movs	r3, #0
 8006728:	60a3      	str	r3, [r4, #8]
 800672a:	6963      	ldr	r3, [r4, #20]
 800672c:	425b      	negs	r3, r3
 800672e:	61a3      	str	r3, [r4, #24]
 8006730:	6923      	ldr	r3, [r4, #16]
 8006732:	b943      	cbnz	r3, 8006746 <__swsetup_r+0xc6>
 8006734:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006738:	d1ba      	bne.n	80066b0 <__swsetup_r+0x30>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	0781      	lsls	r1, r0, #30
 800673e:	bf58      	it	pl
 8006740:	6963      	ldrpl	r3, [r4, #20]
 8006742:	60a3      	str	r3, [r4, #8]
 8006744:	e7f4      	b.n	8006730 <__swsetup_r+0xb0>
 8006746:	2000      	movs	r0, #0
 8006748:	e7f7      	b.n	800673a <__swsetup_r+0xba>
 800674a:	bf00      	nop
 800674c:	20000008 	.word	0x20000008
 8006750:	08006d94 	.word	0x08006d94
 8006754:	08006db4 	.word	0x08006db4
 8006758:	08006d74 	.word	0x08006d74

0800675c <__assert_func>:
 800675c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800675e:	4614      	mov	r4, r2
 8006760:	461a      	mov	r2, r3
 8006762:	4b09      	ldr	r3, [pc, #36]	; (8006788 <__assert_func+0x2c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4605      	mov	r5, r0
 8006768:	68d8      	ldr	r0, [r3, #12]
 800676a:	b14c      	cbz	r4, 8006780 <__assert_func+0x24>
 800676c:	4b07      	ldr	r3, [pc, #28]	; (800678c <__assert_func+0x30>)
 800676e:	9100      	str	r1, [sp, #0]
 8006770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006774:	4906      	ldr	r1, [pc, #24]	; (8006790 <__assert_func+0x34>)
 8006776:	462b      	mov	r3, r5
 8006778:	f000 f8e0 	bl	800693c <fiprintf>
 800677c:	f000 f9ef 	bl	8006b5e <abort>
 8006780:	4b04      	ldr	r3, [pc, #16]	; (8006794 <__assert_func+0x38>)
 8006782:	461c      	mov	r4, r3
 8006784:	e7f3      	b.n	800676e <__assert_func+0x12>
 8006786:	bf00      	nop
 8006788:	20000008 	.word	0x20000008
 800678c:	08006f3d 	.word	0x08006f3d
 8006790:	08006f4a 	.word	0x08006f4a
 8006794:	08006f78 	.word	0x08006f78

08006798 <_close_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	4d06      	ldr	r5, [pc, #24]	; (80067b4 <_close_r+0x1c>)
 800679c:	2300      	movs	r3, #0
 800679e:	4604      	mov	r4, r0
 80067a0:	4608      	mov	r0, r1
 80067a2:	602b      	str	r3, [r5, #0]
 80067a4:	f7fa fca9 	bl	80010fa <_close>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d102      	bne.n	80067b2 <_close_r+0x1a>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	b103      	cbz	r3, 80067b2 <_close_r+0x1a>
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	20004ba4 	.word	0x20004ba4

080067b8 <__sflush_r>:
 80067b8:	898a      	ldrh	r2, [r1, #12]
 80067ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067be:	4605      	mov	r5, r0
 80067c0:	0710      	lsls	r0, r2, #28
 80067c2:	460c      	mov	r4, r1
 80067c4:	d458      	bmi.n	8006878 <__sflush_r+0xc0>
 80067c6:	684b      	ldr	r3, [r1, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	dc05      	bgt.n	80067d8 <__sflush_r+0x20>
 80067cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	dc02      	bgt.n	80067d8 <__sflush_r+0x20>
 80067d2:	2000      	movs	r0, #0
 80067d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067da:	2e00      	cmp	r6, #0
 80067dc:	d0f9      	beq.n	80067d2 <__sflush_r+0x1a>
 80067de:	2300      	movs	r3, #0
 80067e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067e4:	682f      	ldr	r7, [r5, #0]
 80067e6:	602b      	str	r3, [r5, #0]
 80067e8:	d032      	beq.n	8006850 <__sflush_r+0x98>
 80067ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	075a      	lsls	r2, r3, #29
 80067f0:	d505      	bpl.n	80067fe <__sflush_r+0x46>
 80067f2:	6863      	ldr	r3, [r4, #4]
 80067f4:	1ac0      	subs	r0, r0, r3
 80067f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067f8:	b10b      	cbz	r3, 80067fe <__sflush_r+0x46>
 80067fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067fc:	1ac0      	subs	r0, r0, r3
 80067fe:	2300      	movs	r3, #0
 8006800:	4602      	mov	r2, r0
 8006802:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006804:	6a21      	ldr	r1, [r4, #32]
 8006806:	4628      	mov	r0, r5
 8006808:	47b0      	blx	r6
 800680a:	1c43      	adds	r3, r0, #1
 800680c:	89a3      	ldrh	r3, [r4, #12]
 800680e:	d106      	bne.n	800681e <__sflush_r+0x66>
 8006810:	6829      	ldr	r1, [r5, #0]
 8006812:	291d      	cmp	r1, #29
 8006814:	d82c      	bhi.n	8006870 <__sflush_r+0xb8>
 8006816:	4a2a      	ldr	r2, [pc, #168]	; (80068c0 <__sflush_r+0x108>)
 8006818:	40ca      	lsrs	r2, r1
 800681a:	07d6      	lsls	r6, r2, #31
 800681c:	d528      	bpl.n	8006870 <__sflush_r+0xb8>
 800681e:	2200      	movs	r2, #0
 8006820:	6062      	str	r2, [r4, #4]
 8006822:	04d9      	lsls	r1, r3, #19
 8006824:	6922      	ldr	r2, [r4, #16]
 8006826:	6022      	str	r2, [r4, #0]
 8006828:	d504      	bpl.n	8006834 <__sflush_r+0x7c>
 800682a:	1c42      	adds	r2, r0, #1
 800682c:	d101      	bne.n	8006832 <__sflush_r+0x7a>
 800682e:	682b      	ldr	r3, [r5, #0]
 8006830:	b903      	cbnz	r3, 8006834 <__sflush_r+0x7c>
 8006832:	6560      	str	r0, [r4, #84]	; 0x54
 8006834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006836:	602f      	str	r7, [r5, #0]
 8006838:	2900      	cmp	r1, #0
 800683a:	d0ca      	beq.n	80067d2 <__sflush_r+0x1a>
 800683c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006840:	4299      	cmp	r1, r3
 8006842:	d002      	beq.n	800684a <__sflush_r+0x92>
 8006844:	4628      	mov	r0, r5
 8006846:	f7ff facd 	bl	8005de4 <_free_r>
 800684a:	2000      	movs	r0, #0
 800684c:	6360      	str	r0, [r4, #52]	; 0x34
 800684e:	e7c1      	b.n	80067d4 <__sflush_r+0x1c>
 8006850:	6a21      	ldr	r1, [r4, #32]
 8006852:	2301      	movs	r3, #1
 8006854:	4628      	mov	r0, r5
 8006856:	47b0      	blx	r6
 8006858:	1c41      	adds	r1, r0, #1
 800685a:	d1c7      	bne.n	80067ec <__sflush_r+0x34>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d0c4      	beq.n	80067ec <__sflush_r+0x34>
 8006862:	2b1d      	cmp	r3, #29
 8006864:	d001      	beq.n	800686a <__sflush_r+0xb2>
 8006866:	2b16      	cmp	r3, #22
 8006868:	d101      	bne.n	800686e <__sflush_r+0xb6>
 800686a:	602f      	str	r7, [r5, #0]
 800686c:	e7b1      	b.n	80067d2 <__sflush_r+0x1a>
 800686e:	89a3      	ldrh	r3, [r4, #12]
 8006870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006874:	81a3      	strh	r3, [r4, #12]
 8006876:	e7ad      	b.n	80067d4 <__sflush_r+0x1c>
 8006878:	690f      	ldr	r7, [r1, #16]
 800687a:	2f00      	cmp	r7, #0
 800687c:	d0a9      	beq.n	80067d2 <__sflush_r+0x1a>
 800687e:	0793      	lsls	r3, r2, #30
 8006880:	680e      	ldr	r6, [r1, #0]
 8006882:	bf08      	it	eq
 8006884:	694b      	ldreq	r3, [r1, #20]
 8006886:	600f      	str	r7, [r1, #0]
 8006888:	bf18      	it	ne
 800688a:	2300      	movne	r3, #0
 800688c:	eba6 0807 	sub.w	r8, r6, r7
 8006890:	608b      	str	r3, [r1, #8]
 8006892:	f1b8 0f00 	cmp.w	r8, #0
 8006896:	dd9c      	ble.n	80067d2 <__sflush_r+0x1a>
 8006898:	6a21      	ldr	r1, [r4, #32]
 800689a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800689c:	4643      	mov	r3, r8
 800689e:	463a      	mov	r2, r7
 80068a0:	4628      	mov	r0, r5
 80068a2:	47b0      	blx	r6
 80068a4:	2800      	cmp	r0, #0
 80068a6:	dc06      	bgt.n	80068b6 <__sflush_r+0xfe>
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068ae:	81a3      	strh	r3, [r4, #12]
 80068b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068b4:	e78e      	b.n	80067d4 <__sflush_r+0x1c>
 80068b6:	4407      	add	r7, r0
 80068b8:	eba8 0800 	sub.w	r8, r8, r0
 80068bc:	e7e9      	b.n	8006892 <__sflush_r+0xda>
 80068be:	bf00      	nop
 80068c0:	20400001 	.word	0x20400001

080068c4 <_fflush_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	690b      	ldr	r3, [r1, #16]
 80068c8:	4605      	mov	r5, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	b913      	cbnz	r3, 80068d4 <_fflush_r+0x10>
 80068ce:	2500      	movs	r5, #0
 80068d0:	4628      	mov	r0, r5
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	b118      	cbz	r0, 80068de <_fflush_r+0x1a>
 80068d6:	6983      	ldr	r3, [r0, #24]
 80068d8:	b90b      	cbnz	r3, 80068de <_fflush_r+0x1a>
 80068da:	f7fe fe3b 	bl	8005554 <__sinit>
 80068de:	4b14      	ldr	r3, [pc, #80]	; (8006930 <_fflush_r+0x6c>)
 80068e0:	429c      	cmp	r4, r3
 80068e2:	d11b      	bne.n	800691c <_fflush_r+0x58>
 80068e4:	686c      	ldr	r4, [r5, #4]
 80068e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0ef      	beq.n	80068ce <_fflush_r+0xa>
 80068ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068f0:	07d0      	lsls	r0, r2, #31
 80068f2:	d404      	bmi.n	80068fe <_fflush_r+0x3a>
 80068f4:	0599      	lsls	r1, r3, #22
 80068f6:	d402      	bmi.n	80068fe <_fflush_r+0x3a>
 80068f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068fa:	f7fe fece 	bl	800569a <__retarget_lock_acquire_recursive>
 80068fe:	4628      	mov	r0, r5
 8006900:	4621      	mov	r1, r4
 8006902:	f7ff ff59 	bl	80067b8 <__sflush_r>
 8006906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006908:	07da      	lsls	r2, r3, #31
 800690a:	4605      	mov	r5, r0
 800690c:	d4e0      	bmi.n	80068d0 <_fflush_r+0xc>
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	059b      	lsls	r3, r3, #22
 8006912:	d4dd      	bmi.n	80068d0 <_fflush_r+0xc>
 8006914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006916:	f7fe fec1 	bl	800569c <__retarget_lock_release_recursive>
 800691a:	e7d9      	b.n	80068d0 <_fflush_r+0xc>
 800691c:	4b05      	ldr	r3, [pc, #20]	; (8006934 <_fflush_r+0x70>)
 800691e:	429c      	cmp	r4, r3
 8006920:	d101      	bne.n	8006926 <_fflush_r+0x62>
 8006922:	68ac      	ldr	r4, [r5, #8]
 8006924:	e7df      	b.n	80068e6 <_fflush_r+0x22>
 8006926:	4b04      	ldr	r3, [pc, #16]	; (8006938 <_fflush_r+0x74>)
 8006928:	429c      	cmp	r4, r3
 800692a:	bf08      	it	eq
 800692c:	68ec      	ldreq	r4, [r5, #12]
 800692e:	e7da      	b.n	80068e6 <_fflush_r+0x22>
 8006930:	08006d94 	.word	0x08006d94
 8006934:	08006db4 	.word	0x08006db4
 8006938:	08006d74 	.word	0x08006d74

0800693c <fiprintf>:
 800693c:	b40e      	push	{r1, r2, r3}
 800693e:	b503      	push	{r0, r1, lr}
 8006940:	4601      	mov	r1, r0
 8006942:	ab03      	add	r3, sp, #12
 8006944:	4805      	ldr	r0, [pc, #20]	; (800695c <fiprintf+0x20>)
 8006946:	f853 2b04 	ldr.w	r2, [r3], #4
 800694a:	6800      	ldr	r0, [r0, #0]
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	f7ff fcaf 	bl	80062b0 <_vfiprintf_r>
 8006952:	b002      	add	sp, #8
 8006954:	f85d eb04 	ldr.w	lr, [sp], #4
 8006958:	b003      	add	sp, #12
 800695a:	4770      	bx	lr
 800695c:	20000008 	.word	0x20000008

08006960 <_lseek_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	4d07      	ldr	r5, [pc, #28]	; (8006980 <_lseek_r+0x20>)
 8006964:	4604      	mov	r4, r0
 8006966:	4608      	mov	r0, r1
 8006968:	4611      	mov	r1, r2
 800696a:	2200      	movs	r2, #0
 800696c:	602a      	str	r2, [r5, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	f7fa fbea 	bl	8001148 <_lseek>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d102      	bne.n	800697e <_lseek_r+0x1e>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	b103      	cbz	r3, 800697e <_lseek_r+0x1e>
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	20004ba4 	.word	0x20004ba4

08006984 <__swhatbuf_r>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	460e      	mov	r6, r1
 8006988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698c:	2900      	cmp	r1, #0
 800698e:	b096      	sub	sp, #88	; 0x58
 8006990:	4614      	mov	r4, r2
 8006992:	461d      	mov	r5, r3
 8006994:	da08      	bge.n	80069a8 <__swhatbuf_r+0x24>
 8006996:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	602a      	str	r2, [r5, #0]
 800699e:	061a      	lsls	r2, r3, #24
 80069a0:	d410      	bmi.n	80069c4 <__swhatbuf_r+0x40>
 80069a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069a6:	e00e      	b.n	80069c6 <__swhatbuf_r+0x42>
 80069a8:	466a      	mov	r2, sp
 80069aa:	f000 f8df 	bl	8006b6c <_fstat_r>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	dbf1      	blt.n	8006996 <__swhatbuf_r+0x12>
 80069b2:	9a01      	ldr	r2, [sp, #4]
 80069b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069bc:	425a      	negs	r2, r3
 80069be:	415a      	adcs	r2, r3
 80069c0:	602a      	str	r2, [r5, #0]
 80069c2:	e7ee      	b.n	80069a2 <__swhatbuf_r+0x1e>
 80069c4:	2340      	movs	r3, #64	; 0x40
 80069c6:	2000      	movs	r0, #0
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	b016      	add	sp, #88	; 0x58
 80069cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080069d0 <__smakebuf_r>:
 80069d0:	898b      	ldrh	r3, [r1, #12]
 80069d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069d4:	079d      	lsls	r5, r3, #30
 80069d6:	4606      	mov	r6, r0
 80069d8:	460c      	mov	r4, r1
 80069da:	d507      	bpl.n	80069ec <__smakebuf_r+0x1c>
 80069dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	6123      	str	r3, [r4, #16]
 80069e4:	2301      	movs	r3, #1
 80069e6:	6163      	str	r3, [r4, #20]
 80069e8:	b002      	add	sp, #8
 80069ea:	bd70      	pop	{r4, r5, r6, pc}
 80069ec:	ab01      	add	r3, sp, #4
 80069ee:	466a      	mov	r2, sp
 80069f0:	f7ff ffc8 	bl	8006984 <__swhatbuf_r>
 80069f4:	9900      	ldr	r1, [sp, #0]
 80069f6:	4605      	mov	r5, r0
 80069f8:	4630      	mov	r0, r6
 80069fa:	f7ff fa5f 	bl	8005ebc <_malloc_r>
 80069fe:	b948      	cbnz	r0, 8006a14 <__smakebuf_r+0x44>
 8006a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a04:	059a      	lsls	r2, r3, #22
 8006a06:	d4ef      	bmi.n	80069e8 <__smakebuf_r+0x18>
 8006a08:	f023 0303 	bic.w	r3, r3, #3
 8006a0c:	f043 0302 	orr.w	r3, r3, #2
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	e7e3      	b.n	80069dc <__smakebuf_r+0xc>
 8006a14:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <__smakebuf_r+0x7c>)
 8006a16:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a18:	89a3      	ldrh	r3, [r4, #12]
 8006a1a:	6020      	str	r0, [r4, #0]
 8006a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a20:	81a3      	strh	r3, [r4, #12]
 8006a22:	9b00      	ldr	r3, [sp, #0]
 8006a24:	6163      	str	r3, [r4, #20]
 8006a26:	9b01      	ldr	r3, [sp, #4]
 8006a28:	6120      	str	r0, [r4, #16]
 8006a2a:	b15b      	cbz	r3, 8006a44 <__smakebuf_r+0x74>
 8006a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a30:	4630      	mov	r0, r6
 8006a32:	f000 f8ad 	bl	8006b90 <_isatty_r>
 8006a36:	b128      	cbz	r0, 8006a44 <__smakebuf_r+0x74>
 8006a38:	89a3      	ldrh	r3, [r4, #12]
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	89a0      	ldrh	r0, [r4, #12]
 8006a46:	4305      	orrs	r5, r0
 8006a48:	81a5      	strh	r5, [r4, #12]
 8006a4a:	e7cd      	b.n	80069e8 <__smakebuf_r+0x18>
 8006a4c:	080054ed 	.word	0x080054ed

08006a50 <__ascii_mbtowc>:
 8006a50:	b082      	sub	sp, #8
 8006a52:	b901      	cbnz	r1, 8006a56 <__ascii_mbtowc+0x6>
 8006a54:	a901      	add	r1, sp, #4
 8006a56:	b142      	cbz	r2, 8006a6a <__ascii_mbtowc+0x1a>
 8006a58:	b14b      	cbz	r3, 8006a6e <__ascii_mbtowc+0x1e>
 8006a5a:	7813      	ldrb	r3, [r2, #0]
 8006a5c:	600b      	str	r3, [r1, #0]
 8006a5e:	7812      	ldrb	r2, [r2, #0]
 8006a60:	1e10      	subs	r0, r2, #0
 8006a62:	bf18      	it	ne
 8006a64:	2001      	movne	r0, #1
 8006a66:	b002      	add	sp, #8
 8006a68:	4770      	bx	lr
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	e7fb      	b.n	8006a66 <__ascii_mbtowc+0x16>
 8006a6e:	f06f 0001 	mvn.w	r0, #1
 8006a72:	e7f8      	b.n	8006a66 <__ascii_mbtowc+0x16>

08006a74 <memmove>:
 8006a74:	4288      	cmp	r0, r1
 8006a76:	b510      	push	{r4, lr}
 8006a78:	eb01 0402 	add.w	r4, r1, r2
 8006a7c:	d902      	bls.n	8006a84 <memmove+0x10>
 8006a7e:	4284      	cmp	r4, r0
 8006a80:	4623      	mov	r3, r4
 8006a82:	d807      	bhi.n	8006a94 <memmove+0x20>
 8006a84:	1e43      	subs	r3, r0, #1
 8006a86:	42a1      	cmp	r1, r4
 8006a88:	d008      	beq.n	8006a9c <memmove+0x28>
 8006a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a92:	e7f8      	b.n	8006a86 <memmove+0x12>
 8006a94:	4402      	add	r2, r0
 8006a96:	4601      	mov	r1, r0
 8006a98:	428a      	cmp	r2, r1
 8006a9a:	d100      	bne.n	8006a9e <memmove+0x2a>
 8006a9c:	bd10      	pop	{r4, pc}
 8006a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006aa6:	e7f7      	b.n	8006a98 <memmove+0x24>

08006aa8 <__malloc_lock>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	; (8006ab0 <__malloc_lock+0x8>)
 8006aaa:	f7fe bdf6 	b.w	800569a <__retarget_lock_acquire_recursive>
 8006aae:	bf00      	nop
 8006ab0:	20004b98 	.word	0x20004b98

08006ab4 <__malloc_unlock>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	; (8006abc <__malloc_unlock+0x8>)
 8006ab6:	f7fe bdf1 	b.w	800569c <__retarget_lock_release_recursive>
 8006aba:	bf00      	nop
 8006abc:	20004b98 	.word	0x20004b98

08006ac0 <_realloc_r>:
 8006ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	4614      	mov	r4, r2
 8006ac8:	460e      	mov	r6, r1
 8006aca:	b921      	cbnz	r1, 8006ad6 <_realloc_r+0x16>
 8006acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad0:	4611      	mov	r1, r2
 8006ad2:	f7ff b9f3 	b.w	8005ebc <_malloc_r>
 8006ad6:	b92a      	cbnz	r2, 8006ae4 <_realloc_r+0x24>
 8006ad8:	f7ff f984 	bl	8005de4 <_free_r>
 8006adc:	4625      	mov	r5, r4
 8006ade:	4628      	mov	r0, r5
 8006ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae4:	f000 f864 	bl	8006bb0 <_malloc_usable_size_r>
 8006ae8:	4284      	cmp	r4, r0
 8006aea:	4607      	mov	r7, r0
 8006aec:	d802      	bhi.n	8006af4 <_realloc_r+0x34>
 8006aee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006af2:	d812      	bhi.n	8006b1a <_realloc_r+0x5a>
 8006af4:	4621      	mov	r1, r4
 8006af6:	4640      	mov	r0, r8
 8006af8:	f7ff f9e0 	bl	8005ebc <_malloc_r>
 8006afc:	4605      	mov	r5, r0
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d0ed      	beq.n	8006ade <_realloc_r+0x1e>
 8006b02:	42bc      	cmp	r4, r7
 8006b04:	4622      	mov	r2, r4
 8006b06:	4631      	mov	r1, r6
 8006b08:	bf28      	it	cs
 8006b0a:	463a      	movcs	r2, r7
 8006b0c:	f7fd f998 	bl	8003e40 <memcpy>
 8006b10:	4631      	mov	r1, r6
 8006b12:	4640      	mov	r0, r8
 8006b14:	f7ff f966 	bl	8005de4 <_free_r>
 8006b18:	e7e1      	b.n	8006ade <_realloc_r+0x1e>
 8006b1a:	4635      	mov	r5, r6
 8006b1c:	e7df      	b.n	8006ade <_realloc_r+0x1e>
	...

08006b20 <_read_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4d07      	ldr	r5, [pc, #28]	; (8006b40 <_read_r+0x20>)
 8006b24:	4604      	mov	r4, r0
 8006b26:	4608      	mov	r0, r1
 8006b28:	4611      	mov	r1, r2
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	602a      	str	r2, [r5, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f7fa faaa 	bl	8001088 <_read>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_read_r+0x1e>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_read_r+0x1e>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	20004ba4 	.word	0x20004ba4

08006b44 <__ascii_wctomb>:
 8006b44:	b149      	cbz	r1, 8006b5a <__ascii_wctomb+0x16>
 8006b46:	2aff      	cmp	r2, #255	; 0xff
 8006b48:	bf85      	ittet	hi
 8006b4a:	238a      	movhi	r3, #138	; 0x8a
 8006b4c:	6003      	strhi	r3, [r0, #0]
 8006b4e:	700a      	strbls	r2, [r1, #0]
 8006b50:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006b54:	bf98      	it	ls
 8006b56:	2001      	movls	r0, #1
 8006b58:	4770      	bx	lr
 8006b5a:	4608      	mov	r0, r1
 8006b5c:	4770      	bx	lr

08006b5e <abort>:
 8006b5e:	b508      	push	{r3, lr}
 8006b60:	2006      	movs	r0, #6
 8006b62:	f000 f855 	bl	8006c10 <raise>
 8006b66:	2001      	movs	r0, #1
 8006b68:	f7fa fa84 	bl	8001074 <_exit>

08006b6c <_fstat_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4d07      	ldr	r5, [pc, #28]	; (8006b8c <_fstat_r+0x20>)
 8006b70:	2300      	movs	r3, #0
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	4611      	mov	r1, r2
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	f7fa faca 	bl	8001112 <_fstat>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d102      	bne.n	8006b88 <_fstat_r+0x1c>
 8006b82:	682b      	ldr	r3, [r5, #0]
 8006b84:	b103      	cbz	r3, 8006b88 <_fstat_r+0x1c>
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	bd38      	pop	{r3, r4, r5, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20004ba4 	.word	0x20004ba4

08006b90 <_isatty_r>:
 8006b90:	b538      	push	{r3, r4, r5, lr}
 8006b92:	4d06      	ldr	r5, [pc, #24]	; (8006bac <_isatty_r+0x1c>)
 8006b94:	2300      	movs	r3, #0
 8006b96:	4604      	mov	r4, r0
 8006b98:	4608      	mov	r0, r1
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	f7fa fac9 	bl	8001132 <_isatty>
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	d102      	bne.n	8006baa <_isatty_r+0x1a>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	b103      	cbz	r3, 8006baa <_isatty_r+0x1a>
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	20004ba4 	.word	0x20004ba4

08006bb0 <_malloc_usable_size_r>:
 8006bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bb4:	1f18      	subs	r0, r3, #4
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bfbc      	itt	lt
 8006bba:	580b      	ldrlt	r3, [r1, r0]
 8006bbc:	18c0      	addlt	r0, r0, r3
 8006bbe:	4770      	bx	lr

08006bc0 <_raise_r>:
 8006bc0:	291f      	cmp	r1, #31
 8006bc2:	b538      	push	{r3, r4, r5, lr}
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	460d      	mov	r5, r1
 8006bc8:	d904      	bls.n	8006bd4 <_raise_r+0x14>
 8006bca:	2316      	movs	r3, #22
 8006bcc:	6003      	str	r3, [r0, #0]
 8006bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006bd6:	b112      	cbz	r2, 8006bde <_raise_r+0x1e>
 8006bd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006bdc:	b94b      	cbnz	r3, 8006bf2 <_raise_r+0x32>
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 f830 	bl	8006c44 <_getpid_r>
 8006be4:	462a      	mov	r2, r5
 8006be6:	4601      	mov	r1, r0
 8006be8:	4620      	mov	r0, r4
 8006bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bee:	f000 b817 	b.w	8006c20 <_kill_r>
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d00a      	beq.n	8006c0c <_raise_r+0x4c>
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	d103      	bne.n	8006c02 <_raise_r+0x42>
 8006bfa:	2316      	movs	r3, #22
 8006bfc:	6003      	str	r3, [r0, #0]
 8006bfe:	2001      	movs	r0, #1
 8006c00:	e7e7      	b.n	8006bd2 <_raise_r+0x12>
 8006c02:	2400      	movs	r4, #0
 8006c04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c08:	4628      	mov	r0, r5
 8006c0a:	4798      	blx	r3
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	e7e0      	b.n	8006bd2 <_raise_r+0x12>

08006c10 <raise>:
 8006c10:	4b02      	ldr	r3, [pc, #8]	; (8006c1c <raise+0xc>)
 8006c12:	4601      	mov	r1, r0
 8006c14:	6818      	ldr	r0, [r3, #0]
 8006c16:	f7ff bfd3 	b.w	8006bc0 <_raise_r>
 8006c1a:	bf00      	nop
 8006c1c:	20000008 	.word	0x20000008

08006c20 <_kill_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d07      	ldr	r5, [pc, #28]	; (8006c40 <_kill_r+0x20>)
 8006c24:	2300      	movs	r3, #0
 8006c26:	4604      	mov	r4, r0
 8006c28:	4608      	mov	r0, r1
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	602b      	str	r3, [r5, #0]
 8006c2e:	f7fa fa11 	bl	8001054 <_kill>
 8006c32:	1c43      	adds	r3, r0, #1
 8006c34:	d102      	bne.n	8006c3c <_kill_r+0x1c>
 8006c36:	682b      	ldr	r3, [r5, #0]
 8006c38:	b103      	cbz	r3, 8006c3c <_kill_r+0x1c>
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	bd38      	pop	{r3, r4, r5, pc}
 8006c3e:	bf00      	nop
 8006c40:	20004ba4 	.word	0x20004ba4

08006c44 <_getpid_r>:
 8006c44:	f7fa b9fe 	b.w	8001044 <_getpid>

08006c48 <_init>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	bf00      	nop
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr

08006c54 <_fini>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	bf00      	nop
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr
