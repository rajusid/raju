
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08005fc0  08005fc0  00015fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800616c  0800616c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800616c  0800616c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006174  08006174  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006174  08006174  00016174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006178  08006178  00016178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800617c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a18  20000074  080061f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a8c  080061f0  00024a8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174a4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000320d  00000000  00000000  00037548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0003a758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003bbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004742  00000000  00000000  0003cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001560e  00000000  00000000  00041642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099b0f  00000000  00000000  00056c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f075f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dcc  00000000  00000000  000f07b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005fa8 	.word	0x08005fa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005fa8 	.word	0x08005fa8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
void pGreenLedController(void *pvParameters);

int __io_putchar(int ch);

int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af02      	add	r7, sp, #8

  HAL_Init();
 800058a:	f000 fb2f 	bl	8000bec <HAL_Init>
  SystemClock_Config();
 800058e:	f000 f88d 	bl	80006ac <SystemClock_Config>
  MX_GPIO_Init();
 8000592:	f000 f913 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8e7 	bl	8000768 <MX_USART2_UART_Init>

  xTaskCreate( pBlueLedController,
 800059a:	2300      	movs	r3, #0
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	2301      	movs	r3, #1
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2300      	movs	r3, #0
 80005a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005a8:	490f      	ldr	r1, [pc, #60]	; (80005e8 <main+0x64>)
 80005aa:	4810      	ldr	r0, [pc, #64]	; (80005ec <main+0x68>)
 80005ac:	f002 ff37 	bl	800341e <xTaskCreate>
				1000,
				NULL,
				1,
				NULL
			);
  xTaskCreate( pRedLedController,
 80005b0:	2300      	movs	r3, #0
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2301      	movs	r3, #1
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005be:	490c      	ldr	r1, [pc, #48]	; (80005f0 <main+0x6c>)
 80005c0:	480c      	ldr	r0, [pc, #48]	; (80005f4 <main+0x70>)
 80005c2:	f002 ff2c 	bl	800341e <xTaskCreate>
  				1000,
  				NULL,
  				1,
  				NULL
  			);
  xTaskCreate( pGreenLedController,
 80005c6:	2300      	movs	r3, #0
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005d4:	4908      	ldr	r1, [pc, #32]	; (80005f8 <main+0x74>)
 80005d6:	4809      	ldr	r0, [pc, #36]	; (80005fc <main+0x78>)
 80005d8:	f002 ff21 	bl	800341e <xTaskCreate>
  				2000,
  				NULL,
  				1,
  				NULL
  			);
   vTaskStartScheduler();
 80005dc:	f003 f864 	bl	80036a8 <vTaskStartScheduler>

  while (1)
  {

      printf("Welcome to Free RTOS Learning \n\r");
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <main+0x7c>)
 80005e2:	f004 fd53 	bl	800508c <iprintf>
 80005e6:	e7fb      	b.n	80005e0 <main+0x5c>
 80005e8:	08005fc0 	.word	0x08005fc0
 80005ec:	08000605 	.word	0x08000605
 80005f0:	08005fd4 	.word	0x08005fd4
 80005f4:	08000631 	.word	0x08000631
 80005f8:	08005fe8 	.word	0x08005fe8
 80005fc:	0800065d 	.word	0x0800065d
 8000600:	08006000 	.word	0x08006000

08000604 <pBlueLedController>:

}


void pBlueLedController(void *pvParameters)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("BlueLedController is handling the task\n\r");
 800060c:	4806      	ldr	r0, [pc, #24]	; (8000628 <pBlueLedController+0x24>)
 800060e:	f004 fd3d 	bl	800508c <iprintf>
		BlueProfiler++;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <pBlueLedController+0x28>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <pBlueLedController+0x28>)
 800061a:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 800061c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000620:	f000 fb26 	bl	8000c70 <HAL_Delay>
		printf("BlueLedController is handling the task\n\r");
 8000624:	e7f2      	b.n	800060c <pBlueLedController+0x8>
 8000626:	bf00      	nop
 8000628:	08006024 	.word	0x08006024
 800062c:	20000090 	.word	0x20000090

08000630 <pRedLedController>:
	}
}


void pRedLedController(void *pvParameters)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("RedLedController is handling the task\n\r");
 8000638:	4806      	ldr	r0, [pc, #24]	; (8000654 <pRedLedController+0x24>)
 800063a:	f004 fd27 	bl	800508c <iprintf>
		RedProfiler++;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <pRedLedController+0x28>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <pRedLedController+0x28>)
 8000646:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 8000648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064c:	f000 fb10 	bl	8000c70 <HAL_Delay>
		printf("RedLedController is handling the task\n\r");
 8000650:	e7f2      	b.n	8000638 <pRedLedController+0x8>
 8000652:	bf00      	nop
 8000654:	08006050 	.word	0x08006050
 8000658:	20000094 	.word	0x20000094

0800065c <pGreenLedController>:
	}
}

void pGreenLedController(void *pvParameters)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	while(1)
	{
		 printf("GreenLedController is handling the task\n\r");
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <pGreenLedController+0x24>)
 8000666:	f004 fd11 	bl	800508c <iprintf>
		GreenProfiler++;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <pGreenLedController+0x28>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <pGreenLedController+0x28>)
 8000672:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 8000674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000678:	f000 fafa 	bl	8000c70 <HAL_Delay>
		 printf("GreenLedController is handling the task\n\r");
 800067c:	e7f2      	b.n	8000664 <pGreenLedController+0x8>
 800067e:	bf00      	nop
 8000680:	08006078 	.word	0x08006078
 8000684:	20000098 	.word	0x20000098

08000688 <__io_putchar>:
	}
}


int __io_putchar(int ch)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)&ch,1,0xFFFF);
 8000690:	1d39      	adds	r1, r7, #4
 8000692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000696:	2201      	movs	r2, #1
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <__io_putchar+0x20>)
 800069a:	f001 fd0a 	bl	80020b2 <HAL_UART_Transmit>
	return 0;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000009c 	.word	0x2000009c

080006ac <SystemClock_Config>:

void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 fcde 	bl	800507c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <SystemClock_Config+0xb4>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a21      	ldr	r2, [pc, #132]	; (8000760 <SystemClock_Config+0xb4>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <SystemClock_Config+0xb4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <SystemClock_Config+0xb8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <SystemClock_Config+0xb8>)
 80006f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b19      	ldr	r3, [pc, #100]	; (8000764 <SystemClock_Config+0xb8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000714:	2300      	movs	r3, #0
 8000716:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fd31 	bl	8001184 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000728:	f000 f874 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f000 ff94 	bl	8001674 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000752:	f000 f85f 	bl	8000814 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f001 fc3a 	bl	8002018 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f833 	bl	8000814 <Error_Handler>
  }

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000009c 	.word	0x2000009c
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_GPIO_Init+0x30>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <MX_GPIO_Init+0x30>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_GPIO_Init+0x30>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a04      	ldr	r2, [pc, #16]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d101      	bne.n	8000806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000802:	f000 fa15 	bl	8000c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010000 	.word	0x40010000

08000814 <Error_Handler>:

void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_MspInit+0x54>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <HAL_MspInit+0x54>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x54>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_MspInit+0x54>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <HAL_MspInit+0x54>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_MspInit+0x54>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	210f      	movs	r1, #15
 8000862:	f06f 0001 	mvn.w	r0, #1
 8000866:	f000 fadf 	bl	8000e28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a19      	ldr	r2, [pc, #100]	; (80008fc <HAL_UART_MspInit+0x84>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d12b      	bne.n	80008f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_UART_MspInit+0x88>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a17      	ldr	r2, [pc, #92]	; (8000900 <HAL_UART_MspInit+0x88>)
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_UART_MspInit+0x88>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_UART_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <HAL_UART_MspInit+0x88>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_UART_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d2:	230c      	movs	r3, #12
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e2:	2307      	movs	r3, #7
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <HAL_UART_MspInit+0x8c>)
 80008ee:	f000 fac5 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f2:	bf00      	nop
 80008f4:	3728      	adds	r7, #40	; 0x28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40004400 	.word	0x40004400
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000

08000908 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <HAL_InitTick+0xd0>)
 800091e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000920:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <HAL_InitTick+0xd0>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6453      	str	r3, [r2, #68]	; 0x44
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <HAL_InitTick+0xd0>)
 800092a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000934:	f107 020c 	add.w	r2, r7, #12
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f001 f8b8 	bl	8001ab4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000944:	f001 f8a2 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8000948:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094c:	4a23      	ldr	r2, [pc, #140]	; (80009dc <HAL_InitTick+0xd4>)
 800094e:	fba2 2303 	umull	r2, r3, r2, r3
 8000952:	0c9b      	lsrs	r3, r3, #18
 8000954:	3b01      	subs	r3, #1
 8000956:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <HAL_InitTick+0xd8>)
 800095a:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <HAL_InitTick+0xdc>)
 800095c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <HAL_InitTick+0xd8>)
 8000960:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000964:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000966:	4a1e      	ldr	r2, [pc, #120]	; (80009e0 <HAL_InitTick+0xd8>)
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <HAL_InitTick+0xd8>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <HAL_InitTick+0xd8>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_InitTick+0xd8>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800097e:	4818      	ldr	r0, [pc, #96]	; (80009e0 <HAL_InitTick+0xd8>)
 8000980:	f001 f8ca 	bl	8001b18 <HAL_TIM_Base_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800098a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800098e:	2b00      	cmp	r3, #0
 8000990:	d11b      	bne.n	80009ca <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000992:	4813      	ldr	r0, [pc, #76]	; (80009e0 <HAL_InitTick+0xd8>)
 8000994:	f001 f91a 	bl	8001bcc <HAL_TIM_Base_Start_IT>
 8000998:	4603      	mov	r3, r0
 800099a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800099e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d111      	bne.n	80009ca <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009a6:	2019      	movs	r0, #25
 80009a8:	f000 fa5a 	bl	8000e60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d808      	bhi.n	80009c4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80009b2:	2200      	movs	r2, #0
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	2019      	movs	r0, #25
 80009b8:	f000 fa36 	bl	8000e28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009bc:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_InitTick+0xe0>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
 80009c2:	e002      	b.n	80009ca <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3730      	adds	r7, #48	; 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	431bde83 	.word	0x431bde83
 80009e0:	200000e0 	.word	0x200000e0
 80009e4:	40010000 	.word	0x40010000
 80009e8:	20000004 	.word	0x20000004

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a1c:	4802      	ldr	r0, [pc, #8]	; (8000a28 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a1e:	f001 f937 	bl	8001c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000e0 	.word	0x200000e0

08000a2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	e00a      	b.n	8000a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a3e:	f3af 8000 	nop.w
 8000a42:	4601      	mov	r1, r0
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	60ba      	str	r2, [r7, #8]
 8000a4a:	b2ca      	uxtb	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbf0      	blt.n	8000a3e <_read+0x12>
  }

  return len;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	e009      	b.n	8000a8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fe01 	bl	8000688 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf1      	blt.n	8000a78 <_write+0x12>
  }
  return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_close>:

int _close(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_isatty>:

int _isatty(int file)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b10:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <_sbrk+0x5c>)
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <_sbrk+0x60>)
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_sbrk+0x64>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <_sbrk+0x68>)
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d207      	bcs.n	8000b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b38:	f004 fa68 	bl	800500c <__errno>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	220c      	movs	r2, #12
 8000b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b46:	e009      	b.n	8000b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <_sbrk+0x64>)
 8000b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20020000 	.word	0x20020000
 8000b68:	00000400 	.word	0x00000400
 8000b6c:	20000128 	.word	0x20000128
 8000b70:	20004a90 	.word	0x20004a90

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <SystemInit+0x20>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <SystemInit+0x20>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9e:	490e      	ldr	r1, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba0:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba4:	e002      	b.n	8000bac <LoopCopyDataInit>

08000ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000baa:	3304      	adds	r3, #4

08000bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb0:	d3f9      	bcc.n	8000ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb4:	4c0b      	ldr	r4, [pc, #44]	; (8000be4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb8:	e001      	b.n	8000bbe <LoopFillZerobss>

08000bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bbc:	3204      	adds	r2, #4

08000bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc0:	d3fb      	bcc.n	8000bba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc2:	f7ff ffd7 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f004 fa27 	bl	8005018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fcdb 	bl	8000584 <main>
  bx  lr    
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bdc:	0800617c 	.word	0x0800617c
  ldr r2, =_sbss
 8000be0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000be4:	20004a8c 	.word	0x20004a8c

08000be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_Init+0x40>)
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_Init+0x40>)
 8000c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <HAL_Init+0x40>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <HAL_Init+0x40>)
 8000c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f8fc 	bl	8000e12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f7ff fe74 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c20:	f7ff fdfe 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023c00 	.word	0x40023c00

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	2000012c 	.word	0x2000012c

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	2000012c 	.word	0x2000012c

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff ffee 	bl	8000c58 <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Delay+0x44>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c96:	bf00      	nop
 8000c98:	f7ff ffde 	bl	8000c58 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
  {
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff4c 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3a:	f7ff ff61 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	6978      	ldr	r0, [r7, #20]
 8000e46:	f7ff ffb1 	bl	8000dac <NVIC_EncodePriority>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff80 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e58:	bf00      	nop
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff54 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	e159      	b.n	800114c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 8148 	bne.w	8001146 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d005      	beq.n	8000ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d130      	bne.n	8000f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	f003 0201 	and.w	r2, r3, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d017      	beq.n	8000f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	69b9      	ldr	r1, [r7, #24]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80a2 	beq.w	8001146 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b57      	ldr	r3, [pc, #348]	; (8001164 <HAL_GPIO_Init+0x2e8>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a56      	ldr	r2, [pc, #344]	; (8001164 <HAL_GPIO_Init+0x2e8>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b54      	ldr	r3, [pc, #336]	; (8001164 <HAL_GPIO_Init+0x2e8>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101e:	4a52      	ldr	r2, [pc, #328]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a49      	ldr	r2, [pc, #292]	; (800116c <HAL_GPIO_Init+0x2f0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x202>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a48      	ldr	r2, [pc, #288]	; (8001170 <HAL_GPIO_Init+0x2f4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x1fe>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a47      	ldr	r2, [pc, #284]	; (8001174 <HAL_GPIO_Init+0x2f8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x1fa>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a46      	ldr	r2, [pc, #280]	; (8001178 <HAL_GPIO_Init+0x2fc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x1f6>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a45      	ldr	r2, [pc, #276]	; (800117c <HAL_GPIO_Init+0x300>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x1f2>
 800106a:	2304      	movs	r3, #4
 800106c:	e008      	b.n	8001080 <HAL_GPIO_Init+0x204>
 800106e:	2307      	movs	r3, #7
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x204>
 8001072:	2303      	movs	r3, #3
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x204>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x204>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x204>
 800107e:	2300      	movs	r3, #0
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	f002 0203 	and.w	r2, r2, #3
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001090:	4935      	ldr	r1, [pc, #212]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109e:	4b38      	ldr	r3, [pc, #224]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c2:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ec:	4a24      	ldr	r2, [pc, #144]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001116:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <HAL_GPIO_Init+0x304>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_GPIO_Init+0x304>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001140:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <HAL_GPIO_Init+0x304>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	f67f aea2 	bls.w	8000e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40013800 	.word	0x40013800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40021000 	.word	0x40021000
 8001180:	40013c00 	.word	0x40013c00

08001184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e267      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d075      	beq.n	800128e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a2:	4b88      	ldr	r3, [pc, #544]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d00c      	beq.n	80011c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ae:	4b85      	ldr	r3, [pc, #532]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d112      	bne.n	80011e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ba:	4b82      	ldr	r3, [pc, #520]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011c6:	d10b      	bne.n	80011e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	4b7e      	ldr	r3, [pc, #504]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d05b      	beq.n	800128c <HAL_RCC_OscConfig+0x108>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d157      	bne.n	800128c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e242      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e8:	d106      	bne.n	80011f8 <HAL_RCC_OscConfig+0x74>
 80011ea:	4b76      	ldr	r3, [pc, #472]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a75      	ldr	r2, [pc, #468]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e01d      	b.n	8001234 <HAL_RCC_OscConfig+0xb0>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0x98>
 8001202:	4b70      	ldr	r3, [pc, #448]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a6f      	ldr	r2, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b6d      	ldr	r3, [pc, #436]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6c      	ldr	r2, [pc, #432]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0xb0>
 800121c:	4b69      	ldr	r3, [pc, #420]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a68      	ldr	r2, [pc, #416]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b66      	ldr	r3, [pc, #408]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a65      	ldr	r2, [pc, #404]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fd0c 	bl	8000c58 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fd08 	bl	8000c58 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e207      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b5b      	ldr	r3, [pc, #364]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0xc0>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fcf8 	bl	8000c58 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fcf4 	bl	8000c58 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1f3      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	4b51      	ldr	r3, [pc, #324]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0xe8>
 800128a:	e000      	b.n	800128e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d063      	beq.n	8001362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129a:	4b4a      	ldr	r3, [pc, #296]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a6:	4b47      	ldr	r3, [pc, #284]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d11c      	bne.n	80012ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012b2:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d116      	bne.n	80012ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x152>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e1c7      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4937      	ldr	r1, [pc, #220]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	e03a      	b.n	8001362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d020      	beq.n	8001336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f4:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <HAL_RCC_OscConfig+0x244>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fa:	f7ff fcad 	bl	8000c58 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fca9 	bl	8000c58 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1a8      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b28      	ldr	r3, [pc, #160]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4925      	ldr	r1, [pc, #148]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <HAL_RCC_OscConfig+0x244>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff fc8c 	bl	8000c58 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fc88 	bl	8000c58 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e187      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d036      	beq.n	80013dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d016      	beq.n	80013a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_RCC_OscConfig+0x248>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137c:	f7ff fc6c 	bl	8000c58 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fc68 	bl	8000c58 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e167      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_RCC_OscConfig+0x240>)
 8001398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x200>
 80013a2:	e01b      	b.n	80013dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_RCC_OscConfig+0x248>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fc55 	bl	8000c58 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	e00e      	b.n	80013d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff fc51 	bl	8000c58 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d907      	bls.n	80013d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e150      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
 80013c4:	40023800 	.word	0x40023800
 80013c8:	42470000 	.word	0x42470000
 80013cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d0:	4b88      	ldr	r3, [pc, #544]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80013d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ea      	bne.n	80013b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 8097 	beq.w	8001518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ee:	4b81      	ldr	r3, [pc, #516]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10f      	bne.n	800141a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b7d      	ldr	r3, [pc, #500]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a7c      	ldr	r2, [pc, #496]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b7a      	ldr	r3, [pc, #488]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001416:	2301      	movs	r3, #1
 8001418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	4b77      	ldr	r3, [pc, #476]	; (80015f8 <HAL_RCC_OscConfig+0x474>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d118      	bne.n	8001458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001426:	4b74      	ldr	r3, [pc, #464]	; (80015f8 <HAL_RCC_OscConfig+0x474>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a73      	ldr	r2, [pc, #460]	; (80015f8 <HAL_RCC_OscConfig+0x474>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001432:	f7ff fc11 	bl	8000c58 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143a:	f7ff fc0d 	bl	8000c58 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e10c      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	4b6a      	ldr	r3, [pc, #424]	; (80015f8 <HAL_RCC_OscConfig+0x474>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x2ea>
 8001460:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001464:	4a63      	ldr	r2, [pc, #396]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6713      	str	r3, [r2, #112]	; 0x70
 800146c:	e01c      	b.n	80014a8 <HAL_RCC_OscConfig+0x324>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x30c>
 8001476:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147a:	4a5e      	ldr	r2, [pc, #376]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6713      	str	r3, [r2, #112]	; 0x70
 8001482:	4b5c      	ldr	r3, [pc, #368]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	4a5b      	ldr	r2, [pc, #364]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6713      	str	r3, [r2, #112]	; 0x70
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0x324>
 8001490:	4b58      	ldr	r3, [pc, #352]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a57      	ldr	r2, [pc, #348]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	4b55      	ldr	r3, [pc, #340]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	4a54      	ldr	r2, [pc, #336]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80014a2:	f023 0304 	bic.w	r3, r3, #4
 80014a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d015      	beq.n	80014dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fbd2 	bl	8000c58 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff fbce 	bl	8000c58 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e0cb      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ce:	4b49      	ldr	r3, [pc, #292]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0ee      	beq.n	80014b8 <HAL_RCC_OscConfig+0x334>
 80014da:	e014      	b.n	8001506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014dc:	f7ff fbbc 	bl	8000c58 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e4:	f7ff fbb8 	bl	8000c58 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e0b5      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fa:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1ee      	bne.n	80014e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800150c:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	4a38      	ldr	r2, [pc, #224]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80a1 	beq.w	8001664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b08      	cmp	r3, #8
 800152c:	d05c      	beq.n	80015e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d141      	bne.n	80015ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <HAL_RCC_OscConfig+0x478>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fb8c 	bl	8000c58 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fb88 	bl	8000c58 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e087      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001556:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69da      	ldr	r2, [r3, #28]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001570:	019b      	lsls	r3, r3, #6
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	085b      	lsrs	r3, r3, #1
 800157a:	3b01      	subs	r3, #1
 800157c:	041b      	lsls	r3, r3, #16
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	061b      	lsls	r3, r3, #24
 8001586:	491b      	ldr	r1, [pc, #108]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_RCC_OscConfig+0x478>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7ff fb61 	bl	8000c58 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff fb5d 	bl	8000c58 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e05c      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x416>
 80015b8:	e054      	b.n	8001664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_RCC_OscConfig+0x478>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb4a 	bl	8000c58 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff fb46 	bl	8000c58 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e045      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015da:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_RCC_OscConfig+0x470>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x444>
 80015e6:	e03d      	b.n	8001664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d107      	bne.n	8001600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e038      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000
 80015fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x4ec>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d028      	beq.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d121      	bne.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d11a      	bne.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001630:	4013      	ands	r3, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001638:	4293      	cmp	r3, r2
 800163a:	d111      	bne.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001646:	085b      	lsrs	r3, r3, #1
 8001648:	3b01      	subs	r3, #1
 800164a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d107      	bne.n	8001660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0cc      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4b68      	ldr	r3, [pc, #416]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d90c      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b65      	ldr	r3, [pc, #404]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0b8      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c8:	4b59      	ldr	r3, [pc, #356]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	4a58      	ldr	r2, [pc, #352]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e0:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4a52      	ldr	r2, [pc, #328]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ec:	4b50      	ldr	r3, [pc, #320]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	494d      	ldr	r1, [pc, #308]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	d044      	beq.n	8001794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d107      	bne.n	8001722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d119      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e07f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d003      	beq.n	8001732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172e:	2b03      	cmp	r3, #3
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e067      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001752:	4b37      	ldr	r3, [pc, #220]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f023 0203 	bic.w	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4934      	ldr	r1, [pc, #208]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	4313      	orrs	r3, r2
 8001762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001764:	f7ff fa78 	bl	8000c58 <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff fa74 	bl	8000c58 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e04f      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 020c 	and.w	r2, r3, #12
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	429a      	cmp	r2, r3
 8001792:	d1eb      	bne.n	800176c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b25      	ldr	r3, [pc, #148]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d20c      	bcs.n	80017bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e032      	b.n	8001822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	4916      	ldr	r1, [pc, #88]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d009      	beq.n	80017fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	490e      	ldr	r1, [pc, #56]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fa:	f000 f821 	bl	8001840 <HAL_RCC_GetSysClockFreq>
 80017fe:	4602      	mov	r2, r0
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	490a      	ldr	r1, [pc, #40]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	5ccb      	ldrb	r3, [r1, r3]
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	4a09      	ldr	r2, [pc, #36]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1c8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff f874 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023c00 	.word	0x40023c00
 8001830:	40023800 	.word	0x40023800
 8001834:	080060bc 	.word	0x080060bc
 8001838:	20000000 	.word	0x20000000
 800183c:	20000004 	.word	0x20000004

08001840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001844:	b094      	sub	sp, #80	; 0x50
 8001846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	647b      	str	r3, [r7, #68]	; 0x44
 800184c:	2300      	movs	r3, #0
 800184e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001850:	2300      	movs	r3, #0
 8001852:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001858:	4b79      	ldr	r3, [pc, #484]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d00d      	beq.n	8001880 <HAL_RCC_GetSysClockFreq+0x40>
 8001864:	2b08      	cmp	r3, #8
 8001866:	f200 80e1 	bhi.w	8001a2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x34>
 800186e:	2b04      	cmp	r3, #4
 8001870:	d003      	beq.n	800187a <HAL_RCC_GetSysClockFreq+0x3a>
 8001872:	e0db      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001874:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001876:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001878:	e0db      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800187a:	4b73      	ldr	r3, [pc, #460]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x208>)
 800187c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800187e:	e0d8      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001880:	4b6f      	ldr	r3, [pc, #444]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001888:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188a:	4b6d      	ldr	r3, [pc, #436]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d063      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001896:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	099b      	lsrs	r3, r3, #6
 800189c:	2200      	movs	r2, #0
 800189e:	63bb      	str	r3, [r7, #56]	; 0x38
 80018a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
 80018aa:	2300      	movs	r3, #0
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
 80018ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018b2:	4622      	mov	r2, r4
 80018b4:	462b      	mov	r3, r5
 80018b6:	f04f 0000 	mov.w	r0, #0
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	0159      	lsls	r1, r3, #5
 80018c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c4:	0150      	lsls	r0, r2, #5
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4621      	mov	r1, r4
 80018cc:	1a51      	subs	r1, r2, r1
 80018ce:	6139      	str	r1, [r7, #16]
 80018d0:	4629      	mov	r1, r5
 80018d2:	eb63 0301 	sbc.w	r3, r3, r1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018e4:	4659      	mov	r1, fp
 80018e6:	018b      	lsls	r3, r1, #6
 80018e8:	4651      	mov	r1, sl
 80018ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ee:	4651      	mov	r1, sl
 80018f0:	018a      	lsls	r2, r1, #6
 80018f2:	4651      	mov	r1, sl
 80018f4:	ebb2 0801 	subs.w	r8, r2, r1
 80018f8:	4659      	mov	r1, fp
 80018fa:	eb63 0901 	sbc.w	r9, r3, r1
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800190a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800190e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001912:	4690      	mov	r8, r2
 8001914:	4699      	mov	r9, r3
 8001916:	4623      	mov	r3, r4
 8001918:	eb18 0303 	adds.w	r3, r8, r3
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	462b      	mov	r3, r5
 8001920:	eb49 0303 	adc.w	r3, r9, r3
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001932:	4629      	mov	r1, r5
 8001934:	024b      	lsls	r3, r1, #9
 8001936:	4621      	mov	r1, r4
 8001938:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800193c:	4621      	mov	r1, r4
 800193e:	024a      	lsls	r2, r1, #9
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001946:	2200      	movs	r2, #0
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
 800194a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800194c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001950:	f7fe fc96 	bl	8000280 <__aeabi_uldivmod>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4613      	mov	r3, r2
 800195a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800195c:	e058      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195e:	4b38      	ldr	r3, [pc, #224]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	099b      	lsrs	r3, r3, #6
 8001964:	2200      	movs	r2, #0
 8001966:	4618      	mov	r0, r3
 8001968:	4611      	mov	r1, r2
 800196a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800196e:	623b      	str	r3, [r7, #32]
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
 8001974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001978:	4642      	mov	r2, r8
 800197a:	464b      	mov	r3, r9
 800197c:	f04f 0000 	mov.w	r0, #0
 8001980:	f04f 0100 	mov.w	r1, #0
 8001984:	0159      	lsls	r1, r3, #5
 8001986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198a:	0150      	lsls	r0, r2, #5
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4641      	mov	r1, r8
 8001992:	ebb2 0a01 	subs.w	sl, r2, r1
 8001996:	4649      	mov	r1, r9
 8001998:	eb63 0b01 	sbc.w	fp, r3, r1
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019b0:	ebb2 040a 	subs.w	r4, r2, sl
 80019b4:	eb63 050b 	sbc.w	r5, r3, fp
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	00eb      	lsls	r3, r5, #3
 80019c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019c6:	00e2      	lsls	r2, r4, #3
 80019c8:	4614      	mov	r4, r2
 80019ca:	461d      	mov	r5, r3
 80019cc:	4643      	mov	r3, r8
 80019ce:	18e3      	adds	r3, r4, r3
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	464b      	mov	r3, r9
 80019d4:	eb45 0303 	adc.w	r3, r5, r3
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019e6:	4629      	mov	r1, r5
 80019e8:	028b      	lsls	r3, r1, #10
 80019ea:	4621      	mov	r1, r4
 80019ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019f0:	4621      	mov	r1, r4
 80019f2:	028a      	lsls	r2, r1, #10
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fa:	2200      	movs	r2, #0
 80019fc:	61bb      	str	r3, [r7, #24]
 80019fe:	61fa      	str	r2, [r7, #28]
 8001a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a04:	f7fe fc3c 	bl	8000280 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	0c1b      	lsrs	r3, r3, #16
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a2a:	e002      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3750      	adds	r7, #80	; 0x50
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	00f42400 	.word	0x00f42400
 8001a48:	007a1200 	.word	0x007a1200

08001a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000000 	.word	0x20000000

08001a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a68:	f7ff fff0 	bl	8001a4c <HAL_RCC_GetHCLKFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	0a9b      	lsrs	r3, r3, #10
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	4903      	ldr	r1, [pc, #12]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	080060cc 	.word	0x080060cc

08001a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a90:	f7ff ffdc 	bl	8001a4c <HAL_RCC_GetHCLKFreq>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	0b5b      	lsrs	r3, r3, #13
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	4903      	ldr	r1, [pc, #12]	; (8001ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa2:	5ccb      	ldrb	r3, [r1, r3]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	080060cc 	.word	0x080060cc

08001ab4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_RCC_GetClockConfig+0x5c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCC_GetClockConfig+0x5c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	08db      	lsrs	r3, r3, #3
 8001aee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_RCC_GetClockConfig+0x60>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0207 	and.w	r2, r3, #7
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	601a      	str	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40023c00 	.word	0x40023c00

08001b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e041      	b.n	8001bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f839 	bl	8001bb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3304      	adds	r3, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f000 f9ca 	bl	8001ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d001      	beq.n	8001be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e044      	b.n	8001c6e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <HAL_TIM_Base_Start_IT+0xb0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d018      	beq.n	8001c38 <HAL_TIM_Base_Start_IT+0x6c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0e:	d013      	beq.n	8001c38 <HAL_TIM_Base_Start_IT+0x6c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00e      	beq.n	8001c38 <HAL_TIM_Base_Start_IT+0x6c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d009      	beq.n	8001c38 <HAL_TIM_Base_Start_IT+0x6c>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_TIM_Base_Start_IT+0xbc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d004      	beq.n	8001c38 <HAL_TIM_Base_Start_IT+0x6c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <HAL_TIM_Base_Start_IT+0xc0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d111      	bne.n	8001c5c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d010      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5a:	e007      	b.n	8001c6c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	40000400 	.word	0x40000400
 8001c84:	40000800 	.word	0x40000800
 8001c88:	40000c00 	.word	0x40000c00
 8001c8c:	40014000 	.word	0x40014000

08001c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d122      	bne.n	8001cec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d11b      	bne.n	8001cec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0202 	mvn.w	r2, #2
 8001cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8ee 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001cd8:	e005      	b.n	8001ce6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8e0 	bl	8001ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f8f1 	bl	8001ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d122      	bne.n	8001d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d11b      	bne.n	8001d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0204 	mvn.w	r2, #4
 8001d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8c4 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8b6 	bl	8001ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8c7 	bl	8001ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d122      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d11b      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0208 	mvn.w	r2, #8
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2204      	movs	r2, #4
 8001d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f89a 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001d80:	e005      	b.n	8001d8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f88c 	bl	8001ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f89d 	bl	8001ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d122      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d11b      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0210 	mvn.w	r2, #16
 8001db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f870 	bl	8001eb4 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f862 	bl	8001ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f873 	bl	8001ec8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d10e      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d107      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0201 	mvn.w	r2, #1
 8001e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7fe fcee 	bl	80007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1e:	2b80      	cmp	r3, #128	; 0x80
 8001e20:	d10e      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2c:	2b80      	cmp	r3, #128	; 0x80
 8001e2e:	d107      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8e2 	bl	8002004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4a:	2b40      	cmp	r3, #64	; 0x40
 8001e4c:	d10e      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e58:	2b40      	cmp	r3, #64	; 0x40
 8001e5a:	d107      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f838 	bl	8001edc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d10e      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b20      	cmp	r3, #32
 8001e86:	d107      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0220 	mvn.w	r2, #32
 8001e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8ac 	bl	8001ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a34      	ldr	r2, [pc, #208]	; (8001fd4 <TIM_Base_SetConfig+0xe4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00f      	beq.n	8001f28 <TIM_Base_SetConfig+0x38>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0e:	d00b      	beq.n	8001f28 <TIM_Base_SetConfig+0x38>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a31      	ldr	r2, [pc, #196]	; (8001fd8 <TIM_Base_SetConfig+0xe8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <TIM_Base_SetConfig+0x38>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a30      	ldr	r2, [pc, #192]	; (8001fdc <TIM_Base_SetConfig+0xec>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d003      	beq.n	8001f28 <TIM_Base_SetConfig+0x38>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a2f      	ldr	r2, [pc, #188]	; (8001fe0 <TIM_Base_SetConfig+0xf0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d108      	bne.n	8001f3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a25      	ldr	r2, [pc, #148]	; (8001fd4 <TIM_Base_SetConfig+0xe4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01b      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f48:	d017      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a22      	ldr	r2, [pc, #136]	; (8001fd8 <TIM_Base_SetConfig+0xe8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a21      	ldr	r2, [pc, #132]	; (8001fdc <TIM_Base_SetConfig+0xec>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00f      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <TIM_Base_SetConfig+0xf0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00b      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <TIM_Base_SetConfig+0xf4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d007      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <TIM_Base_SetConfig+0xf8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d003      	beq.n	8001f7a <TIM_Base_SetConfig+0x8a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <TIM_Base_SetConfig+0xfc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d108      	bne.n	8001f8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <TIM_Base_SetConfig+0xe4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d103      	bne.n	8001fc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	615a      	str	r2, [r3, #20]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40000400 	.word	0x40000400
 8001fdc:	40000800 	.word	0x40000800
 8001fe0:	40000c00 	.word	0x40000c00
 8001fe4:	40014000 	.word	0x40014000
 8001fe8:	40014400 	.word	0x40014400
 8001fec:	40014800 	.word	0x40014800

08001ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e03f      	b.n	80020aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fc1a 	bl	8000878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2224      	movs	r2, #36	; 0x24
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800205a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f929 	bl	80022b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b08a      	sub	sp, #40	; 0x28
 80020b6:	af02      	add	r7, sp, #8
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	603b      	str	r3, [r7, #0]
 80020be:	4613      	mov	r3, r2
 80020c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b20      	cmp	r3, #32
 80020d0:	d17c      	bne.n	80021cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d002      	beq.n	80020de <HAL_UART_Transmit+0x2c>
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e075      	b.n	80021ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_UART_Transmit+0x3e>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e06e      	b.n	80021ce <HAL_UART_Transmit+0x11c>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2221      	movs	r2, #33	; 0x21
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002106:	f7fe fda7 	bl	8000c58 <HAL_GetTick>
 800210a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002120:	d108      	bne.n	8002134 <HAL_UART_Transmit+0x82>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d104      	bne.n	8002134 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	61bb      	str	r3, [r7, #24]
 8002132:	e003      	b.n	800213c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002138:	2300      	movs	r3, #0
 800213a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002144:	e02a      	b.n	800219c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2200      	movs	r2, #0
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 f840 	bl	80021d6 <UART_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e036      	b.n	80021ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10b      	bne.n	800217e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002174:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	3302      	adds	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	e007      	b.n	800218e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	3301      	adds	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1cf      	bne.n	8002146 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2200      	movs	r2, #0
 80021ae:	2140      	movs	r1, #64	; 0x40
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f810 	bl	80021d6 <UART_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e006      	b.n	80021ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
  }
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3720      	adds	r7, #32
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b090      	sub	sp, #64	; 0x40
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	603b      	str	r3, [r7, #0]
 80021e2:	4613      	mov	r3, r2
 80021e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021e6:	e050      	b.n	800228a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ee:	d04c      	beq.n	800228a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d007      	beq.n	8002206 <UART_WaitOnFlagUntilTimeout+0x30>
 80021f6:	f7fe fd2f 	bl	8000c58 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002202:	429a      	cmp	r2, r3
 8002204:	d241      	bcs.n	800228a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	330c      	adds	r3, #12
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	e853 3f00 	ldrex	r3, [r3]
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800221c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	330c      	adds	r3, #12
 8002224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002226:	637a      	str	r2, [r7, #52]	; 0x34
 8002228:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800222a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800222c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800222e:	e841 2300 	strex	r3, r2, [r1]
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1e5      	bne.n	8002206 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3314      	adds	r3, #20
 8002240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	e853 3f00 	ldrex	r3, [r3]
 8002248:	613b      	str	r3, [r7, #16]
   return(result);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f023 0301 	bic.w	r3, r3, #1
 8002250:	63bb      	str	r3, [r7, #56]	; 0x38
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3314      	adds	r3, #20
 8002258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800225a:	623a      	str	r2, [r7, #32]
 800225c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800225e:	69f9      	ldr	r1, [r7, #28]
 8002260:	6a3a      	ldr	r2, [r7, #32]
 8002262:	e841 2300 	strex	r3, r2, [r1]
 8002266:	61bb      	str	r3, [r7, #24]
   return(result);
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1e5      	bne.n	800223a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e00f      	b.n	80022aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4013      	ands	r3, r2
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	429a      	cmp	r2, r3
 8002298:	bf0c      	ite	eq
 800229a:	2301      	moveq	r3, #1
 800229c:	2300      	movne	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d09f      	beq.n	80021e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3740      	adds	r7, #64	; 0x40
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b8:	b0c0      	sub	sp, #256	; 0x100
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d0:	68d9      	ldr	r1, [r3, #12]
 80022d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	ea40 0301 	orr.w	r3, r0, r1
 80022dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800230c:	f021 010c 	bic.w	r1, r1, #12
 8002310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800231a:	430b      	orrs	r3, r1
 800231c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800231e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800232a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232e:	6999      	ldr	r1, [r3, #24]
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	ea40 0301 	orr.w	r3, r0, r1
 800233a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800233c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4b8f      	ldr	r3, [pc, #572]	; (8002580 <UART_SetConfig+0x2cc>)
 8002344:	429a      	cmp	r2, r3
 8002346:	d005      	beq.n	8002354 <UART_SetConfig+0xa0>
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b8d      	ldr	r3, [pc, #564]	; (8002584 <UART_SetConfig+0x2d0>)
 8002350:	429a      	cmp	r2, r3
 8002352:	d104      	bne.n	800235e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002354:	f7ff fb9a 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8002358:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800235c:	e003      	b.n	8002366 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800235e:	f7ff fb81 	bl	8001a64 <HAL_RCC_GetPCLK1Freq>
 8002362:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002370:	f040 810c 	bne.w	800258c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002378:	2200      	movs	r2, #0
 800237a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800237e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002382:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002386:	4622      	mov	r2, r4
 8002388:	462b      	mov	r3, r5
 800238a:	1891      	adds	r1, r2, r2
 800238c:	65b9      	str	r1, [r7, #88]	; 0x58
 800238e:	415b      	adcs	r3, r3
 8002390:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002392:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002396:	4621      	mov	r1, r4
 8002398:	eb12 0801 	adds.w	r8, r2, r1
 800239c:	4629      	mov	r1, r5
 800239e:	eb43 0901 	adc.w	r9, r3, r1
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023b6:	4690      	mov	r8, r2
 80023b8:	4699      	mov	r9, r3
 80023ba:	4623      	mov	r3, r4
 80023bc:	eb18 0303 	adds.w	r3, r8, r3
 80023c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023c4:	462b      	mov	r3, r5
 80023c6:	eb49 0303 	adc.w	r3, r9, r3
 80023ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80023de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80023e2:	460b      	mov	r3, r1
 80023e4:	18db      	adds	r3, r3, r3
 80023e6:	653b      	str	r3, [r7, #80]	; 0x50
 80023e8:	4613      	mov	r3, r2
 80023ea:	eb42 0303 	adc.w	r3, r2, r3
 80023ee:	657b      	str	r3, [r7, #84]	; 0x54
 80023f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80023f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80023f8:	f7fd ff42 	bl	8000280 <__aeabi_uldivmod>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4b61      	ldr	r3, [pc, #388]	; (8002588 <UART_SetConfig+0x2d4>)
 8002402:	fba3 2302 	umull	r2, r3, r3, r2
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	011c      	lsls	r4, r3, #4
 800240a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800240e:	2200      	movs	r2, #0
 8002410:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002414:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002418:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800241c:	4642      	mov	r2, r8
 800241e:	464b      	mov	r3, r9
 8002420:	1891      	adds	r1, r2, r2
 8002422:	64b9      	str	r1, [r7, #72]	; 0x48
 8002424:	415b      	adcs	r3, r3
 8002426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002428:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800242c:	4641      	mov	r1, r8
 800242e:	eb12 0a01 	adds.w	sl, r2, r1
 8002432:	4649      	mov	r1, r9
 8002434:	eb43 0b01 	adc.w	fp, r3, r1
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002444:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002448:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800244c:	4692      	mov	sl, r2
 800244e:	469b      	mov	fp, r3
 8002450:	4643      	mov	r3, r8
 8002452:	eb1a 0303 	adds.w	r3, sl, r3
 8002456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800245a:	464b      	mov	r3, r9
 800245c:	eb4b 0303 	adc.w	r3, fp, r3
 8002460:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002470:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002474:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002478:	460b      	mov	r3, r1
 800247a:	18db      	adds	r3, r3, r3
 800247c:	643b      	str	r3, [r7, #64]	; 0x40
 800247e:	4613      	mov	r3, r2
 8002480:	eb42 0303 	adc.w	r3, r2, r3
 8002484:	647b      	str	r3, [r7, #68]	; 0x44
 8002486:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800248a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800248e:	f7fd fef7 	bl	8000280 <__aeabi_uldivmod>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4611      	mov	r1, r2
 8002498:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <UART_SetConfig+0x2d4>)
 800249a:	fba3 2301 	umull	r2, r3, r3, r1
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2264      	movs	r2, #100	; 0x64
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	1acb      	subs	r3, r1, r3
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024ae:	4b36      	ldr	r3, [pc, #216]	; (8002588 <UART_SetConfig+0x2d4>)
 80024b0:	fba3 2302 	umull	r2, r3, r3, r2
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024bc:	441c      	add	r4, r3
 80024be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024c2:	2200      	movs	r2, #0
 80024c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80024d0:	4642      	mov	r2, r8
 80024d2:	464b      	mov	r3, r9
 80024d4:	1891      	adds	r1, r2, r2
 80024d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80024d8:	415b      	adcs	r3, r3
 80024da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80024e0:	4641      	mov	r1, r8
 80024e2:	1851      	adds	r1, r2, r1
 80024e4:	6339      	str	r1, [r7, #48]	; 0x30
 80024e6:	4649      	mov	r1, r9
 80024e8:	414b      	adcs	r3, r1
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80024f8:	4659      	mov	r1, fp
 80024fa:	00cb      	lsls	r3, r1, #3
 80024fc:	4651      	mov	r1, sl
 80024fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002502:	4651      	mov	r1, sl
 8002504:	00ca      	lsls	r2, r1, #3
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	4603      	mov	r3, r0
 800250c:	4642      	mov	r2, r8
 800250e:	189b      	adds	r3, r3, r2
 8002510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002514:	464b      	mov	r3, r9
 8002516:	460a      	mov	r2, r1
 8002518:	eb42 0303 	adc.w	r3, r2, r3
 800251c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800252c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002530:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002534:	460b      	mov	r3, r1
 8002536:	18db      	adds	r3, r3, r3
 8002538:	62bb      	str	r3, [r7, #40]	; 0x28
 800253a:	4613      	mov	r3, r2
 800253c:	eb42 0303 	adc.w	r3, r2, r3
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002546:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800254a:	f7fd fe99 	bl	8000280 <__aeabi_uldivmod>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <UART_SetConfig+0x2d4>)
 8002554:	fba3 1302 	umull	r1, r3, r3, r2
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	2164      	movs	r1, #100	; 0x64
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	3332      	adds	r3, #50	; 0x32
 8002566:	4a08      	ldr	r2, [pc, #32]	; (8002588 <UART_SetConfig+0x2d4>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	f003 0207 	and.w	r2, r3, #7
 8002572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4422      	add	r2, r4
 800257a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800257c:	e105      	b.n	800278a <UART_SetConfig+0x4d6>
 800257e:	bf00      	nop
 8002580:	40011000 	.word	0x40011000
 8002584:	40011400 	.word	0x40011400
 8002588:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800258c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002590:	2200      	movs	r2, #0
 8002592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002596:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800259a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800259e:	4642      	mov	r2, r8
 80025a0:	464b      	mov	r3, r9
 80025a2:	1891      	adds	r1, r2, r2
 80025a4:	6239      	str	r1, [r7, #32]
 80025a6:	415b      	adcs	r3, r3
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
 80025aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025ae:	4641      	mov	r1, r8
 80025b0:	1854      	adds	r4, r2, r1
 80025b2:	4649      	mov	r1, r9
 80025b4:	eb43 0501 	adc.w	r5, r3, r1
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	00eb      	lsls	r3, r5, #3
 80025c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025c6:	00e2      	lsls	r2, r4, #3
 80025c8:	4614      	mov	r4, r2
 80025ca:	461d      	mov	r5, r3
 80025cc:	4643      	mov	r3, r8
 80025ce:	18e3      	adds	r3, r4, r3
 80025d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025d4:	464b      	mov	r3, r9
 80025d6:	eb45 0303 	adc.w	r3, r5, r3
 80025da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80025de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025fa:	4629      	mov	r1, r5
 80025fc:	008b      	lsls	r3, r1, #2
 80025fe:	4621      	mov	r1, r4
 8002600:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002604:	4621      	mov	r1, r4
 8002606:	008a      	lsls	r2, r1, #2
 8002608:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800260c:	f7fd fe38 	bl	8000280 <__aeabi_uldivmod>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4b60      	ldr	r3, [pc, #384]	; (8002798 <UART_SetConfig+0x4e4>)
 8002616:	fba3 2302 	umull	r2, r3, r3, r2
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	011c      	lsls	r4, r3, #4
 800261e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002622:	2200      	movs	r2, #0
 8002624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002628:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800262c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002630:	4642      	mov	r2, r8
 8002632:	464b      	mov	r3, r9
 8002634:	1891      	adds	r1, r2, r2
 8002636:	61b9      	str	r1, [r7, #24]
 8002638:	415b      	adcs	r3, r3
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002640:	4641      	mov	r1, r8
 8002642:	1851      	adds	r1, r2, r1
 8002644:	6139      	str	r1, [r7, #16]
 8002646:	4649      	mov	r1, r9
 8002648:	414b      	adcs	r3, r1
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002658:	4659      	mov	r1, fp
 800265a:	00cb      	lsls	r3, r1, #3
 800265c:	4651      	mov	r1, sl
 800265e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002662:	4651      	mov	r1, sl
 8002664:	00ca      	lsls	r2, r1, #3
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	4603      	mov	r3, r0
 800266c:	4642      	mov	r2, r8
 800266e:	189b      	adds	r3, r3, r2
 8002670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002674:	464b      	mov	r3, r9
 8002676:	460a      	mov	r2, r1
 8002678:	eb42 0303 	adc.w	r3, r2, r3
 800267c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	67bb      	str	r3, [r7, #120]	; 0x78
 800268a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002698:	4649      	mov	r1, r9
 800269a:	008b      	lsls	r3, r1, #2
 800269c:	4641      	mov	r1, r8
 800269e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026a2:	4641      	mov	r1, r8
 80026a4:	008a      	lsls	r2, r1, #2
 80026a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026aa:	f7fd fde9 	bl	8000280 <__aeabi_uldivmod>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4b39      	ldr	r3, [pc, #228]	; (8002798 <UART_SetConfig+0x4e4>)
 80026b4:	fba3 1302 	umull	r1, r3, r3, r2
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	2164      	movs	r1, #100	; 0x64
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	3332      	adds	r3, #50	; 0x32
 80026c6:	4a34      	ldr	r2, [pc, #208]	; (8002798 <UART_SetConfig+0x4e4>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d2:	441c      	add	r4, r3
 80026d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d8:	2200      	movs	r2, #0
 80026da:	673b      	str	r3, [r7, #112]	; 0x70
 80026dc:	677a      	str	r2, [r7, #116]	; 0x74
 80026de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80026e2:	4642      	mov	r2, r8
 80026e4:	464b      	mov	r3, r9
 80026e6:	1891      	adds	r1, r2, r2
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	415b      	adcs	r3, r3
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026f2:	4641      	mov	r1, r8
 80026f4:	1851      	adds	r1, r2, r1
 80026f6:	6039      	str	r1, [r7, #0]
 80026f8:	4649      	mov	r1, r9
 80026fa:	414b      	adcs	r3, r1
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800270a:	4659      	mov	r1, fp
 800270c:	00cb      	lsls	r3, r1, #3
 800270e:	4651      	mov	r1, sl
 8002710:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002714:	4651      	mov	r1, sl
 8002716:	00ca      	lsls	r2, r1, #3
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	4603      	mov	r3, r0
 800271e:	4642      	mov	r2, r8
 8002720:	189b      	adds	r3, r3, r2
 8002722:	66bb      	str	r3, [r7, #104]	; 0x68
 8002724:	464b      	mov	r3, r9
 8002726:	460a      	mov	r2, r1
 8002728:	eb42 0303 	adc.w	r3, r2, r3
 800272c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800272e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	663b      	str	r3, [r7, #96]	; 0x60
 8002738:	667a      	str	r2, [r7, #100]	; 0x64
 800273a:	f04f 0200 	mov.w	r2, #0
 800273e:	f04f 0300 	mov.w	r3, #0
 8002742:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002746:	4649      	mov	r1, r9
 8002748:	008b      	lsls	r3, r1, #2
 800274a:	4641      	mov	r1, r8
 800274c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002750:	4641      	mov	r1, r8
 8002752:	008a      	lsls	r2, r1, #2
 8002754:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002758:	f7fd fd92 	bl	8000280 <__aeabi_uldivmod>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <UART_SetConfig+0x4e4>)
 8002762:	fba3 1302 	umull	r1, r3, r3, r2
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2164      	movs	r1, #100	; 0x64
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	3332      	adds	r3, #50	; 0x32
 8002774:	4a08      	ldr	r2, [pc, #32]	; (8002798 <UART_SetConfig+0x4e4>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	f003 020f 	and.w	r2, r3, #15
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4422      	add	r2, r4
 8002788:	609a      	str	r2, [r3, #8]
}
 800278a:	bf00      	nop
 800278c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002790:	46bd      	mov	sp, r7
 8002792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002796:	bf00      	nop
 8002798:	51eb851f 	.word	0x51eb851f

0800279c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <SysTick_Handler+0x1c>)
 80027a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80027a4:	f001 fbc8 	bl	8003f38 <xTaskGetSchedulerState>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d001      	beq.n	80027b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80027ae:	f002 f9b3 	bl	8004b18 <xPortSysTickHandler>
  }
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	e000e010 	.word	0xe000e010

080027bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a07      	ldr	r2, [pc, #28]	; (80027e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80027cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4a06      	ldr	r2, [pc, #24]	; (80027ec <vApplicationGetIdleTaskMemory+0x30>)
 80027d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2280      	movs	r2, #128	; 0x80
 80027d8:	601a      	str	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000130 	.word	0x20000130
 80027ec:	2000018c 	.word	0x2000018c

080027f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a07      	ldr	r2, [pc, #28]	; (800281c <vApplicationGetTimerTaskMemory+0x2c>)
 8002800:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	4a06      	ldr	r2, [pc, #24]	; (8002820 <vApplicationGetTimerTaskMemory+0x30>)
 8002806:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800280e:	601a      	str	r2, [r3, #0]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	2000038c 	.word	0x2000038c
 8002820:	200003e8 	.word	0x200003e8

08002824 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f103 0208 	add.w	r2, r3, #8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800283c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f103 0208 	add.w	r2, r3, #8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f103 0208 	add.w	r2, r3, #8
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028dc:	d103      	bne.n	80028e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	e00c      	b.n	8002900 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3308      	adds	r3, #8
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e002      	b.n	80028f4 <vListInsert+0x2e>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d2f6      	bcs.n	80028ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6892      	ldr	r2, [r2, #8]
 800294e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6852      	ldr	r2, [r2, #4]
 8002958:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	d103      	bne.n	800296c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	1e5a      	subs	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10a      	bne.n	80029b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029b2:	bf00      	nop
 80029b4:	e7fe      	b.n	80029b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029b6:	f002 f81d 	bl	80049f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	68f9      	ldr	r1, [r7, #12]
 80029c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	441a      	add	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	3b01      	subs	r3, #1
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	441a      	add	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	22ff      	movs	r2, #255	; 0xff
 80029fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	22ff      	movs	r2, #255	; 0xff
 8002a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d114      	bne.n	8002a36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01a      	beq.n	8002a4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3310      	adds	r3, #16
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f001 f8cf 	bl	8003bbc <xTaskRemoveFromEventList>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d012      	beq.n	8002a4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <xQueueGenericReset+0xcc>)
 8002a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	f3bf 8f6f 	isb	sy
 8002a34:	e009      	b.n	8002a4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3310      	adds	r3, #16
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fef2 	bl	8002824 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3324      	adds	r3, #36	; 0x24
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff feed 	bl	8002824 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a4a:	f002 f803 	bl	8004a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	e000ed04 	.word	0xe000ed04

08002a5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08e      	sub	sp, #56	; 0x38
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a9e:	bf00      	nop
 8002aa0:	e7fe      	b.n	8002aa0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <xQueueGenericCreateStatic+0x52>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <xQueueGenericCreateStatic+0x56>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <xQueueGenericCreateStatic+0x58>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	623b      	str	r3, [r7, #32]
}
 8002aca:	bf00      	nop
 8002acc:	e7fe      	b.n	8002acc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <xQueueGenericCreateStatic+0x7e>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <xQueueGenericCreateStatic+0x82>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <xQueueGenericCreateStatic+0x84>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	61fb      	str	r3, [r7, #28]
}
 8002af6:	bf00      	nop
 8002af8:	e7fe      	b.n	8002af8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002afa:	2350      	movs	r3, #80	; 0x50
 8002afc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b50      	cmp	r3, #80	; 0x50
 8002b02:	d00a      	beq.n	8002b1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	61bb      	str	r3, [r7, #24]
}
 8002b16:	bf00      	nop
 8002b18:	e7fe      	b.n	8002b18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	4613      	mov	r3, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f805 	bl	8002b4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3730      	adds	r7, #48	; 0x30
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d103      	bne.n	8002b68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e002      	b.n	8002b6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	69b8      	ldr	r0, [r7, #24]
 8002b7e:	f7ff ff05 	bl	800298c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08e      	sub	sp, #56	; 0x38
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <xQueueGenericSend+0x32>
	__asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <xQueueGenericSend+0x40>
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <xQueueGenericSend+0x44>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <xQueueGenericSend+0x46>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10a      	bne.n	8002bf4 <xQueueGenericSend+0x60>
	__asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002bf0:	bf00      	nop
 8002bf2:	e7fe      	b.n	8002bf2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d103      	bne.n	8002c02 <xQueueGenericSend+0x6e>
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <xQueueGenericSend+0x72>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <xQueueGenericSend+0x74>
 8002c06:	2300      	movs	r3, #0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <xQueueGenericSend+0x8e>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	623b      	str	r3, [r7, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c22:	f001 f989 	bl	8003f38 <xTaskGetSchedulerState>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <xQueueGenericSend+0x9e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <xQueueGenericSend+0xa2>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <xQueueGenericSend+0xa4>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <xQueueGenericSend+0xbe>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	61fb      	str	r3, [r7, #28]
}
 8002c4e:	bf00      	nop
 8002c50:	e7fe      	b.n	8002c50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c52:	f001 fecf 	bl	80049f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <xQueueGenericSend+0xd4>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d129      	bne.n	8002cbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	68b9      	ldr	r1, [r7, #8]
 8002c6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c6e:	f000 fa0b 	bl	8003088 <prvCopyDataToQueue>
 8002c72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	3324      	adds	r3, #36	; 0x24
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 ff9b 	bl	8003bbc <xTaskRemoveFromEventList>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c8c:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <xQueueGenericSend+0x1f8>)
 8002c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	f3bf 8f6f 	isb	sy
 8002c9c:	e00a      	b.n	8002cb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ca4:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <xQueueGenericSend+0x1f8>)
 8002ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002cb4:	f001 fece 	bl	8004a54 <vPortExitCritical>
				return pdPASS;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e063      	b.n	8002d84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cc2:	f001 fec7 	bl	8004a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e05c      	b.n	8002d84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 ffd5 	bl	8003c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cde:	f001 feb9 	bl	8004a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ce2:	f000 fd47 	bl	8003774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ce6:	f001 fe85 	bl	80049f4 <vPortEnterCritical>
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cf0:	b25b      	sxtb	r3, r3
 8002cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf6:	d103      	bne.n	8002d00 <xQueueGenericSend+0x16c>
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d06:	b25b      	sxtb	r3, r3
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d0c:	d103      	bne.n	8002d16 <xQueueGenericSend+0x182>
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d16:	f001 fe9d 	bl	8004a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d1a:	1d3a      	adds	r2, r7, #4
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 ffc4 	bl	8003cb0 <xTaskCheckForTimeOut>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d124      	bne.n	8002d78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d30:	f000 faa2 	bl	8003278 <prvIsQueueFull>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d018      	beq.n	8002d6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	3310      	adds	r3, #16
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 feea 	bl	8003b1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d4a:	f000 fa2d 	bl	80031a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d4e:	f000 fd1f 	bl	8003790 <xTaskResumeAll>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f47f af7c 	bne.w	8002c52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <xQueueGenericSend+0x1f8>)
 8002d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	e772      	b.n	8002c52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d6e:	f000 fa1b 	bl	80031a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d72:	f000 fd0d 	bl	8003790 <xTaskResumeAll>
 8002d76:	e76c      	b.n	8002c52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d7a:	f000 fa15 	bl	80031a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d7e:	f000 fd07 	bl	8003790 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3738      	adds	r7, #56	; 0x38
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	e000ed04 	.word	0xe000ed04

08002d90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b090      	sub	sp, #64	; 0x40
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002dba:	bf00      	nop
 8002dbc:	e7fe      	b.n	8002dbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d103      	bne.n	8002dcc <xQueueGenericSendFromISR+0x3c>
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <xQueueGenericSendFromISR+0x40>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <xQueueGenericSendFromISR+0x42>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002de8:	bf00      	nop
 8002dea:	e7fe      	b.n	8002dea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d103      	bne.n	8002dfa <xQueueGenericSendFromISR+0x6a>
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <xQueueGenericSendFromISR+0x6e>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <xQueueGenericSendFromISR+0x70>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10a      	bne.n	8002e1a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	623b      	str	r3, [r7, #32]
}
 8002e16:	bf00      	nop
 8002e18:	e7fe      	b.n	8002e18 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e1a:	f001 fecd 	bl	8004bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e1e:	f3ef 8211 	mrs	r2, BASEPRI
 8002e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e26:	f383 8811 	msr	BASEPRI, r3
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	f3bf 8f4f 	dsb	sy
 8002e32:	61fa      	str	r2, [r7, #28]
 8002e34:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e36:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <xQueueGenericSendFromISR+0xbc>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d12f      	bne.n	8002eac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e62:	f000 f911 	bl	8003088 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e6e:	d112      	bne.n	8002e96 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d016      	beq.n	8002ea6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7a:	3324      	adds	r3, #36	; 0x24
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fe9d 	bl	8003bbc <xTaskRemoveFromEventList>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00e      	beq.n	8002ea6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e007      	b.n	8002ea6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	b25a      	sxtb	r2, r3
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002eaa:	e001      	b.n	8002eb0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002eba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3740      	adds	r7, #64	; 0x40
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08c      	sub	sp, #48	; 0x30
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <xQueueReceive+0x30>
	__asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	623b      	str	r3, [r7, #32]
}
 8002ef4:	bf00      	nop
 8002ef6:	e7fe      	b.n	8002ef6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <xQueueReceive+0x3e>
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <xQueueReceive+0x42>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <xQueueReceive+0x44>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10a      	bne.n	8002f26 <xQueueReceive+0x5e>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	61fb      	str	r3, [r7, #28]
}
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f26:	f001 f807 	bl	8003f38 <xTaskGetSchedulerState>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <xQueueReceive+0x6e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <xQueueReceive+0x72>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <xQueueReceive+0x74>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <xQueueReceive+0x8e>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	61bb      	str	r3, [r7, #24]
}
 8002f52:	bf00      	nop
 8002f54:	e7fe      	b.n	8002f54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f56:	f001 fd4d 	bl	80049f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d01f      	beq.n	8002fa6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f6a:	f000 f8f7 	bl	800315c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	1e5a      	subs	r2, r3, #1
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00f      	beq.n	8002f9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	3310      	adds	r3, #16
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fe1a 	bl	8003bbc <xTaskRemoveFromEventList>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <xQueueReceive+0x1bc>)
 8002f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f9e:	f001 fd59 	bl	8004a54 <vPortExitCritical>
				return pdPASS;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e069      	b.n	800307a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d103      	bne.n	8002fb4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fac:	f001 fd52 	bl	8004a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e062      	b.n	800307a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fba:	f107 0310 	add.w	r3, r7, #16
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fe60 	bl	8003c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fc8:	f001 fd44 	bl	8004a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fcc:	f000 fbd2 	bl	8003774 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fd0:	f001 fd10 	bl	80049f4 <vPortEnterCritical>
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fda:	b25b      	sxtb	r3, r3
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fe0:	d103      	bne.n	8002fea <xQueueReceive+0x122>
 8002fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff6:	d103      	bne.n	8003000 <xQueueReceive+0x138>
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003000:	f001 fd28 	bl	8004a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003004:	1d3a      	adds	r2, r7, #4
 8003006:	f107 0310 	add.w	r3, r7, #16
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fe4f 	bl	8003cb0 <xTaskCheckForTimeOut>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d123      	bne.n	8003060 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800301a:	f000 f917 	bl	800324c <prvIsQueueEmpty>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d017      	beq.n	8003054 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	3324      	adds	r3, #36	; 0x24
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fd75 	bl	8003b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003034:	f000 f8b8 	bl	80031a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003038:	f000 fbaa 	bl	8003790 <xTaskResumeAll>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d189      	bne.n	8002f56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <xQueueReceive+0x1bc>)
 8003044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	e780      	b.n	8002f56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003056:	f000 f8a7 	bl	80031a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800305a:	f000 fb99 	bl	8003790 <xTaskResumeAll>
 800305e:	e77a      	b.n	8002f56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003062:	f000 f8a1 	bl	80031a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003066:	f000 fb93 	bl	8003790 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800306a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800306c:	f000 f8ee 	bl	800324c <prvIsQueueEmpty>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	f43f af6f 	beq.w	8002f56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003078:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800307a:	4618      	mov	r0, r3
 800307c:	3730      	adds	r7, #48	; 0x30
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	e000ed04 	.word	0xe000ed04

08003088 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10d      	bne.n	80030c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d14d      	bne.n	800314a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 ff5e 	bl	8003f74 <xTaskPriorityDisinherit>
 80030b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e043      	b.n	800314a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d119      	bne.n	80030fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6858      	ldr	r0, [r3, #4]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	461a      	mov	r2, r3
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	f001 ffc4 	bl	8005060 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	441a      	add	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d32b      	bcc.n	800314a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	e026      	b.n	800314a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	68d8      	ldr	r0, [r3, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	461a      	mov	r2, r3
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	f001 ffaa 	bl	8005060 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	425b      	negs	r3, r3
 8003116:	441a      	add	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d207      	bcs.n	8003138 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	425b      	negs	r3, r3
 8003132:	441a      	add	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d105      	bne.n	800314a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	3b01      	subs	r3, #1
 8003148:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003152:	697b      	ldr	r3, [r7, #20]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d018      	beq.n	80031a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	441a      	add	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68da      	ldr	r2, [r3, #12]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	429a      	cmp	r2, r3
 8003186:	d303      	bcc.n	8003190 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68d9      	ldr	r1, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	461a      	mov	r2, r3
 800319a:	6838      	ldr	r0, [r7, #0]
 800319c:	f001 ff60 	bl	8005060 <memcpy>
	}
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031b0:	f001 fc20 	bl	80049f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031bc:	e011      	b.n	80031e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d012      	beq.n	80031ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3324      	adds	r3, #36	; 0x24
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fcf6 	bl	8003bbc <xTaskRemoveFromEventList>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031d6:	f000 fdcd 	bl	8003d74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	3b01      	subs	r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	dce9      	bgt.n	80031be <prvUnlockQueue+0x16>
 80031ea:	e000      	b.n	80031ee <prvUnlockQueue+0x46>
					break;
 80031ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	22ff      	movs	r2, #255	; 0xff
 80031f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80031f6:	f001 fc2d 	bl	8004a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031fa:	f001 fbfb 	bl	80049f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003204:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003206:	e011      	b.n	800322c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d012      	beq.n	8003236 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3310      	adds	r3, #16
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fcd1 	bl	8003bbc <xTaskRemoveFromEventList>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003220:	f000 fda8 	bl	8003d74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003224:	7bbb      	ldrb	r3, [r7, #14]
 8003226:	3b01      	subs	r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800322c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003230:	2b00      	cmp	r3, #0
 8003232:	dce9      	bgt.n	8003208 <prvUnlockQueue+0x60>
 8003234:	e000      	b.n	8003238 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003236:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	22ff      	movs	r2, #255	; 0xff
 800323c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003240:	f001 fc08 	bl	8004a54 <vPortExitCritical>
}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003254:	f001 fbce 	bl	80049f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003260:	2301      	movs	r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e001      	b.n	800326a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800326a:	f001 fbf3 	bl	8004a54 <vPortExitCritical>

	return xReturn;
 800326e:	68fb      	ldr	r3, [r7, #12]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003280:	f001 fbb8 	bl	80049f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	429a      	cmp	r2, r3
 800328e:	d102      	bne.n	8003296 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003290:	2301      	movs	r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e001      	b.n	800329a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800329a:	f001 fbdb 	bl	8004a54 <vPortExitCritical>

	return xReturn;
 800329e:	68fb      	ldr	r3, [r7, #12]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	e014      	b.n	80032e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032b8:	4a0f      	ldr	r2, [pc, #60]	; (80032f8 <vQueueAddToRegistry+0x50>)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80032c4:	490c      	ldr	r1, [pc, #48]	; (80032f8 <vQueueAddToRegistry+0x50>)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <vQueueAddToRegistry+0x50>)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80032da:	e006      	b.n	80032ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3301      	adds	r3, #1
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b07      	cmp	r3, #7
 80032e6:	d9e7      	bls.n	80032b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	200007e8 	.word	0x200007e8

080032fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800330c:	f001 fb72 	bl	80049f4 <vPortEnterCritical>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003316:	b25b      	sxtb	r3, r3
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800331c:	d103      	bne.n	8003326 <vQueueWaitForMessageRestricted+0x2a>
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800332c:	b25b      	sxtb	r3, r3
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003332:	d103      	bne.n	800333c <vQueueWaitForMessageRestricted+0x40>
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800333c:	f001 fb8a 	bl	8004a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	3324      	adds	r3, #36	; 0x24
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fc07 	bl	8003b64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003356:	6978      	ldr	r0, [r7, #20]
 8003358:	f7ff ff26 	bl	80031a8 <prvUnlockQueue>
	}
 800335c:	bf00      	nop
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08e      	sub	sp, #56	; 0x38
 8003368:	af04      	add	r7, sp, #16
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	623b      	str	r3, [r7, #32]
}
 800338a:	bf00      	nop
 800338c:	e7fe      	b.n	800338c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10a      	bne.n	80033aa <xTaskCreateStatic+0x46>
	__asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	61fb      	str	r3, [r7, #28]
}
 80033a6:	bf00      	nop
 80033a8:	e7fe      	b.n	80033a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033aa:	235c      	movs	r3, #92	; 0x5c
 80033ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b5c      	cmp	r3, #92	; 0x5c
 80033b2:	d00a      	beq.n	80033ca <xTaskCreateStatic+0x66>
	__asm volatile
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	61bb      	str	r3, [r7, #24]
}
 80033c6:	bf00      	nop
 80033c8:	e7fe      	b.n	80033c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d01e      	beq.n	8003410 <xTaskCreateStatic+0xac>
 80033d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01b      	beq.n	8003410 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033ea:	2300      	movs	r3, #0
 80033ec:	9303      	str	r3, [sp, #12]
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	9302      	str	r3, [sp, #8]
 80033f2:	f107 0314 	add.w	r3, r7, #20
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	68b9      	ldr	r1, [r7, #8]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f850 	bl	80034a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800340a:	f000 f8dd 	bl	80035c8 <prvAddNewTaskToReadyList>
 800340e:	e001      	b.n	8003414 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003414:	697b      	ldr	r3, [r7, #20]
	}
 8003416:	4618      	mov	r0, r3
 8003418:	3728      	adds	r7, #40	; 0x28
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800341e:	b580      	push	{r7, lr}
 8003420:	b08c      	sub	sp, #48	; 0x30
 8003422:	af04      	add	r7, sp, #16
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4618      	mov	r0, r3
 8003434:	f001 fc00 	bl	8004c38 <pvPortMalloc>
 8003438:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00e      	beq.n	800345e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003440:	205c      	movs	r0, #92	; 0x5c
 8003442:	f001 fbf9 	bl	8004c38 <pvPortMalloc>
 8003446:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
 8003454:	e005      	b.n	8003462 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003456:	6978      	ldr	r0, [r7, #20]
 8003458:	f001 fcba 	bl	8004dd0 <vPortFree>
 800345c:	e001      	b.n	8003462 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d017      	beq.n	8003498 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003470:	88fa      	ldrh	r2, [r7, #6]
 8003472:	2300      	movs	r3, #0
 8003474:	9303      	str	r3, [sp, #12]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	9302      	str	r3, [sp, #8]
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	9301      	str	r3, [sp, #4]
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f80e 	bl	80034a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800348c:	69f8      	ldr	r0, [r7, #28]
 800348e:	f000 f89b 	bl	80035c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003492:	2301      	movs	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	e002      	b.n	800349e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800349c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800349e:	69bb      	ldr	r3, [r7, #24]
	}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	21a5      	movs	r1, #165	; 0xa5
 80034c2:	f001 fddb 	bl	800507c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034d0:	3b01      	subs	r3, #1
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	f023 0307 	bic.w	r3, r3, #7
 80034de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <prvInitialiseNewTask+0x58>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	617b      	str	r3, [r7, #20]
}
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01f      	beq.n	8003546 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	e012      	b.n	8003532 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	4413      	add	r3, r2
 8003512:	7819      	ldrb	r1, [r3, #0]
 8003514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	4413      	add	r3, r2
 800351a:	3334      	adds	r3, #52	; 0x34
 800351c:	460a      	mov	r2, r1
 800351e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	4413      	add	r3, r2
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d006      	beq.n	800353a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	3301      	adds	r3, #1
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	2b0f      	cmp	r3, #15
 8003536:	d9e9      	bls.n	800350c <prvInitialiseNewTask+0x64>
 8003538:	e000      	b.n	800353c <prvInitialiseNewTask+0x94>
			{
				break;
 800353a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800353c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003544:	e003      	b.n	800354e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	2b37      	cmp	r3, #55	; 0x37
 8003552:	d901      	bls.n	8003558 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003554:	2337      	movs	r3, #55	; 0x37
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003562:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	2200      	movs	r2, #0
 8003568:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	3304      	adds	r3, #4
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f978 	bl	8002864 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	3318      	adds	r3, #24
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff f973 	bl	8002864 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003582:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003586:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003592:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	2200      	movs	r2, #0
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	68f9      	ldr	r1, [r7, #12]
 80035a6:	69b8      	ldr	r0, [r7, #24]
 80035a8:	f001 f8f4 	bl	8004794 <pxPortInitialiseStack>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035be:	bf00      	nop
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035d0:	f001 fa10 	bl	80049f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035d4:	4b2d      	ldr	r3, [pc, #180]	; (800368c <prvAddNewTaskToReadyList+0xc4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	4a2c      	ldr	r2, [pc, #176]	; (800368c <prvAddNewTaskToReadyList+0xc4>)
 80035dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035de:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <prvAddNewTaskToReadyList+0xc8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035e6:	4a2a      	ldr	r2, [pc, #168]	; (8003690 <prvAddNewTaskToReadyList+0xc8>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035ec:	4b27      	ldr	r3, [pc, #156]	; (800368c <prvAddNewTaskToReadyList+0xc4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d110      	bne.n	8003616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035f4:	f000 fbe2 	bl	8003dbc <prvInitialiseTaskLists>
 80035f8:	e00d      	b.n	8003616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035fa:	4b26      	ldr	r3, [pc, #152]	; (8003694 <prvAddNewTaskToReadyList+0xcc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003602:	4b23      	ldr	r3, [pc, #140]	; (8003690 <prvAddNewTaskToReadyList+0xc8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	429a      	cmp	r2, r3
 800360e:	d802      	bhi.n	8003616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003610:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <prvAddNewTaskToReadyList+0xc8>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003616:	4b20      	ldr	r3, [pc, #128]	; (8003698 <prvAddNewTaskToReadyList+0xd0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3301      	adds	r3, #1
 800361c:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <prvAddNewTaskToReadyList+0xd0>)
 800361e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003620:	4b1d      	ldr	r3, [pc, #116]	; (8003698 <prvAddNewTaskToReadyList+0xd0>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <prvAddNewTaskToReadyList+0xd4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d903      	bls.n	800363c <prvAddNewTaskToReadyList+0x74>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	4a18      	ldr	r2, [pc, #96]	; (800369c <prvAddNewTaskToReadyList+0xd4>)
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <prvAddNewTaskToReadyList+0xd8>)
 800364a:	441a      	add	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f7ff f913 	bl	800287e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003658:	f001 f9fc 	bl	8004a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800365c:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <prvAddNewTaskToReadyList+0xcc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00e      	beq.n	8003682 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <prvAddNewTaskToReadyList+0xc8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	429a      	cmp	r2, r3
 8003670:	d207      	bcs.n	8003682 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <prvAddNewTaskToReadyList+0xdc>)
 8003674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000cfc 	.word	0x20000cfc
 8003690:	20000828 	.word	0x20000828
 8003694:	20000d08 	.word	0x20000d08
 8003698:	20000d18 	.word	0x20000d18
 800369c:	20000d04 	.word	0x20000d04
 80036a0:	2000082c 	.word	0x2000082c
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	; 0x28
 80036ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036b6:	463a      	mov	r2, r7
 80036b8:	1d39      	adds	r1, r7, #4
 80036ba:	f107 0308 	add.w	r3, r7, #8
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff f87c 	bl	80027bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036c4:	6839      	ldr	r1, [r7, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	9202      	str	r2, [sp, #8]
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	2300      	movs	r3, #0
 80036d4:	460a      	mov	r2, r1
 80036d6:	4921      	ldr	r1, [pc, #132]	; (800375c <vTaskStartScheduler+0xb4>)
 80036d8:	4821      	ldr	r0, [pc, #132]	; (8003760 <vTaskStartScheduler+0xb8>)
 80036da:	f7ff fe43 	bl	8003364 <xTaskCreateStatic>
 80036de:	4603      	mov	r3, r0
 80036e0:	4a20      	ldr	r2, [pc, #128]	; (8003764 <vTaskStartScheduler+0xbc>)
 80036e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036e4:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <vTaskStartScheduler+0xbc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036ec:	2301      	movs	r3, #1
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	e001      	b.n	80036f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d102      	bne.n	8003702 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80036fc:	f000 fcfc 	bl	80040f8 <xTimerCreateTimerTask>
 8003700:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d116      	bne.n	8003736 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	613b      	str	r3, [r7, #16]
}
 800371a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800371c:	4b12      	ldr	r3, [pc, #72]	; (8003768 <vTaskStartScheduler+0xc0>)
 800371e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003722:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <vTaskStartScheduler+0xc4>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <vTaskStartScheduler+0xc8>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003730:	f001 f8be 	bl	80048b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003734:	e00e      	b.n	8003754 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800373c:	d10a      	bne.n	8003754 <vTaskStartScheduler+0xac>
	__asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	60fb      	str	r3, [r7, #12]
}
 8003750:	bf00      	nop
 8003752:	e7fe      	b.n	8003752 <vTaskStartScheduler+0xaa>
}
 8003754:	bf00      	nop
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	080060a4 	.word	0x080060a4
 8003760:	08003d8d 	.word	0x08003d8d
 8003764:	20000d20 	.word	0x20000d20
 8003768:	20000d1c 	.word	0x20000d1c
 800376c:	20000d08 	.word	0x20000d08
 8003770:	20000d00 	.word	0x20000d00

08003774 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <vTaskSuspendAll+0x18>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	4a03      	ldr	r2, [pc, #12]	; (800378c <vTaskSuspendAll+0x18>)
 8003780:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	20000d24 	.word	0x20000d24

08003790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800379a:	2300      	movs	r3, #0
 800379c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800379e:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <xTaskResumeAll+0x118>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <xTaskResumeAll+0x2c>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	603b      	str	r3, [r7, #0]
}
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037bc:	f001 f91a 	bl	80049f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037c0:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <xTaskResumeAll+0x118>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	4a38      	ldr	r2, [pc, #224]	; (80038a8 <xTaskResumeAll+0x118>)
 80037c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ca:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <xTaskResumeAll+0x118>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d162      	bne.n	8003898 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037d2:	4b36      	ldr	r3, [pc, #216]	; (80038ac <xTaskResumeAll+0x11c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d05e      	beq.n	8003898 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037da:	e02f      	b.n	800383c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037dc:	4b34      	ldr	r3, [pc, #208]	; (80038b0 <xTaskResumeAll+0x120>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3318      	adds	r3, #24
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff f8a5 	bl	8002938 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3304      	adds	r3, #4
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff f8a0 	bl	8002938 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037fc:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <xTaskResumeAll+0x124>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d903      	bls.n	800380c <xTaskResumeAll+0x7c>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	4a2a      	ldr	r2, [pc, #168]	; (80038b4 <xTaskResumeAll+0x124>)
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4a27      	ldr	r2, [pc, #156]	; (80038b8 <xTaskResumeAll+0x128>)
 800381a:	441a      	add	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3304      	adds	r3, #4
 8003820:	4619      	mov	r1, r3
 8003822:	4610      	mov	r0, r2
 8003824:	f7ff f82b 	bl	800287e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382c:	4b23      	ldr	r3, [pc, #140]	; (80038bc <xTaskResumeAll+0x12c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003832:	429a      	cmp	r2, r3
 8003834:	d302      	bcc.n	800383c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <xTaskResumeAll+0x130>)
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800383c:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <xTaskResumeAll+0x120>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1cb      	bne.n	80037dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800384a:	f000 fb55 	bl	8003ef8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <xTaskResumeAll+0x134>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d010      	beq.n	800387c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800385a:	f000 f847 	bl	80038ec <xTaskIncrementTick>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003864:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <xTaskResumeAll+0x130>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3b01      	subs	r3, #1
 800386e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f1      	bne.n	800385a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003876:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <xTaskResumeAll+0x134>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800387c:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <xTaskResumeAll+0x130>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003884:	2301      	movs	r3, #1
 8003886:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <xTaskResumeAll+0x138>)
 800388a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003898:	f001 f8dc 	bl	8004a54 <vPortExitCritical>

	return xAlreadyYielded;
 800389c:	68bb      	ldr	r3, [r7, #8]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000d24 	.word	0x20000d24
 80038ac:	20000cfc 	.word	0x20000cfc
 80038b0:	20000cbc 	.word	0x20000cbc
 80038b4:	20000d04 	.word	0x20000d04
 80038b8:	2000082c 	.word	0x2000082c
 80038bc:	20000828 	.word	0x20000828
 80038c0:	20000d10 	.word	0x20000d10
 80038c4:	20000d0c 	.word	0x20000d0c
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <xTaskGetTickCount+0x1c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038d8:	687b      	ldr	r3, [r7, #4]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000d00 	.word	0x20000d00

080038ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038f6:	4b4f      	ldr	r3, [pc, #316]	; (8003a34 <xTaskIncrementTick+0x148>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f040 808f 	bne.w	8003a1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003900:	4b4d      	ldr	r3, [pc, #308]	; (8003a38 <xTaskIncrementTick+0x14c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003908:	4a4b      	ldr	r2, [pc, #300]	; (8003a38 <xTaskIncrementTick+0x14c>)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d120      	bne.n	8003956 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003914:	4b49      	ldr	r3, [pc, #292]	; (8003a3c <xTaskIncrementTick+0x150>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <xTaskIncrementTick+0x48>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	603b      	str	r3, [r7, #0]
}
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <xTaskIncrementTick+0x46>
 8003934:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <xTaskIncrementTick+0x150>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	4b41      	ldr	r3, [pc, #260]	; (8003a40 <xTaskIncrementTick+0x154>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a3f      	ldr	r2, [pc, #252]	; (8003a3c <xTaskIncrementTick+0x150>)
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	4a3f      	ldr	r2, [pc, #252]	; (8003a40 <xTaskIncrementTick+0x154>)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b3e      	ldr	r3, [pc, #248]	; (8003a44 <xTaskIncrementTick+0x158>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3301      	adds	r3, #1
 800394e:	4a3d      	ldr	r2, [pc, #244]	; (8003a44 <xTaskIncrementTick+0x158>)
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	f000 fad1 	bl	8003ef8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003956:	4b3c      	ldr	r3, [pc, #240]	; (8003a48 <xTaskIncrementTick+0x15c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	429a      	cmp	r2, r3
 800395e:	d349      	bcc.n	80039f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003960:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <xTaskIncrementTick+0x150>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d104      	bne.n	8003974 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800396a:	4b37      	ldr	r3, [pc, #220]	; (8003a48 <xTaskIncrementTick+0x15c>)
 800396c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003970:	601a      	str	r2, [r3, #0]
					break;
 8003972:	e03f      	b.n	80039f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <xTaskIncrementTick+0x150>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	429a      	cmp	r2, r3
 800398a:	d203      	bcs.n	8003994 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800398c:	4a2e      	ldr	r2, [pc, #184]	; (8003a48 <xTaskIncrementTick+0x15c>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003992:	e02f      	b.n	80039f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	3304      	adds	r3, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe ffcd 	bl	8002938 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d004      	beq.n	80039b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3318      	adds	r3, #24
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe ffc4 	bl	8002938 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <xTaskIncrementTick+0x160>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d903      	bls.n	80039c4 <xTaskIncrementTick+0xd8>
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4a22      	ldr	r2, [pc, #136]	; (8003a4c <xTaskIncrementTick+0x160>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <xTaskIncrementTick+0x164>)
 80039d2:	441a      	add	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4619      	mov	r1, r3
 80039da:	4610      	mov	r0, r2
 80039dc:	f7fe ff4f 	bl	800287e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	4b1b      	ldr	r3, [pc, #108]	; (8003a54 <xTaskIncrementTick+0x168>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d3b8      	bcc.n	8003960 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039ee:	2301      	movs	r3, #1
 80039f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039f2:	e7b5      	b.n	8003960 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039f4:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <xTaskIncrementTick+0x168>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fa:	4915      	ldr	r1, [pc, #84]	; (8003a50 <xTaskIncrementTick+0x164>)
 80039fc:	4613      	mov	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d901      	bls.n	8003a10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <xTaskIncrementTick+0x16c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	e004      	b.n	8003a28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <xTaskIncrementTick+0x170>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3301      	adds	r3, #1
 8003a24:	4a0d      	ldr	r2, [pc, #52]	; (8003a5c <xTaskIncrementTick+0x170>)
 8003a26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a28:	697b      	ldr	r3, [r7, #20]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000d24 	.word	0x20000d24
 8003a38:	20000d00 	.word	0x20000d00
 8003a3c:	20000cb4 	.word	0x20000cb4
 8003a40:	20000cb8 	.word	0x20000cb8
 8003a44:	20000d14 	.word	0x20000d14
 8003a48:	20000d1c 	.word	0x20000d1c
 8003a4c:	20000d04 	.word	0x20000d04
 8003a50:	2000082c 	.word	0x2000082c
 8003a54:	20000828 	.word	0x20000828
 8003a58:	20000d10 	.word	0x20000d10
 8003a5c:	20000d0c 	.word	0x20000d0c

08003a60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a66:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <vTaskSwitchContext+0xa8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a6e:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <vTaskSwitchContext+0xac>)
 8003a70:	2201      	movs	r2, #1
 8003a72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a74:	e041      	b.n	8003afa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003a76:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <vTaskSwitchContext+0xac>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7c:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <vTaskSwitchContext+0xb0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	e010      	b.n	8003aa6 <vTaskSwitchContext+0x46>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <vTaskSwitchContext+0x40>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	607b      	str	r3, [r7, #4]
}
 8003a9c:	bf00      	nop
 8003a9e:	e7fe      	b.n	8003a9e <vTaskSwitchContext+0x3e>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	491b      	ldr	r1, [pc, #108]	; (8003b14 <vTaskSwitchContext+0xb4>)
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0e4      	beq.n	8003a84 <vTaskSwitchContext+0x24>
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <vTaskSwitchContext+0xb4>)
 8003ac6:	4413      	add	r3, r2
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	605a      	str	r2, [r3, #4]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	3308      	adds	r3, #8
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d104      	bne.n	8003aea <vTaskSwitchContext+0x8a>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4a09      	ldr	r2, [pc, #36]	; (8003b18 <vTaskSwitchContext+0xb8>)
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	4a06      	ldr	r2, [pc, #24]	; (8003b10 <vTaskSwitchContext+0xb0>)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6013      	str	r3, [r2, #0]
}
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	20000d24 	.word	0x20000d24
 8003b0c:	20000d10 	.word	0x20000d10
 8003b10:	20000d04 	.word	0x20000d04
 8003b14:	2000082c 	.word	0x2000082c
 8003b18:	20000828 	.word	0x20000828

08003b1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	60fb      	str	r3, [r7, #12]
}
 8003b3e:	bf00      	nop
 8003b40:	e7fe      	b.n	8003b40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b42:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <vTaskPlaceOnEventList+0x44>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3318      	adds	r3, #24
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fe febb 	bl	80028c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b50:	2101      	movs	r1, #1
 8003b52:	6838      	ldr	r0, [r7, #0]
 8003b54:	f000 fa7c 	bl	8004050 <prvAddCurrentTaskToDelayedList>
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000828 	.word	0x20000828

08003b64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	617b      	str	r3, [r7, #20]
}
 8003b88:	bf00      	nop
 8003b8a:	e7fe      	b.n	8003b8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3318      	adds	r3, #24
 8003b92:	4619      	mov	r1, r3
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7fe fe72 	bl	800287e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ba4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	68b8      	ldr	r0, [r7, #8]
 8003baa:	f000 fa51 	bl	8004050 <prvAddCurrentTaskToDelayedList>
	}
 8003bae:	bf00      	nop
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000828 	.word	0x20000828

08003bbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	60fb      	str	r3, [r7, #12]
}
 8003be4:	bf00      	nop
 8003be6:	e7fe      	b.n	8003be6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	3318      	adds	r3, #24
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fe fea3 	bl	8002938 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <xTaskRemoveFromEventList+0xb0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d11d      	bne.n	8003c36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fe9a 	bl	8002938 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <xTaskRemoveFromEventList+0xb4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d903      	bls.n	8003c18 <xTaskRemoveFromEventList+0x5c>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <xTaskRemoveFromEventList+0xb4>)
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <xTaskRemoveFromEventList+0xb8>)
 8003c26:	441a      	add	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f7fe fe25 	bl	800287e <vListInsertEnd>
 8003c34:	e005      	b.n	8003c42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	3318      	adds	r3, #24
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	480e      	ldr	r0, [pc, #56]	; (8003c78 <xTaskRemoveFromEventList+0xbc>)
 8003c3e:	f7fe fe1e 	bl	800287e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <xTaskRemoveFromEventList+0xc0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d905      	bls.n	8003c5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c54:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <xTaskRemoveFromEventList+0xc4>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e001      	b.n	8003c60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c60:	697b      	ldr	r3, [r7, #20]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000d24 	.word	0x20000d24
 8003c70:	20000d04 	.word	0x20000d04
 8003c74:	2000082c 	.word	0x2000082c
 8003c78:	20000cbc 	.word	0x20000cbc
 8003c7c:	20000828 	.word	0x20000828
 8003c80:	20000d10 	.word	0x20000d10

08003c84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c8c:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <vTaskInternalSetTimeOutState+0x24>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <vTaskInternalSetTimeOutState+0x28>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	605a      	str	r2, [r3, #4]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	20000d14 	.word	0x20000d14
 8003cac:	20000d00 	.word	0x20000d00

08003cb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	f3bf 8f6f 	isb	sy
 8003ccc:	f3bf 8f4f 	dsb	sy
 8003cd0:	613b      	str	r3, [r7, #16]
}
 8003cd2:	bf00      	nop
 8003cd4:	e7fe      	b.n	8003cd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10a      	bne.n	8003cf2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	60fb      	str	r3, [r7, #12]
}
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003cf2:	f000 fe7f 	bl	80049f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <xTaskCheckForTimeOut+0xbc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d0e:	d102      	bne.n	8003d16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	e023      	b.n	8003d5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <xTaskCheckForTimeOut+0xc0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d007      	beq.n	8003d32 <xTaskCheckForTimeOut+0x82>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	e015      	b.n	8003d5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d20b      	bcs.n	8003d54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	1ad2      	subs	r2, r2, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ff9b 	bl	8003c84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	e004      	b.n	8003d5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d5e:	f000 fe79 	bl	8004a54 <vPortExitCritical>

	return xReturn;
 8003d62:	69fb      	ldr	r3, [r7, #28]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000d00 	.word	0x20000d00
 8003d70:	20000d14 	.word	0x20000d14

08003d74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d78:	4b03      	ldr	r3, [pc, #12]	; (8003d88 <vTaskMissedYield+0x14>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	20000d10 	.word	0x20000d10

08003d8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d94:	f000 f852 	bl	8003e3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <prvIdleTask+0x28>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d9f9      	bls.n	8003d94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <prvIdleTask+0x2c>)
 8003da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003db0:	e7f0      	b.n	8003d94 <prvIdleTask+0x8>
 8003db2:	bf00      	nop
 8003db4:	2000082c 	.word	0x2000082c
 8003db8:	e000ed04 	.word	0xe000ed04

08003dbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	e00c      	b.n	8003de2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <prvInitialiseTaskLists+0x60>)
 8003dd4:	4413      	add	r3, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fe fd24 	bl	8002824 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3301      	adds	r3, #1
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b37      	cmp	r3, #55	; 0x37
 8003de6:	d9ef      	bls.n	8003dc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003de8:	480d      	ldr	r0, [pc, #52]	; (8003e20 <prvInitialiseTaskLists+0x64>)
 8003dea:	f7fe fd1b 	bl	8002824 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dee:	480d      	ldr	r0, [pc, #52]	; (8003e24 <prvInitialiseTaskLists+0x68>)
 8003df0:	f7fe fd18 	bl	8002824 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003df4:	480c      	ldr	r0, [pc, #48]	; (8003e28 <prvInitialiseTaskLists+0x6c>)
 8003df6:	f7fe fd15 	bl	8002824 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dfa:	480c      	ldr	r0, [pc, #48]	; (8003e2c <prvInitialiseTaskLists+0x70>)
 8003dfc:	f7fe fd12 	bl	8002824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e00:	480b      	ldr	r0, [pc, #44]	; (8003e30 <prvInitialiseTaskLists+0x74>)
 8003e02:	f7fe fd0f 	bl	8002824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e06:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <prvInitialiseTaskLists+0x78>)
 8003e08:	4a05      	ldr	r2, [pc, #20]	; (8003e20 <prvInitialiseTaskLists+0x64>)
 8003e0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <prvInitialiseTaskLists+0x7c>)
 8003e0e:	4a05      	ldr	r2, [pc, #20]	; (8003e24 <prvInitialiseTaskLists+0x68>)
 8003e10:	601a      	str	r2, [r3, #0]
}
 8003e12:	bf00      	nop
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	2000082c 	.word	0x2000082c
 8003e20:	20000c8c 	.word	0x20000c8c
 8003e24:	20000ca0 	.word	0x20000ca0
 8003e28:	20000cbc 	.word	0x20000cbc
 8003e2c:	20000cd0 	.word	0x20000cd0
 8003e30:	20000ce8 	.word	0x20000ce8
 8003e34:	20000cb4 	.word	0x20000cb4
 8003e38:	20000cb8 	.word	0x20000cb8

08003e3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e42:	e019      	b.n	8003e78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e44:	f000 fdd6 	bl	80049f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e48:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <prvCheckTasksWaitingTermination+0x50>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3304      	adds	r3, #4
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe fd6f 	bl	8002938 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <prvCheckTasksWaitingTermination+0x54>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <prvCheckTasksWaitingTermination+0x54>)
 8003e62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <prvCheckTasksWaitingTermination+0x58>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	4a0a      	ldr	r2, [pc, #40]	; (8003e94 <prvCheckTasksWaitingTermination+0x58>)
 8003e6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e6e:	f000 fdf1 	bl	8004a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f810 	bl	8003e98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <prvCheckTasksWaitingTermination+0x58>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e1      	bne.n	8003e44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000cd0 	.word	0x20000cd0
 8003e90:	20000cfc 	.word	0x20000cfc
 8003e94:	20000ce4 	.word	0x20000ce4

08003e98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d108      	bne.n	8003ebc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 ff8e 	bl	8004dd0 <vPortFree>
				vPortFree( pxTCB );
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 ff8b 	bl	8004dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003eba:	e018      	b.n	8003eee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d103      	bne.n	8003ece <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 ff82 	bl	8004dd0 <vPortFree>
	}
 8003ecc:	e00f      	b.n	8003eee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d00a      	beq.n	8003eee <prvDeleteTCB+0x56>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	60fb      	str	r3, [r7, #12]
}
 8003eea:	bf00      	nop
 8003eec:	e7fe      	b.n	8003eec <prvDeleteTCB+0x54>
	}
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <prvResetNextTaskUnblockTime+0x38>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d104      	bne.n	8003f12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <prvResetNextTaskUnblockTime+0x3c>)
 8003f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f10:	e008      	b.n	8003f24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <prvResetNextTaskUnblockTime+0x38>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <prvResetNextTaskUnblockTime+0x3c>)
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	20000cb4 	.word	0x20000cb4
 8003f34:	20000d1c 	.word	0x20000d1c

08003f38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <xTaskGetSchedulerState+0x34>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d102      	bne.n	8003f4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f46:	2301      	movs	r3, #1
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	e008      	b.n	8003f5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f4c:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <xTaskGetSchedulerState+0x38>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f54:	2302      	movs	r3, #2
 8003f56:	607b      	str	r3, [r7, #4]
 8003f58:	e001      	b.n	8003f5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f5e:	687b      	ldr	r3, [r7, #4]
	}
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	20000d08 	.word	0x20000d08
 8003f70:	20000d24 	.word	0x20000d24

08003f74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d056      	beq.n	8004038 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <xTaskPriorityDisinherit+0xd0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d00a      	beq.n	8003faa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	60fb      	str	r3, [r7, #12]
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10a      	bne.n	8003fc8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	60bb      	str	r3, [r7, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	e7fe      	b.n	8003fc6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fcc:	1e5a      	subs	r2, r3, #1
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d02c      	beq.n	8004038 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d128      	bne.n	8004038 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fca4 	bl	8002938 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <xTaskPriorityDisinherit+0xd4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d903      	bls.n	8004018 <xTaskPriorityDisinherit+0xa4>
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	4a0c      	ldr	r2, [pc, #48]	; (8004048 <xTaskPriorityDisinherit+0xd4>)
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4a09      	ldr	r2, [pc, #36]	; (800404c <xTaskPriorityDisinherit+0xd8>)
 8004026:	441a      	add	r2, r3
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	3304      	adds	r3, #4
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f7fe fc25 	bl	800287e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004038:	697b      	ldr	r3, [r7, #20]
	}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000828 	.word	0x20000828
 8004048:	20000d04 	.word	0x20000d04
 800404c:	2000082c 	.word	0x2000082c

08004050 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800405a:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004060:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3304      	adds	r3, #4
 8004066:	4618      	mov	r0, r3
 8004068:	f7fe fc66 	bl	8002938 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004072:	d10a      	bne.n	800408a <prvAddCurrentTaskToDelayedList+0x3a>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800407a:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3304      	adds	r3, #4
 8004080:	4619      	mov	r1, r3
 8004082:	4819      	ldr	r0, [pc, #100]	; (80040e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004084:	f7fe fbfb 	bl	800287e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004088:	e026      	b.n	80040d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4413      	add	r3, r2
 8004090:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004092:	4b14      	ldr	r3, [pc, #80]	; (80040e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d209      	bcs.n	80040b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040a2:	4b12      	ldr	r3, [pc, #72]	; (80040ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f7fe fc09 	bl	80028c6 <vListInsert>
}
 80040b4:	e010      	b.n	80040d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040b6:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f7fe fbff 	bl	80028c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d202      	bcs.n	80040d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040d2:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6013      	str	r3, [r2, #0]
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000d00 	.word	0x20000d00
 80040e4:	20000828 	.word	0x20000828
 80040e8:	20000ce8 	.word	0x20000ce8
 80040ec:	20000cb8 	.word	0x20000cb8
 80040f0:	20000cb4 	.word	0x20000cb4
 80040f4:	20000d1c 	.word	0x20000d1c

080040f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	; 0x28
 80040fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004102:	f000 fb07 	bl	8004714 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004106:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <xTimerCreateTimerTask+0x80>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d021      	beq.n	8004152 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004116:	1d3a      	adds	r2, r7, #4
 8004118:	f107 0108 	add.w	r1, r7, #8
 800411c:	f107 030c 	add.w	r3, r7, #12
 8004120:	4618      	mov	r0, r3
 8004122:	f7fe fb65 	bl	80027f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	9202      	str	r2, [sp, #8]
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	2302      	movs	r3, #2
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2300      	movs	r3, #0
 8004136:	460a      	mov	r2, r1
 8004138:	4910      	ldr	r1, [pc, #64]	; (800417c <xTimerCreateTimerTask+0x84>)
 800413a:	4811      	ldr	r0, [pc, #68]	; (8004180 <xTimerCreateTimerTask+0x88>)
 800413c:	f7ff f912 	bl	8003364 <xTaskCreateStatic>
 8004140:	4603      	mov	r3, r0
 8004142:	4a10      	ldr	r2, [pc, #64]	; (8004184 <xTimerCreateTimerTask+0x8c>)
 8004144:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <xTimerCreateTimerTask+0x8c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800414e:	2301      	movs	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	613b      	str	r3, [r7, #16]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800416e:	697b      	ldr	r3, [r7, #20]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20000d58 	.word	0x20000d58
 800417c:	080060ac 	.word	0x080060ac
 8004180:	080042bd 	.word	0x080042bd
 8004184:	20000d5c 	.word	0x20000d5c

08004188 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
 8004194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004196:	2300      	movs	r3, #0
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	623b      	str	r3, [r7, #32]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <xTimerGenericCommand+0x98>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02a      	beq.n	8004214 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b05      	cmp	r3, #5
 80041ce:	dc18      	bgt.n	8004202 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041d0:	f7ff feb2 	bl	8003f38 <xTaskGetSchedulerState>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d109      	bne.n	80041ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80041da:	4b11      	ldr	r3, [pc, #68]	; (8004220 <xTimerGenericCommand+0x98>)
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	f107 0110 	add.w	r1, r7, #16
 80041e2:	2300      	movs	r3, #0
 80041e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e6:	f7fe fcd5 	bl	8002b94 <xQueueGenericSend>
 80041ea:	6278      	str	r0, [r7, #36]	; 0x24
 80041ec:	e012      	b.n	8004214 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <xTimerGenericCommand+0x98>)
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	f107 0110 	add.w	r1, r7, #16
 80041f6:	2300      	movs	r3, #0
 80041f8:	2200      	movs	r2, #0
 80041fa:	f7fe fccb 	bl	8002b94 <xQueueGenericSend>
 80041fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004200:	e008      	b.n	8004214 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004202:	4b07      	ldr	r3, [pc, #28]	; (8004220 <xTimerGenericCommand+0x98>)
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	f107 0110 	add.w	r1, r7, #16
 800420a:	2300      	movs	r3, #0
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	f7fe fdbf 	bl	8002d90 <xQueueGenericSendFromISR>
 8004212:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004216:	4618      	mov	r0, r3
 8004218:	3728      	adds	r7, #40	; 0x28
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000d58 	.word	0x20000d58

08004224 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af02      	add	r7, sp, #8
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800422e:	4b22      	ldr	r3, [pc, #136]	; (80042b8 <prvProcessExpiredTimer+0x94>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	3304      	adds	r3, #4
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe fb7b 	bl	8002938 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d022      	beq.n	8004296 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	18d1      	adds	r1, r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	6978      	ldr	r0, [r7, #20]
 800425e:	f000 f8d1 	bl	8004404 <prvInsertTimerInActiveList>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01f      	beq.n	80042a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004268:	2300      	movs	r3, #0
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	2300      	movs	r3, #0
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	2100      	movs	r1, #0
 8004272:	6978      	ldr	r0, [r7, #20]
 8004274:	f7ff ff88 	bl	8004188 <xTimerGenericCommand>
 8004278:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d113      	bne.n	80042a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60fb      	str	r3, [r7, #12]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	6978      	ldr	r0, [r7, #20]
 80042ae:	4798      	blx	r3
}
 80042b0:	bf00      	nop
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	20000d50 	.word	0x20000d50

080042bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042c4:	f107 0308 	add.w	r3, r7, #8
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f857 	bl	800437c <prvGetNextExpireTime>
 80042ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4619      	mov	r1, r3
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f803 	bl	80042e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80042da:	f000 f8d5 	bl	8004488 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042de:	e7f1      	b.n	80042c4 <prvTimerTask+0x8>

080042e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80042ea:	f7ff fa43 	bl	8003774 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042ee:	f107 0308 	add.w	r3, r7, #8
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f866 	bl	80043c4 <prvSampleTimeNow>
 80042f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d130      	bne.n	8004362 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <prvProcessTimerOrBlockTask+0x3c>
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	429a      	cmp	r2, r3
 800430c:	d806      	bhi.n	800431c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800430e:	f7ff fa3f 	bl	8003790 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004312:	68f9      	ldr	r1, [r7, #12]
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff85 	bl	8004224 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800431a:	e024      	b.n	8004366 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <prvProcessTimerOrBlockTask+0x90>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <prvProcessTimerOrBlockTask+0x50>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <prvProcessTimerOrBlockTask+0x52>
 8004330:	2300      	movs	r3, #0
 8004332:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004334:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <prvProcessTimerOrBlockTask+0x94>)
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	4619      	mov	r1, r3
 8004342:	f7fe ffdb 	bl	80032fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004346:	f7ff fa23 	bl	8003790 <xTaskResumeAll>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004350:	4b09      	ldr	r3, [pc, #36]	; (8004378 <prvProcessTimerOrBlockTask+0x98>)
 8004352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	f3bf 8f6f 	isb	sy
}
 8004360:	e001      	b.n	8004366 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004362:	f7ff fa15 	bl	8003790 <xTaskResumeAll>
}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000d54 	.word	0x20000d54
 8004374:	20000d58 	.word	0x20000d58
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <prvGetNextExpireTime+0x44>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <prvGetNextExpireTime+0x16>
 800438e:	2201      	movs	r2, #1
 8004390:	e000      	b.n	8004394 <prvGetNextExpireTime+0x18>
 8004392:	2200      	movs	r2, #0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d105      	bne.n	80043ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043a0:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <prvGetNextExpireTime+0x44>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e001      	b.n	80043b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80043b0:	68fb      	ldr	r3, [r7, #12]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000d50 	.word	0x20000d50

080043c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80043cc:	f7ff fa7e 	bl	80038cc <xTaskGetTickCount>
 80043d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <prvSampleTimeNow+0x3c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d205      	bcs.n	80043e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80043dc:	f000 f936 	bl	800464c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	e002      	b.n	80043ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80043ee:	4a04      	ldr	r2, [pc, #16]	; (8004400 <prvSampleTimeNow+0x3c>)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80043f4:	68fb      	ldr	r3, [r7, #12]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000d60 	.word	0x20000d60

08004404 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	429a      	cmp	r2, r3
 8004428:	d812      	bhi.n	8004450 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	1ad2      	subs	r2, r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	429a      	cmp	r2, r3
 8004436:	d302      	bcc.n	800443e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004438:	2301      	movs	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	e01b      	b.n	8004476 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <prvInsertTimerInActiveList+0x7c>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3304      	adds	r3, #4
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f7fe fa3c 	bl	80028c6 <vListInsert>
 800444e:	e012      	b.n	8004476 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d206      	bcs.n	8004466 <prvInsertTimerInActiveList+0x62>
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d302      	bcc.n	8004466 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004460:	2301      	movs	r3, #1
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e007      	b.n	8004476 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <prvInsertTimerInActiveList+0x80>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3304      	adds	r3, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7fe fa28 	bl	80028c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004476:	697b      	ldr	r3, [r7, #20]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000d54 	.word	0x20000d54
 8004484:	20000d50 	.word	0x20000d50

08004488 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08e      	sub	sp, #56	; 0x38
 800448c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800448e:	e0ca      	b.n	8004626 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	da18      	bge.n	80044c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004496:	1d3b      	adds	r3, r7, #4
 8004498:	3304      	adds	r3, #4
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10a      	bne.n	80044b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	61fb      	str	r3, [r7, #28]
}
 80044b4:	bf00      	nop
 80044b6:	e7fe      	b.n	80044b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044be:	6850      	ldr	r0, [r2, #4]
 80044c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c2:	6892      	ldr	r2, [r2, #8]
 80044c4:	4611      	mov	r1, r2
 80044c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f2c0 80aa 	blt.w	8004624 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d004      	beq.n	80044e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	3304      	adds	r3, #4
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe fa29 	bl	8002938 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044e6:	463b      	mov	r3, r7
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff ff6b 	bl	80043c4 <prvSampleTimeNow>
 80044ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b09      	cmp	r3, #9
 80044f4:	f200 8097 	bhi.w	8004626 <prvProcessReceivedCommands+0x19e>
 80044f8:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <prvProcessReceivedCommands+0x78>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004529 	.word	0x08004529
 8004504:	08004529 	.word	0x08004529
 8004508:	08004529 	.word	0x08004529
 800450c:	0800459d 	.word	0x0800459d
 8004510:	080045b1 	.word	0x080045b1
 8004514:	080045fb 	.word	0x080045fb
 8004518:	08004529 	.word	0x08004529
 800451c:	08004529 	.word	0x08004529
 8004520:	0800459d 	.word	0x0800459d
 8004524:	080045b1 	.word	0x080045b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	b2da      	uxtb	r2, r3
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	18d1      	adds	r1, r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004548:	f7ff ff5c 	bl	8004404 <prvInsertTimerInActiveList>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d069      	beq.n	8004626 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004558:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d05e      	beq.n	8004626 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	441a      	add	r2, r3
 8004570:	2300      	movs	r3, #0
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	2100      	movs	r1, #0
 8004578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800457a:	f7ff fe05 	bl	8004188 <xTimerGenericCommand>
 800457e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d14f      	bne.n	8004626 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	61bb      	str	r3, [r7, #24]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800459c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80045ae:	e03a      	b.n	8004626 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	617b      	str	r3, [r7, #20]
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	18d1      	adds	r1, r2, r3
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f4:	f7ff ff06 	bl	8004404 <prvInsertTimerInActiveList>
					break;
 80045f8:	e015      	b.n	8004626 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d103      	bne.n	8004610 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800460a:	f000 fbe1 	bl	8004dd0 <vPortFree>
 800460e:	e00a      	b.n	8004626 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	b2da      	uxtb	r2, r3
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004622:	e000      	b.n	8004626 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004624:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004626:	4b08      	ldr	r3, [pc, #32]	; (8004648 <prvProcessReceivedCommands+0x1c0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	1d39      	adds	r1, r7, #4
 800462c:	2200      	movs	r2, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fc4a 	bl	8002ec8 <xQueueReceive>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	f47f af2a 	bne.w	8004490 <prvProcessReceivedCommands+0x8>
	}
}
 800463c:	bf00      	nop
 800463e:	bf00      	nop
 8004640:	3730      	adds	r7, #48	; 0x30
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000d58 	.word	0x20000d58

0800464c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004652:	e048      	b.n	80046e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004654:	4b2d      	ldr	r3, [pc, #180]	; (800470c <prvSwitchTimerLists+0xc0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465e:	4b2b      	ldr	r3, [pc, #172]	; (800470c <prvSwitchTimerLists+0xc0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3304      	adds	r3, #4
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe f963 	bl	8002938 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d02e      	beq.n	80046e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4413      	add	r3, r2
 8004690:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	429a      	cmp	r2, r3
 8004698:	d90e      	bls.n	80046b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046a6:	4b19      	ldr	r3, [pc, #100]	; (800470c <prvSwitchTimerLists+0xc0>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f7fe f908 	bl	80028c6 <vListInsert>
 80046b6:	e016      	b.n	80046e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046b8:	2300      	movs	r3, #0
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	2300      	movs	r3, #0
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	2100      	movs	r1, #0
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fd60 	bl	8004188 <xTimerGenericCommand>
 80046c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	603b      	str	r3, [r7, #0]
}
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <prvSwitchTimerLists+0xc0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1b1      	bne.n	8004654 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <prvSwitchTimerLists+0xc0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <prvSwitchTimerLists+0xc4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a04      	ldr	r2, [pc, #16]	; (800470c <prvSwitchTimerLists+0xc0>)
 80046fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80046fe:	4a04      	ldr	r2, [pc, #16]	; (8004710 <prvSwitchTimerLists+0xc4>)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	6013      	str	r3, [r2, #0]
}
 8004704:	bf00      	nop
 8004706:	3718      	adds	r7, #24
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000d50 	.word	0x20000d50
 8004710:	20000d54 	.word	0x20000d54

08004714 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800471a:	f000 f96b 	bl	80049f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <prvCheckForValidListAndQueue+0x60>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d120      	bne.n	8004768 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004726:	4814      	ldr	r0, [pc, #80]	; (8004778 <prvCheckForValidListAndQueue+0x64>)
 8004728:	f7fe f87c 	bl	8002824 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800472c:	4813      	ldr	r0, [pc, #76]	; (800477c <prvCheckForValidListAndQueue+0x68>)
 800472e:	f7fe f879 	bl	8002824 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <prvCheckForValidListAndQueue+0x6c>)
 8004734:	4a10      	ldr	r2, [pc, #64]	; (8004778 <prvCheckForValidListAndQueue+0x64>)
 8004736:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004738:	4b12      	ldr	r3, [pc, #72]	; (8004784 <prvCheckForValidListAndQueue+0x70>)
 800473a:	4a10      	ldr	r2, [pc, #64]	; (800477c <prvCheckForValidListAndQueue+0x68>)
 800473c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800473e:	2300      	movs	r3, #0
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	4b11      	ldr	r3, [pc, #68]	; (8004788 <prvCheckForValidListAndQueue+0x74>)
 8004744:	4a11      	ldr	r2, [pc, #68]	; (800478c <prvCheckForValidListAndQueue+0x78>)
 8004746:	2110      	movs	r1, #16
 8004748:	200a      	movs	r0, #10
 800474a:	f7fe f987 	bl	8002a5c <xQueueGenericCreateStatic>
 800474e:	4603      	mov	r3, r0
 8004750:	4a08      	ldr	r2, [pc, #32]	; (8004774 <prvCheckForValidListAndQueue+0x60>)
 8004752:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004754:	4b07      	ldr	r3, [pc, #28]	; (8004774 <prvCheckForValidListAndQueue+0x60>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <prvCheckForValidListAndQueue+0x60>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	490b      	ldr	r1, [pc, #44]	; (8004790 <prvCheckForValidListAndQueue+0x7c>)
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe fda0 	bl	80032a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004768:	f000 f974 	bl	8004a54 <vPortExitCritical>
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000d58 	.word	0x20000d58
 8004778:	20000d28 	.word	0x20000d28
 800477c:	20000d3c 	.word	0x20000d3c
 8004780:	20000d50 	.word	0x20000d50
 8004784:	20000d54 	.word	0x20000d54
 8004788:	20000e04 	.word	0x20000e04
 800478c:	20000d64 	.word	0x20000d64
 8004790:	080060b4 	.word	0x080060b4

08004794 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3b04      	subs	r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3b04      	subs	r3, #4
 80047b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f023 0201 	bic.w	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3b04      	subs	r3, #4
 80047c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047c4:	4a0c      	ldr	r2, [pc, #48]	; (80047f8 <pxPortInitialiseStack+0x64>)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3b14      	subs	r3, #20
 80047ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3b04      	subs	r3, #4
 80047da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f06f 0202 	mvn.w	r2, #2
 80047e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3b20      	subs	r3, #32
 80047e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047ea:	68fb      	ldr	r3, [r7, #12]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	080047fd 	.word	0x080047fd

080047fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <prvTaskExitError+0x54>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480e:	d00a      	beq.n	8004826 <prvTaskExitError+0x2a>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	60fb      	str	r3, [r7, #12]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <prvTaskExitError+0x28>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	60bb      	str	r3, [r7, #8]
}
 8004838:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800483a:	bf00      	nop
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0fc      	beq.n	800483c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004842:	bf00      	nop
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	2000000c 	.word	0x2000000c
	...

08004860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004860:	4b07      	ldr	r3, [pc, #28]	; (8004880 <pxCurrentTCBConst2>)
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	6808      	ldr	r0, [r1, #0]
 8004866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486a:	f380 8809 	msr	PSP, r0
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f04f 0000 	mov.w	r0, #0
 8004876:	f380 8811 	msr	BASEPRI, r0
 800487a:	4770      	bx	lr
 800487c:	f3af 8000 	nop.w

08004880 <pxCurrentTCBConst2>:
 8004880:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop

08004888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004888:	4808      	ldr	r0, [pc, #32]	; (80048ac <prvPortStartFirstTask+0x24>)
 800488a:	6800      	ldr	r0, [r0, #0]
 800488c:	6800      	ldr	r0, [r0, #0]
 800488e:	f380 8808 	msr	MSP, r0
 8004892:	f04f 0000 	mov.w	r0, #0
 8004896:	f380 8814 	msr	CONTROL, r0
 800489a:	b662      	cpsie	i
 800489c:	b661      	cpsie	f
 800489e:	f3bf 8f4f 	dsb	sy
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	df00      	svc	0
 80048a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80048aa:	bf00      	nop
 80048ac:	e000ed08 	.word	0xe000ed08

080048b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048b6:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <xPortStartScheduler+0x120>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a46      	ldr	r2, [pc, #280]	; (80049d4 <xPortStartScheduler+0x124>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d10a      	bne.n	80048d6 <xPortStartScheduler+0x26>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	613b      	str	r3, [r7, #16]
}
 80048d2:	bf00      	nop
 80048d4:	e7fe      	b.n	80048d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048d6:	4b3e      	ldr	r3, [pc, #248]	; (80049d0 <xPortStartScheduler+0x120>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a3f      	ldr	r2, [pc, #252]	; (80049d8 <xPortStartScheduler+0x128>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d10a      	bne.n	80048f6 <xPortStartScheduler+0x46>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60fb      	str	r3, [r7, #12]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048f6:	4b39      	ldr	r3, [pc, #228]	; (80049dc <xPortStartScheduler+0x12c>)
 80048f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	22ff      	movs	r2, #255	; 0xff
 8004906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004918:	b2da      	uxtb	r2, r3
 800491a:	4b31      	ldr	r3, [pc, #196]	; (80049e0 <xPortStartScheduler+0x130>)
 800491c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800491e:	4b31      	ldr	r3, [pc, #196]	; (80049e4 <xPortStartScheduler+0x134>)
 8004920:	2207      	movs	r2, #7
 8004922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004924:	e009      	b.n	800493a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004926:	4b2f      	ldr	r3, [pc, #188]	; (80049e4 <xPortStartScheduler+0x134>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3b01      	subs	r3, #1
 800492c:	4a2d      	ldr	r2, [pc, #180]	; (80049e4 <xPortStartScheduler+0x134>)
 800492e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	b2db      	uxtb	r3, r3
 8004938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b80      	cmp	r3, #128	; 0x80
 8004944:	d0ef      	beq.n	8004926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004946:	4b27      	ldr	r3, [pc, #156]	; (80049e4 <xPortStartScheduler+0x134>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f1c3 0307 	rsb	r3, r3, #7
 800494e:	2b04      	cmp	r3, #4
 8004950:	d00a      	beq.n	8004968 <xPortStartScheduler+0xb8>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	60bb      	str	r3, [r7, #8]
}
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004968:	4b1e      	ldr	r3, [pc, #120]	; (80049e4 <xPortStartScheduler+0x134>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <xPortStartScheduler+0x134>)
 8004970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004972:	4b1c      	ldr	r3, [pc, #112]	; (80049e4 <xPortStartScheduler+0x134>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800497a:	4a1a      	ldr	r2, [pc, #104]	; (80049e4 <xPortStartScheduler+0x134>)
 800497c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004986:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <xPortStartScheduler+0x138>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <xPortStartScheduler+0x138>)
 800498c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <xPortStartScheduler+0x138>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <xPortStartScheduler+0x138>)
 8004998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800499c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800499e:	f000 f8dd 	bl	8004b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <xPortStartScheduler+0x13c>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049a8:	f000 f8fc 	bl	8004ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <xPortStartScheduler+0x140>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <xPortStartScheduler+0x140>)
 80049b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049b8:	f7ff ff66 	bl	8004888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049bc:	f7ff f850 	bl	8003a60 <vTaskSwitchContext>
	prvTaskExitError();
 80049c0:	f7ff ff1c 	bl	80047fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	e000ed00 	.word	0xe000ed00
 80049d4:	410fc271 	.word	0x410fc271
 80049d8:	410fc270 	.word	0x410fc270
 80049dc:	e000e400 	.word	0xe000e400
 80049e0:	20000e54 	.word	0x20000e54
 80049e4:	20000e58 	.word	0x20000e58
 80049e8:	e000ed20 	.word	0xe000ed20
 80049ec:	2000000c 	.word	0x2000000c
 80049f0:	e000ef34 	.word	0xe000ef34

080049f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	607b      	str	r3, [r7, #4]
}
 8004a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a0e:	4b0f      	ldr	r3, [pc, #60]	; (8004a4c <vPortEnterCritical+0x58>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3301      	adds	r3, #1
 8004a14:	4a0d      	ldr	r2, [pc, #52]	; (8004a4c <vPortEnterCritical+0x58>)
 8004a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a18:	4b0c      	ldr	r3, [pc, #48]	; (8004a4c <vPortEnterCritical+0x58>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d10f      	bne.n	8004a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <vPortEnterCritical+0x5c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	603b      	str	r3, [r7, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <vPortEnterCritical+0x4a>
	}
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	2000000c 	.word	0x2000000c
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a5a:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <vPortExitCritical+0x50>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <vPortExitCritical+0x24>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	607b      	str	r3, [r7, #4]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <vPortExitCritical+0x50>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	4a09      	ldr	r2, [pc, #36]	; (8004aa4 <vPortExitCritical+0x50>)
 8004a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a82:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <vPortExitCritical+0x50>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d105      	bne.n	8004a96 <vPortExitCritical+0x42>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	f383 8811 	msr	BASEPRI, r3
}
 8004a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	2000000c 	.word	0x2000000c
	...

08004ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ab0:	f3ef 8009 	mrs	r0, PSP
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	4b15      	ldr	r3, [pc, #84]	; (8004b10 <pxCurrentTCBConst>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	f01e 0f10 	tst.w	lr, #16
 8004ac0:	bf08      	it	eq
 8004ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aca:	6010      	str	r0, [r2, #0]
 8004acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ad4:	f380 8811 	msr	BASEPRI, r0
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f7fe ffbe 	bl	8003a60 <vTaskSwitchContext>
 8004ae4:	f04f 0000 	mov.w	r0, #0
 8004ae8:	f380 8811 	msr	BASEPRI, r0
 8004aec:	bc09      	pop	{r0, r3}
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	6808      	ldr	r0, [r1, #0]
 8004af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af6:	f01e 0f10 	tst.w	lr, #16
 8004afa:	bf08      	it	eq
 8004afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b00:	f380 8809 	msr	PSP, r0
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	f3af 8000 	nop.w

08004b10 <pxCurrentTCBConst>:
 8004b10:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop

08004b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	607b      	str	r3, [r7, #4]
}
 8004b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b32:	f7fe fedb 	bl	80038ec <xTaskIncrementTick>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b3c:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <xPortSysTickHandler+0x40>)
 8004b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	2300      	movs	r3, #0
 8004b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f383 8811 	msr	BASEPRI, r3
}
 8004b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <vPortSetupTimerInterrupt+0x34>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <vPortSetupTimerInterrupt+0x38>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <vPortSetupTimerInterrupt+0x3c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <vPortSetupTimerInterrupt+0x40>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	099b      	lsrs	r3, r3, #6
 8004b78:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <vPortSetupTimerInterrupt+0x44>)
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b7e:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <vPortSetupTimerInterrupt+0x34>)
 8004b80:	2207      	movs	r2, #7
 8004b82:	601a      	str	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	e000e010 	.word	0xe000e010
 8004b94:	e000e018 	.word	0xe000e018
 8004b98:	20000000 	.word	0x20000000
 8004b9c:	10624dd3 	.word	0x10624dd3
 8004ba0:	e000e014 	.word	0xe000e014

08004ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004bb4 <vPortEnableVFP+0x10>
 8004ba8:	6801      	ldr	r1, [r0, #0]
 8004baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bae:	6001      	str	r1, [r0, #0]
 8004bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bb2:	bf00      	nop
 8004bb4:	e000ed88 	.word	0xe000ed88

08004bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004bbe:	f3ef 8305 	mrs	r3, IPSR
 8004bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b0f      	cmp	r3, #15
 8004bc8:	d914      	bls.n	8004bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004bca:	4a17      	ldr	r2, [pc, #92]	; (8004c28 <vPortValidateInterruptPriority+0x70>)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4413      	add	r3, r2
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bd4:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <vPortValidateInterruptPriority+0x74>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	7afa      	ldrb	r2, [r7, #11]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d20a      	bcs.n	8004bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	607b      	str	r3, [r7, #4]
}
 8004bf0:	bf00      	nop
 8004bf2:	e7fe      	b.n	8004bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <vPortValidateInterruptPriority+0x78>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <vPortValidateInterruptPriority+0x7c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d90a      	bls.n	8004c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	603b      	str	r3, [r7, #0]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <vPortValidateInterruptPriority+0x60>
	}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	e000e3f0 	.word	0xe000e3f0
 8004c2c:	20000e54 	.word	0x20000e54
 8004c30:	e000ed0c 	.word	0xe000ed0c
 8004c34:	20000e58 	.word	0x20000e58

08004c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c44:	f7fe fd96 	bl	8003774 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c48:	4b5b      	ldr	r3, [pc, #364]	; (8004db8 <pvPortMalloc+0x180>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c50:	f000 f920 	bl	8004e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c54:	4b59      	ldr	r3, [pc, #356]	; (8004dbc <pvPortMalloc+0x184>)
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f040 8093 	bne.w	8004d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01d      	beq.n	8004ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004c68:	2208      	movs	r2, #8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d014      	beq.n	8004ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f023 0307 	bic.w	r3, r3, #7
 8004c80:	3308      	adds	r3, #8
 8004c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	617b      	str	r3, [r7, #20]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d06e      	beq.n	8004d88 <pvPortMalloc+0x150>
 8004caa:	4b45      	ldr	r3, [pc, #276]	; (8004dc0 <pvPortMalloc+0x188>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d869      	bhi.n	8004d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cb4:	4b43      	ldr	r3, [pc, #268]	; (8004dc4 <pvPortMalloc+0x18c>)
 8004cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cb8:	4b42      	ldr	r3, [pc, #264]	; (8004dc4 <pvPortMalloc+0x18c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cbe:	e004      	b.n	8004cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d903      	bls.n	8004cdc <pvPortMalloc+0xa4>
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f1      	bne.n	8004cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cdc:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <pvPortMalloc+0x180>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d050      	beq.n	8004d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2208      	movs	r2, #8
 8004cec:	4413      	add	r3, r2
 8004cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	1ad2      	subs	r2, r2, r3
 8004d00:	2308      	movs	r3, #8
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d91f      	bls.n	8004d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <pvPortMalloc+0xf8>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	613b      	str	r3, [r7, #16]
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	1ad2      	subs	r2, r2, r3
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d42:	69b8      	ldr	r0, [r7, #24]
 8004d44:	f000 f908 	bl	8004f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d48:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <pvPortMalloc+0x188>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <pvPortMalloc+0x188>)
 8004d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d56:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <pvPortMalloc+0x188>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <pvPortMalloc+0x190>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d203      	bcs.n	8004d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d62:	4b17      	ldr	r3, [pc, #92]	; (8004dc0 <pvPortMalloc+0x188>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a18      	ldr	r2, [pc, #96]	; (8004dc8 <pvPortMalloc+0x190>)
 8004d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <pvPortMalloc+0x184>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d7e:	4b13      	ldr	r3, [pc, #76]	; (8004dcc <pvPortMalloc+0x194>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	4a11      	ldr	r2, [pc, #68]	; (8004dcc <pvPortMalloc+0x194>)
 8004d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d88:	f7fe fd02 	bl	8003790 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <pvPortMalloc+0x174>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	60fb      	str	r3, [r7, #12]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <pvPortMalloc+0x172>
	return pvReturn;
 8004dac:	69fb      	ldr	r3, [r7, #28]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3728      	adds	r7, #40	; 0x28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20004a64 	.word	0x20004a64
 8004dbc:	20004a78 	.word	0x20004a78
 8004dc0:	20004a68 	.word	0x20004a68
 8004dc4:	20004a5c 	.word	0x20004a5c
 8004dc8:	20004a6c 	.word	0x20004a6c
 8004dcc:	20004a70 	.word	0x20004a70

08004dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d04d      	beq.n	8004e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004de2:	2308      	movs	r3, #8
 8004de4:	425b      	negs	r3, r3
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4413      	add	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <vPortFree+0xb8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10a      	bne.n	8004e14 <vPortFree+0x44>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	60fb      	str	r3, [r7, #12]
}
 8004e10:	bf00      	nop
 8004e12:	e7fe      	b.n	8004e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <vPortFree+0x62>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	60bb      	str	r3, [r7, #8]
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <vPortFree+0xb8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01e      	beq.n	8004e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d11a      	bne.n	8004e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	4b0e      	ldr	r3, [pc, #56]	; (8004e88 <vPortFree+0xb8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	43db      	mvns	r3, r3
 8004e52:	401a      	ands	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e58:	f7fe fc8c 	bl	8003774 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <vPortFree+0xbc>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4413      	add	r3, r2
 8004e66:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <vPortFree+0xbc>)
 8004e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e6a:	6938      	ldr	r0, [r7, #16]
 8004e6c:	f000 f874 	bl	8004f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <vPortFree+0xc0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	4a06      	ldr	r2, [pc, #24]	; (8004e90 <vPortFree+0xc0>)
 8004e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e7a:	f7fe fc89 	bl	8003790 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e7e:	bf00      	nop
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20004a78 	.word	0x20004a78
 8004e8c:	20004a68 	.word	0x20004a68
 8004e90:	20004a74 	.word	0x20004a74

08004e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ea0:	4b27      	ldr	r3, [pc, #156]	; (8004f40 <prvHeapInit+0xac>)
 8004ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	3307      	adds	r3, #7
 8004eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0307 	bic.w	r3, r3, #7
 8004eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	4a1f      	ldr	r2, [pc, #124]	; (8004f40 <prvHeapInit+0xac>)
 8004ec4:	4413      	add	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <prvHeapInit+0xb0>)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ed2:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <prvHeapInit+0xb0>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	4413      	add	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0307 	bic.w	r3, r3, #7
 8004eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4a15      	ldr	r2, [pc, #84]	; (8004f48 <prvHeapInit+0xb4>)
 8004ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <prvHeapInit+0xb4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <prvHeapInit+0xb4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	1ad2      	subs	r2, r2, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f14:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <prvHeapInit+0xb4>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <prvHeapInit+0xb8>)
 8004f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <prvHeapInit+0xbc>)
 8004f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f2c:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <prvHeapInit+0xc0>)
 8004f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f32:	601a      	str	r2, [r3, #0]
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	20000e5c 	.word	0x20000e5c
 8004f44:	20004a5c 	.word	0x20004a5c
 8004f48:	20004a64 	.word	0x20004a64
 8004f4c:	20004a6c 	.word	0x20004a6c
 8004f50:	20004a68 	.word	0x20004a68
 8004f54:	20004a78 	.word	0x20004a78

08004f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f60:	4b28      	ldr	r3, [pc, #160]	; (8005004 <prvInsertBlockIntoFreeList+0xac>)
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e002      	b.n	8004f6c <prvInsertBlockIntoFreeList+0x14>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d8f7      	bhi.n	8004f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	4413      	add	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d108      	bne.n	8004f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	441a      	add	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	441a      	add	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d118      	bne.n	8004fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b15      	ldr	r3, [pc, #84]	; (8005008 <prvInsertBlockIntoFreeList+0xb0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d00d      	beq.n	8004fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	441a      	add	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e008      	b.n	8004fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fd6:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <prvInsertBlockIntoFreeList+0xb0>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e003      	b.n	8004fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d002      	beq.n	8004ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20004a5c 	.word	0x20004a5c
 8005008:	20004a64 	.word	0x20004a64

0800500c <__errno>:
 800500c:	4b01      	ldr	r3, [pc, #4]	; (8005014 <__errno+0x8>)
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000010 	.word	0x20000010

08005018 <__libc_init_array>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	4d0d      	ldr	r5, [pc, #52]	; (8005050 <__libc_init_array+0x38>)
 800501c:	4c0d      	ldr	r4, [pc, #52]	; (8005054 <__libc_init_array+0x3c>)
 800501e:	1b64      	subs	r4, r4, r5
 8005020:	10a4      	asrs	r4, r4, #2
 8005022:	2600      	movs	r6, #0
 8005024:	42a6      	cmp	r6, r4
 8005026:	d109      	bne.n	800503c <__libc_init_array+0x24>
 8005028:	4d0b      	ldr	r5, [pc, #44]	; (8005058 <__libc_init_array+0x40>)
 800502a:	4c0c      	ldr	r4, [pc, #48]	; (800505c <__libc_init_array+0x44>)
 800502c:	f000 ffbc 	bl	8005fa8 <_init>
 8005030:	1b64      	subs	r4, r4, r5
 8005032:	10a4      	asrs	r4, r4, #2
 8005034:	2600      	movs	r6, #0
 8005036:	42a6      	cmp	r6, r4
 8005038:	d105      	bne.n	8005046 <__libc_init_array+0x2e>
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005040:	4798      	blx	r3
 8005042:	3601      	adds	r6, #1
 8005044:	e7ee      	b.n	8005024 <__libc_init_array+0xc>
 8005046:	f855 3b04 	ldr.w	r3, [r5], #4
 800504a:	4798      	blx	r3
 800504c:	3601      	adds	r6, #1
 800504e:	e7f2      	b.n	8005036 <__libc_init_array+0x1e>
 8005050:	08006174 	.word	0x08006174
 8005054:	08006174 	.word	0x08006174
 8005058:	08006174 	.word	0x08006174
 800505c:	08006178 	.word	0x08006178

08005060 <memcpy>:
 8005060:	440a      	add	r2, r1
 8005062:	4291      	cmp	r1, r2
 8005064:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005068:	d100      	bne.n	800506c <memcpy+0xc>
 800506a:	4770      	bx	lr
 800506c:	b510      	push	{r4, lr}
 800506e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005076:	4291      	cmp	r1, r2
 8005078:	d1f9      	bne.n	800506e <memcpy+0xe>
 800507a:	bd10      	pop	{r4, pc}

0800507c <memset>:
 800507c:	4402      	add	r2, r0
 800507e:	4603      	mov	r3, r0
 8005080:	4293      	cmp	r3, r2
 8005082:	d100      	bne.n	8005086 <memset+0xa>
 8005084:	4770      	bx	lr
 8005086:	f803 1b01 	strb.w	r1, [r3], #1
 800508a:	e7f9      	b.n	8005080 <memset+0x4>

0800508c <iprintf>:
 800508c:	b40f      	push	{r0, r1, r2, r3}
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <iprintf+0x2c>)
 8005090:	b513      	push	{r0, r1, r4, lr}
 8005092:	681c      	ldr	r4, [r3, #0]
 8005094:	b124      	cbz	r4, 80050a0 <iprintf+0x14>
 8005096:	69a3      	ldr	r3, [r4, #24]
 8005098:	b913      	cbnz	r3, 80050a0 <iprintf+0x14>
 800509a:	4620      	mov	r0, r4
 800509c:	f000 f866 	bl	800516c <__sinit>
 80050a0:	ab05      	add	r3, sp, #20
 80050a2:	9a04      	ldr	r2, [sp, #16]
 80050a4:	68a1      	ldr	r1, [r4, #8]
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 f9bd 	bl	8005428 <_vfiprintf_r>
 80050ae:	b002      	add	sp, #8
 80050b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b4:	b004      	add	sp, #16
 80050b6:	4770      	bx	lr
 80050b8:	20000010 	.word	0x20000010

080050bc <std>:
 80050bc:	2300      	movs	r3, #0
 80050be:	b510      	push	{r4, lr}
 80050c0:	4604      	mov	r4, r0
 80050c2:	e9c0 3300 	strd	r3, r3, [r0]
 80050c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050ca:	6083      	str	r3, [r0, #8]
 80050cc:	8181      	strh	r1, [r0, #12]
 80050ce:	6643      	str	r3, [r0, #100]	; 0x64
 80050d0:	81c2      	strh	r2, [r0, #14]
 80050d2:	6183      	str	r3, [r0, #24]
 80050d4:	4619      	mov	r1, r3
 80050d6:	2208      	movs	r2, #8
 80050d8:	305c      	adds	r0, #92	; 0x5c
 80050da:	f7ff ffcf 	bl	800507c <memset>
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <std+0x38>)
 80050e0:	6263      	str	r3, [r4, #36]	; 0x24
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <std+0x3c>)
 80050e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <std+0x40>)
 80050e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <std+0x44>)
 80050ec:	6224      	str	r4, [r4, #32]
 80050ee:	6323      	str	r3, [r4, #48]	; 0x30
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	bf00      	nop
 80050f4:	080059d1 	.word	0x080059d1
 80050f8:	080059f3 	.word	0x080059f3
 80050fc:	08005a2b 	.word	0x08005a2b
 8005100:	08005a4f 	.word	0x08005a4f

08005104 <_cleanup_r>:
 8005104:	4901      	ldr	r1, [pc, #4]	; (800510c <_cleanup_r+0x8>)
 8005106:	f000 b8af 	b.w	8005268 <_fwalk_reent>
 800510a:	bf00      	nop
 800510c:	08005d29 	.word	0x08005d29

08005110 <__sfmoreglue>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	2268      	movs	r2, #104	; 0x68
 8005114:	1e4d      	subs	r5, r1, #1
 8005116:	4355      	muls	r5, r2
 8005118:	460e      	mov	r6, r1
 800511a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800511e:	f000 f8e5 	bl	80052ec <_malloc_r>
 8005122:	4604      	mov	r4, r0
 8005124:	b140      	cbz	r0, 8005138 <__sfmoreglue+0x28>
 8005126:	2100      	movs	r1, #0
 8005128:	e9c0 1600 	strd	r1, r6, [r0]
 800512c:	300c      	adds	r0, #12
 800512e:	60a0      	str	r0, [r4, #8]
 8005130:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005134:	f7ff ffa2 	bl	800507c <memset>
 8005138:	4620      	mov	r0, r4
 800513a:	bd70      	pop	{r4, r5, r6, pc}

0800513c <__sfp_lock_acquire>:
 800513c:	4801      	ldr	r0, [pc, #4]	; (8005144 <__sfp_lock_acquire+0x8>)
 800513e:	f000 b8b3 	b.w	80052a8 <__retarget_lock_acquire_recursive>
 8005142:	bf00      	nop
 8005144:	20004a7d 	.word	0x20004a7d

08005148 <__sfp_lock_release>:
 8005148:	4801      	ldr	r0, [pc, #4]	; (8005150 <__sfp_lock_release+0x8>)
 800514a:	f000 b8ae 	b.w	80052aa <__retarget_lock_release_recursive>
 800514e:	bf00      	nop
 8005150:	20004a7d 	.word	0x20004a7d

08005154 <__sinit_lock_acquire>:
 8005154:	4801      	ldr	r0, [pc, #4]	; (800515c <__sinit_lock_acquire+0x8>)
 8005156:	f000 b8a7 	b.w	80052a8 <__retarget_lock_acquire_recursive>
 800515a:	bf00      	nop
 800515c:	20004a7e 	.word	0x20004a7e

08005160 <__sinit_lock_release>:
 8005160:	4801      	ldr	r0, [pc, #4]	; (8005168 <__sinit_lock_release+0x8>)
 8005162:	f000 b8a2 	b.w	80052aa <__retarget_lock_release_recursive>
 8005166:	bf00      	nop
 8005168:	20004a7e 	.word	0x20004a7e

0800516c <__sinit>:
 800516c:	b510      	push	{r4, lr}
 800516e:	4604      	mov	r4, r0
 8005170:	f7ff fff0 	bl	8005154 <__sinit_lock_acquire>
 8005174:	69a3      	ldr	r3, [r4, #24]
 8005176:	b11b      	cbz	r3, 8005180 <__sinit+0x14>
 8005178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800517c:	f7ff bff0 	b.w	8005160 <__sinit_lock_release>
 8005180:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005184:	6523      	str	r3, [r4, #80]	; 0x50
 8005186:	4b13      	ldr	r3, [pc, #76]	; (80051d4 <__sinit+0x68>)
 8005188:	4a13      	ldr	r2, [pc, #76]	; (80051d8 <__sinit+0x6c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	62a2      	str	r2, [r4, #40]	; 0x28
 800518e:	42a3      	cmp	r3, r4
 8005190:	bf04      	itt	eq
 8005192:	2301      	moveq	r3, #1
 8005194:	61a3      	streq	r3, [r4, #24]
 8005196:	4620      	mov	r0, r4
 8005198:	f000 f820 	bl	80051dc <__sfp>
 800519c:	6060      	str	r0, [r4, #4]
 800519e:	4620      	mov	r0, r4
 80051a0:	f000 f81c 	bl	80051dc <__sfp>
 80051a4:	60a0      	str	r0, [r4, #8]
 80051a6:	4620      	mov	r0, r4
 80051a8:	f000 f818 	bl	80051dc <__sfp>
 80051ac:	2200      	movs	r2, #0
 80051ae:	60e0      	str	r0, [r4, #12]
 80051b0:	2104      	movs	r1, #4
 80051b2:	6860      	ldr	r0, [r4, #4]
 80051b4:	f7ff ff82 	bl	80050bc <std>
 80051b8:	68a0      	ldr	r0, [r4, #8]
 80051ba:	2201      	movs	r2, #1
 80051bc:	2109      	movs	r1, #9
 80051be:	f7ff ff7d 	bl	80050bc <std>
 80051c2:	68e0      	ldr	r0, [r4, #12]
 80051c4:	2202      	movs	r2, #2
 80051c6:	2112      	movs	r1, #18
 80051c8:	f7ff ff78 	bl	80050bc <std>
 80051cc:	2301      	movs	r3, #1
 80051ce:	61a3      	str	r3, [r4, #24]
 80051d0:	e7d2      	b.n	8005178 <__sinit+0xc>
 80051d2:	bf00      	nop
 80051d4:	080060d4 	.word	0x080060d4
 80051d8:	08005105 	.word	0x08005105

080051dc <__sfp>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	4607      	mov	r7, r0
 80051e0:	f7ff ffac 	bl	800513c <__sfp_lock_acquire>
 80051e4:	4b1e      	ldr	r3, [pc, #120]	; (8005260 <__sfp+0x84>)
 80051e6:	681e      	ldr	r6, [r3, #0]
 80051e8:	69b3      	ldr	r3, [r6, #24]
 80051ea:	b913      	cbnz	r3, 80051f2 <__sfp+0x16>
 80051ec:	4630      	mov	r0, r6
 80051ee:	f7ff ffbd 	bl	800516c <__sinit>
 80051f2:	3648      	adds	r6, #72	; 0x48
 80051f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	d503      	bpl.n	8005204 <__sfp+0x28>
 80051fc:	6833      	ldr	r3, [r6, #0]
 80051fe:	b30b      	cbz	r3, 8005244 <__sfp+0x68>
 8005200:	6836      	ldr	r6, [r6, #0]
 8005202:	e7f7      	b.n	80051f4 <__sfp+0x18>
 8005204:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005208:	b9d5      	cbnz	r5, 8005240 <__sfp+0x64>
 800520a:	4b16      	ldr	r3, [pc, #88]	; (8005264 <__sfp+0x88>)
 800520c:	60e3      	str	r3, [r4, #12]
 800520e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005212:	6665      	str	r5, [r4, #100]	; 0x64
 8005214:	f000 f847 	bl	80052a6 <__retarget_lock_init_recursive>
 8005218:	f7ff ff96 	bl	8005148 <__sfp_lock_release>
 800521c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005220:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005224:	6025      	str	r5, [r4, #0]
 8005226:	61a5      	str	r5, [r4, #24]
 8005228:	2208      	movs	r2, #8
 800522a:	4629      	mov	r1, r5
 800522c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005230:	f7ff ff24 	bl	800507c <memset>
 8005234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800523c:	4620      	mov	r0, r4
 800523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005240:	3468      	adds	r4, #104	; 0x68
 8005242:	e7d9      	b.n	80051f8 <__sfp+0x1c>
 8005244:	2104      	movs	r1, #4
 8005246:	4638      	mov	r0, r7
 8005248:	f7ff ff62 	bl	8005110 <__sfmoreglue>
 800524c:	4604      	mov	r4, r0
 800524e:	6030      	str	r0, [r6, #0]
 8005250:	2800      	cmp	r0, #0
 8005252:	d1d5      	bne.n	8005200 <__sfp+0x24>
 8005254:	f7ff ff78 	bl	8005148 <__sfp_lock_release>
 8005258:	230c      	movs	r3, #12
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	e7ee      	b.n	800523c <__sfp+0x60>
 800525e:	bf00      	nop
 8005260:	080060d4 	.word	0x080060d4
 8005264:	ffff0001 	.word	0xffff0001

08005268 <_fwalk_reent>:
 8005268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800526c:	4606      	mov	r6, r0
 800526e:	4688      	mov	r8, r1
 8005270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005274:	2700      	movs	r7, #0
 8005276:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800527a:	f1b9 0901 	subs.w	r9, r9, #1
 800527e:	d505      	bpl.n	800528c <_fwalk_reent+0x24>
 8005280:	6824      	ldr	r4, [r4, #0]
 8005282:	2c00      	cmp	r4, #0
 8005284:	d1f7      	bne.n	8005276 <_fwalk_reent+0xe>
 8005286:	4638      	mov	r0, r7
 8005288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800528c:	89ab      	ldrh	r3, [r5, #12]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d907      	bls.n	80052a2 <_fwalk_reent+0x3a>
 8005292:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005296:	3301      	adds	r3, #1
 8005298:	d003      	beq.n	80052a2 <_fwalk_reent+0x3a>
 800529a:	4629      	mov	r1, r5
 800529c:	4630      	mov	r0, r6
 800529e:	47c0      	blx	r8
 80052a0:	4307      	orrs	r7, r0
 80052a2:	3568      	adds	r5, #104	; 0x68
 80052a4:	e7e9      	b.n	800527a <_fwalk_reent+0x12>

080052a6 <__retarget_lock_init_recursive>:
 80052a6:	4770      	bx	lr

080052a8 <__retarget_lock_acquire_recursive>:
 80052a8:	4770      	bx	lr

080052aa <__retarget_lock_release_recursive>:
 80052aa:	4770      	bx	lr

080052ac <sbrk_aligned>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	4e0e      	ldr	r6, [pc, #56]	; (80052e8 <sbrk_aligned+0x3c>)
 80052b0:	460c      	mov	r4, r1
 80052b2:	6831      	ldr	r1, [r6, #0]
 80052b4:	4605      	mov	r5, r0
 80052b6:	b911      	cbnz	r1, 80052be <sbrk_aligned+0x12>
 80052b8:	f000 fb7a 	bl	80059b0 <_sbrk_r>
 80052bc:	6030      	str	r0, [r6, #0]
 80052be:	4621      	mov	r1, r4
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 fb75 	bl	80059b0 <_sbrk_r>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d00a      	beq.n	80052e0 <sbrk_aligned+0x34>
 80052ca:	1cc4      	adds	r4, r0, #3
 80052cc:	f024 0403 	bic.w	r4, r4, #3
 80052d0:	42a0      	cmp	r0, r4
 80052d2:	d007      	beq.n	80052e4 <sbrk_aligned+0x38>
 80052d4:	1a21      	subs	r1, r4, r0
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 fb6a 	bl	80059b0 <_sbrk_r>
 80052dc:	3001      	adds	r0, #1
 80052de:	d101      	bne.n	80052e4 <sbrk_aligned+0x38>
 80052e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80052e4:	4620      	mov	r0, r4
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	20004a84 	.word	0x20004a84

080052ec <_malloc_r>:
 80052ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f0:	1ccd      	adds	r5, r1, #3
 80052f2:	f025 0503 	bic.w	r5, r5, #3
 80052f6:	3508      	adds	r5, #8
 80052f8:	2d0c      	cmp	r5, #12
 80052fa:	bf38      	it	cc
 80052fc:	250c      	movcc	r5, #12
 80052fe:	2d00      	cmp	r5, #0
 8005300:	4607      	mov	r7, r0
 8005302:	db01      	blt.n	8005308 <_malloc_r+0x1c>
 8005304:	42a9      	cmp	r1, r5
 8005306:	d905      	bls.n	8005314 <_malloc_r+0x28>
 8005308:	230c      	movs	r3, #12
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	2600      	movs	r6, #0
 800530e:	4630      	mov	r0, r6
 8005310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005314:	4e2e      	ldr	r6, [pc, #184]	; (80053d0 <_malloc_r+0xe4>)
 8005316:	f000 fdbb 	bl	8005e90 <__malloc_lock>
 800531a:	6833      	ldr	r3, [r6, #0]
 800531c:	461c      	mov	r4, r3
 800531e:	bb34      	cbnz	r4, 800536e <_malloc_r+0x82>
 8005320:	4629      	mov	r1, r5
 8005322:	4638      	mov	r0, r7
 8005324:	f7ff ffc2 	bl	80052ac <sbrk_aligned>
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	4604      	mov	r4, r0
 800532c:	d14d      	bne.n	80053ca <_malloc_r+0xde>
 800532e:	6834      	ldr	r4, [r6, #0]
 8005330:	4626      	mov	r6, r4
 8005332:	2e00      	cmp	r6, #0
 8005334:	d140      	bne.n	80053b8 <_malloc_r+0xcc>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	4631      	mov	r1, r6
 800533a:	4638      	mov	r0, r7
 800533c:	eb04 0803 	add.w	r8, r4, r3
 8005340:	f000 fb36 	bl	80059b0 <_sbrk_r>
 8005344:	4580      	cmp	r8, r0
 8005346:	d13a      	bne.n	80053be <_malloc_r+0xd2>
 8005348:	6821      	ldr	r1, [r4, #0]
 800534a:	3503      	adds	r5, #3
 800534c:	1a6d      	subs	r5, r5, r1
 800534e:	f025 0503 	bic.w	r5, r5, #3
 8005352:	3508      	adds	r5, #8
 8005354:	2d0c      	cmp	r5, #12
 8005356:	bf38      	it	cc
 8005358:	250c      	movcc	r5, #12
 800535a:	4629      	mov	r1, r5
 800535c:	4638      	mov	r0, r7
 800535e:	f7ff ffa5 	bl	80052ac <sbrk_aligned>
 8005362:	3001      	adds	r0, #1
 8005364:	d02b      	beq.n	80053be <_malloc_r+0xd2>
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	442b      	add	r3, r5
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	e00e      	b.n	800538c <_malloc_r+0xa0>
 800536e:	6822      	ldr	r2, [r4, #0]
 8005370:	1b52      	subs	r2, r2, r5
 8005372:	d41e      	bmi.n	80053b2 <_malloc_r+0xc6>
 8005374:	2a0b      	cmp	r2, #11
 8005376:	d916      	bls.n	80053a6 <_malloc_r+0xba>
 8005378:	1961      	adds	r1, r4, r5
 800537a:	42a3      	cmp	r3, r4
 800537c:	6025      	str	r5, [r4, #0]
 800537e:	bf18      	it	ne
 8005380:	6059      	strne	r1, [r3, #4]
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	bf08      	it	eq
 8005386:	6031      	streq	r1, [r6, #0]
 8005388:	5162      	str	r2, [r4, r5]
 800538a:	604b      	str	r3, [r1, #4]
 800538c:	4638      	mov	r0, r7
 800538e:	f104 060b 	add.w	r6, r4, #11
 8005392:	f000 fd83 	bl	8005e9c <__malloc_unlock>
 8005396:	f026 0607 	bic.w	r6, r6, #7
 800539a:	1d23      	adds	r3, r4, #4
 800539c:	1af2      	subs	r2, r6, r3
 800539e:	d0b6      	beq.n	800530e <_malloc_r+0x22>
 80053a0:	1b9b      	subs	r3, r3, r6
 80053a2:	50a3      	str	r3, [r4, r2]
 80053a4:	e7b3      	b.n	800530e <_malloc_r+0x22>
 80053a6:	6862      	ldr	r2, [r4, #4]
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	bf0c      	ite	eq
 80053ac:	6032      	streq	r2, [r6, #0]
 80053ae:	605a      	strne	r2, [r3, #4]
 80053b0:	e7ec      	b.n	800538c <_malloc_r+0xa0>
 80053b2:	4623      	mov	r3, r4
 80053b4:	6864      	ldr	r4, [r4, #4]
 80053b6:	e7b2      	b.n	800531e <_malloc_r+0x32>
 80053b8:	4634      	mov	r4, r6
 80053ba:	6876      	ldr	r6, [r6, #4]
 80053bc:	e7b9      	b.n	8005332 <_malloc_r+0x46>
 80053be:	230c      	movs	r3, #12
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	4638      	mov	r0, r7
 80053c4:	f000 fd6a 	bl	8005e9c <__malloc_unlock>
 80053c8:	e7a1      	b.n	800530e <_malloc_r+0x22>
 80053ca:	6025      	str	r5, [r4, #0]
 80053cc:	e7de      	b.n	800538c <_malloc_r+0xa0>
 80053ce:	bf00      	nop
 80053d0:	20004a80 	.word	0x20004a80

080053d4 <__sfputc_r>:
 80053d4:	6893      	ldr	r3, [r2, #8]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	b410      	push	{r4}
 80053dc:	6093      	str	r3, [r2, #8]
 80053de:	da08      	bge.n	80053f2 <__sfputc_r+0x1e>
 80053e0:	6994      	ldr	r4, [r2, #24]
 80053e2:	42a3      	cmp	r3, r4
 80053e4:	db01      	blt.n	80053ea <__sfputc_r+0x16>
 80053e6:	290a      	cmp	r1, #10
 80053e8:	d103      	bne.n	80053f2 <__sfputc_r+0x1e>
 80053ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053ee:	f000 bb33 	b.w	8005a58 <__swbuf_r>
 80053f2:	6813      	ldr	r3, [r2, #0]
 80053f4:	1c58      	adds	r0, r3, #1
 80053f6:	6010      	str	r0, [r2, #0]
 80053f8:	7019      	strb	r1, [r3, #0]
 80053fa:	4608      	mov	r0, r1
 80053fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005400:	4770      	bx	lr

08005402 <__sfputs_r>:
 8005402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005404:	4606      	mov	r6, r0
 8005406:	460f      	mov	r7, r1
 8005408:	4614      	mov	r4, r2
 800540a:	18d5      	adds	r5, r2, r3
 800540c:	42ac      	cmp	r4, r5
 800540e:	d101      	bne.n	8005414 <__sfputs_r+0x12>
 8005410:	2000      	movs	r0, #0
 8005412:	e007      	b.n	8005424 <__sfputs_r+0x22>
 8005414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005418:	463a      	mov	r2, r7
 800541a:	4630      	mov	r0, r6
 800541c:	f7ff ffda 	bl	80053d4 <__sfputc_r>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d1f3      	bne.n	800540c <__sfputs_r+0xa>
 8005424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005428 <_vfiprintf_r>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	460d      	mov	r5, r1
 800542e:	b09d      	sub	sp, #116	; 0x74
 8005430:	4614      	mov	r4, r2
 8005432:	4698      	mov	r8, r3
 8005434:	4606      	mov	r6, r0
 8005436:	b118      	cbz	r0, 8005440 <_vfiprintf_r+0x18>
 8005438:	6983      	ldr	r3, [r0, #24]
 800543a:	b90b      	cbnz	r3, 8005440 <_vfiprintf_r+0x18>
 800543c:	f7ff fe96 	bl	800516c <__sinit>
 8005440:	4b89      	ldr	r3, [pc, #548]	; (8005668 <_vfiprintf_r+0x240>)
 8005442:	429d      	cmp	r5, r3
 8005444:	d11b      	bne.n	800547e <_vfiprintf_r+0x56>
 8005446:	6875      	ldr	r5, [r6, #4]
 8005448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800544a:	07d9      	lsls	r1, r3, #31
 800544c:	d405      	bmi.n	800545a <_vfiprintf_r+0x32>
 800544e:	89ab      	ldrh	r3, [r5, #12]
 8005450:	059a      	lsls	r2, r3, #22
 8005452:	d402      	bmi.n	800545a <_vfiprintf_r+0x32>
 8005454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005456:	f7ff ff27 	bl	80052a8 <__retarget_lock_acquire_recursive>
 800545a:	89ab      	ldrh	r3, [r5, #12]
 800545c:	071b      	lsls	r3, r3, #28
 800545e:	d501      	bpl.n	8005464 <_vfiprintf_r+0x3c>
 8005460:	692b      	ldr	r3, [r5, #16]
 8005462:	b9eb      	cbnz	r3, 80054a0 <_vfiprintf_r+0x78>
 8005464:	4629      	mov	r1, r5
 8005466:	4630      	mov	r0, r6
 8005468:	f000 fb5a 	bl	8005b20 <__swsetup_r>
 800546c:	b1c0      	cbz	r0, 80054a0 <_vfiprintf_r+0x78>
 800546e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005470:	07dc      	lsls	r4, r3, #31
 8005472:	d50e      	bpl.n	8005492 <_vfiprintf_r+0x6a>
 8005474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005478:	b01d      	add	sp, #116	; 0x74
 800547a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547e:	4b7b      	ldr	r3, [pc, #492]	; (800566c <_vfiprintf_r+0x244>)
 8005480:	429d      	cmp	r5, r3
 8005482:	d101      	bne.n	8005488 <_vfiprintf_r+0x60>
 8005484:	68b5      	ldr	r5, [r6, #8]
 8005486:	e7df      	b.n	8005448 <_vfiprintf_r+0x20>
 8005488:	4b79      	ldr	r3, [pc, #484]	; (8005670 <_vfiprintf_r+0x248>)
 800548a:	429d      	cmp	r5, r3
 800548c:	bf08      	it	eq
 800548e:	68f5      	ldreq	r5, [r6, #12]
 8005490:	e7da      	b.n	8005448 <_vfiprintf_r+0x20>
 8005492:	89ab      	ldrh	r3, [r5, #12]
 8005494:	0598      	lsls	r0, r3, #22
 8005496:	d4ed      	bmi.n	8005474 <_vfiprintf_r+0x4c>
 8005498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800549a:	f7ff ff06 	bl	80052aa <__retarget_lock_release_recursive>
 800549e:	e7e9      	b.n	8005474 <_vfiprintf_r+0x4c>
 80054a0:	2300      	movs	r3, #0
 80054a2:	9309      	str	r3, [sp, #36]	; 0x24
 80054a4:	2320      	movs	r3, #32
 80054a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ae:	2330      	movs	r3, #48	; 0x30
 80054b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005674 <_vfiprintf_r+0x24c>
 80054b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054b8:	f04f 0901 	mov.w	r9, #1
 80054bc:	4623      	mov	r3, r4
 80054be:	469a      	mov	sl, r3
 80054c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054c4:	b10a      	cbz	r2, 80054ca <_vfiprintf_r+0xa2>
 80054c6:	2a25      	cmp	r2, #37	; 0x25
 80054c8:	d1f9      	bne.n	80054be <_vfiprintf_r+0x96>
 80054ca:	ebba 0b04 	subs.w	fp, sl, r4
 80054ce:	d00b      	beq.n	80054e8 <_vfiprintf_r+0xc0>
 80054d0:	465b      	mov	r3, fp
 80054d2:	4622      	mov	r2, r4
 80054d4:	4629      	mov	r1, r5
 80054d6:	4630      	mov	r0, r6
 80054d8:	f7ff ff93 	bl	8005402 <__sfputs_r>
 80054dc:	3001      	adds	r0, #1
 80054de:	f000 80aa 	beq.w	8005636 <_vfiprintf_r+0x20e>
 80054e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054e4:	445a      	add	r2, fp
 80054e6:	9209      	str	r2, [sp, #36]	; 0x24
 80054e8:	f89a 3000 	ldrb.w	r3, [sl]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80a2 	beq.w	8005636 <_vfiprintf_r+0x20e>
 80054f2:	2300      	movs	r3, #0
 80054f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054fc:	f10a 0a01 	add.w	sl, sl, #1
 8005500:	9304      	str	r3, [sp, #16]
 8005502:	9307      	str	r3, [sp, #28]
 8005504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005508:	931a      	str	r3, [sp, #104]	; 0x68
 800550a:	4654      	mov	r4, sl
 800550c:	2205      	movs	r2, #5
 800550e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005512:	4858      	ldr	r0, [pc, #352]	; (8005674 <_vfiprintf_r+0x24c>)
 8005514:	f7fa fe64 	bl	80001e0 <memchr>
 8005518:	9a04      	ldr	r2, [sp, #16]
 800551a:	b9d8      	cbnz	r0, 8005554 <_vfiprintf_r+0x12c>
 800551c:	06d1      	lsls	r1, r2, #27
 800551e:	bf44      	itt	mi
 8005520:	2320      	movmi	r3, #32
 8005522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005526:	0713      	lsls	r3, r2, #28
 8005528:	bf44      	itt	mi
 800552a:	232b      	movmi	r3, #43	; 0x2b
 800552c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005530:	f89a 3000 	ldrb.w	r3, [sl]
 8005534:	2b2a      	cmp	r3, #42	; 0x2a
 8005536:	d015      	beq.n	8005564 <_vfiprintf_r+0x13c>
 8005538:	9a07      	ldr	r2, [sp, #28]
 800553a:	4654      	mov	r4, sl
 800553c:	2000      	movs	r0, #0
 800553e:	f04f 0c0a 	mov.w	ip, #10
 8005542:	4621      	mov	r1, r4
 8005544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005548:	3b30      	subs	r3, #48	; 0x30
 800554a:	2b09      	cmp	r3, #9
 800554c:	d94e      	bls.n	80055ec <_vfiprintf_r+0x1c4>
 800554e:	b1b0      	cbz	r0, 800557e <_vfiprintf_r+0x156>
 8005550:	9207      	str	r2, [sp, #28]
 8005552:	e014      	b.n	800557e <_vfiprintf_r+0x156>
 8005554:	eba0 0308 	sub.w	r3, r0, r8
 8005558:	fa09 f303 	lsl.w	r3, r9, r3
 800555c:	4313      	orrs	r3, r2
 800555e:	9304      	str	r3, [sp, #16]
 8005560:	46a2      	mov	sl, r4
 8005562:	e7d2      	b.n	800550a <_vfiprintf_r+0xe2>
 8005564:	9b03      	ldr	r3, [sp, #12]
 8005566:	1d19      	adds	r1, r3, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	9103      	str	r1, [sp, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	bfbb      	ittet	lt
 8005570:	425b      	neglt	r3, r3
 8005572:	f042 0202 	orrlt.w	r2, r2, #2
 8005576:	9307      	strge	r3, [sp, #28]
 8005578:	9307      	strlt	r3, [sp, #28]
 800557a:	bfb8      	it	lt
 800557c:	9204      	strlt	r2, [sp, #16]
 800557e:	7823      	ldrb	r3, [r4, #0]
 8005580:	2b2e      	cmp	r3, #46	; 0x2e
 8005582:	d10c      	bne.n	800559e <_vfiprintf_r+0x176>
 8005584:	7863      	ldrb	r3, [r4, #1]
 8005586:	2b2a      	cmp	r3, #42	; 0x2a
 8005588:	d135      	bne.n	80055f6 <_vfiprintf_r+0x1ce>
 800558a:	9b03      	ldr	r3, [sp, #12]
 800558c:	1d1a      	adds	r2, r3, #4
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	9203      	str	r2, [sp, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	bfb8      	it	lt
 8005596:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800559a:	3402      	adds	r4, #2
 800559c:	9305      	str	r3, [sp, #20]
 800559e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005684 <_vfiprintf_r+0x25c>
 80055a2:	7821      	ldrb	r1, [r4, #0]
 80055a4:	2203      	movs	r2, #3
 80055a6:	4650      	mov	r0, sl
 80055a8:	f7fa fe1a 	bl	80001e0 <memchr>
 80055ac:	b140      	cbz	r0, 80055c0 <_vfiprintf_r+0x198>
 80055ae:	2340      	movs	r3, #64	; 0x40
 80055b0:	eba0 000a 	sub.w	r0, r0, sl
 80055b4:	fa03 f000 	lsl.w	r0, r3, r0
 80055b8:	9b04      	ldr	r3, [sp, #16]
 80055ba:	4303      	orrs	r3, r0
 80055bc:	3401      	adds	r4, #1
 80055be:	9304      	str	r3, [sp, #16]
 80055c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055c4:	482c      	ldr	r0, [pc, #176]	; (8005678 <_vfiprintf_r+0x250>)
 80055c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055ca:	2206      	movs	r2, #6
 80055cc:	f7fa fe08 	bl	80001e0 <memchr>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d03f      	beq.n	8005654 <_vfiprintf_r+0x22c>
 80055d4:	4b29      	ldr	r3, [pc, #164]	; (800567c <_vfiprintf_r+0x254>)
 80055d6:	bb1b      	cbnz	r3, 8005620 <_vfiprintf_r+0x1f8>
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	3307      	adds	r3, #7
 80055dc:	f023 0307 	bic.w	r3, r3, #7
 80055e0:	3308      	adds	r3, #8
 80055e2:	9303      	str	r3, [sp, #12]
 80055e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e6:	443b      	add	r3, r7
 80055e8:	9309      	str	r3, [sp, #36]	; 0x24
 80055ea:	e767      	b.n	80054bc <_vfiprintf_r+0x94>
 80055ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80055f0:	460c      	mov	r4, r1
 80055f2:	2001      	movs	r0, #1
 80055f4:	e7a5      	b.n	8005542 <_vfiprintf_r+0x11a>
 80055f6:	2300      	movs	r3, #0
 80055f8:	3401      	adds	r4, #1
 80055fa:	9305      	str	r3, [sp, #20]
 80055fc:	4619      	mov	r1, r3
 80055fe:	f04f 0c0a 	mov.w	ip, #10
 8005602:	4620      	mov	r0, r4
 8005604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005608:	3a30      	subs	r2, #48	; 0x30
 800560a:	2a09      	cmp	r2, #9
 800560c:	d903      	bls.n	8005616 <_vfiprintf_r+0x1ee>
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0c5      	beq.n	800559e <_vfiprintf_r+0x176>
 8005612:	9105      	str	r1, [sp, #20]
 8005614:	e7c3      	b.n	800559e <_vfiprintf_r+0x176>
 8005616:	fb0c 2101 	mla	r1, ip, r1, r2
 800561a:	4604      	mov	r4, r0
 800561c:	2301      	movs	r3, #1
 800561e:	e7f0      	b.n	8005602 <_vfiprintf_r+0x1da>
 8005620:	ab03      	add	r3, sp, #12
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	462a      	mov	r2, r5
 8005626:	4b16      	ldr	r3, [pc, #88]	; (8005680 <_vfiprintf_r+0x258>)
 8005628:	a904      	add	r1, sp, #16
 800562a:	4630      	mov	r0, r6
 800562c:	f3af 8000 	nop.w
 8005630:	4607      	mov	r7, r0
 8005632:	1c78      	adds	r0, r7, #1
 8005634:	d1d6      	bne.n	80055e4 <_vfiprintf_r+0x1bc>
 8005636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005638:	07d9      	lsls	r1, r3, #31
 800563a:	d405      	bmi.n	8005648 <_vfiprintf_r+0x220>
 800563c:	89ab      	ldrh	r3, [r5, #12]
 800563e:	059a      	lsls	r2, r3, #22
 8005640:	d402      	bmi.n	8005648 <_vfiprintf_r+0x220>
 8005642:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005644:	f7ff fe31 	bl	80052aa <__retarget_lock_release_recursive>
 8005648:	89ab      	ldrh	r3, [r5, #12]
 800564a:	065b      	lsls	r3, r3, #25
 800564c:	f53f af12 	bmi.w	8005474 <_vfiprintf_r+0x4c>
 8005650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005652:	e711      	b.n	8005478 <_vfiprintf_r+0x50>
 8005654:	ab03      	add	r3, sp, #12
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	462a      	mov	r2, r5
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <_vfiprintf_r+0x258>)
 800565c:	a904      	add	r1, sp, #16
 800565e:	4630      	mov	r0, r6
 8005660:	f000 f880 	bl	8005764 <_printf_i>
 8005664:	e7e4      	b.n	8005630 <_vfiprintf_r+0x208>
 8005666:	bf00      	nop
 8005668:	080060f8 	.word	0x080060f8
 800566c:	08006118 	.word	0x08006118
 8005670:	080060d8 	.word	0x080060d8
 8005674:	08006138 	.word	0x08006138
 8005678:	08006142 	.word	0x08006142
 800567c:	00000000 	.word	0x00000000
 8005680:	08005403 	.word	0x08005403
 8005684:	0800613e 	.word	0x0800613e

08005688 <_printf_common>:
 8005688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800568c:	4616      	mov	r6, r2
 800568e:	4699      	mov	r9, r3
 8005690:	688a      	ldr	r2, [r1, #8]
 8005692:	690b      	ldr	r3, [r1, #16]
 8005694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005698:	4293      	cmp	r3, r2
 800569a:	bfb8      	it	lt
 800569c:	4613      	movlt	r3, r2
 800569e:	6033      	str	r3, [r6, #0]
 80056a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056a4:	4607      	mov	r7, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	b10a      	cbz	r2, 80056ae <_printf_common+0x26>
 80056aa:	3301      	adds	r3, #1
 80056ac:	6033      	str	r3, [r6, #0]
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	0699      	lsls	r1, r3, #26
 80056b2:	bf42      	ittt	mi
 80056b4:	6833      	ldrmi	r3, [r6, #0]
 80056b6:	3302      	addmi	r3, #2
 80056b8:	6033      	strmi	r3, [r6, #0]
 80056ba:	6825      	ldr	r5, [r4, #0]
 80056bc:	f015 0506 	ands.w	r5, r5, #6
 80056c0:	d106      	bne.n	80056d0 <_printf_common+0x48>
 80056c2:	f104 0a19 	add.w	sl, r4, #25
 80056c6:	68e3      	ldr	r3, [r4, #12]
 80056c8:	6832      	ldr	r2, [r6, #0]
 80056ca:	1a9b      	subs	r3, r3, r2
 80056cc:	42ab      	cmp	r3, r5
 80056ce:	dc26      	bgt.n	800571e <_printf_common+0x96>
 80056d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056d4:	1e13      	subs	r3, r2, #0
 80056d6:	6822      	ldr	r2, [r4, #0]
 80056d8:	bf18      	it	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	0692      	lsls	r2, r2, #26
 80056de:	d42b      	bmi.n	8005738 <_printf_common+0xb0>
 80056e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056e4:	4649      	mov	r1, r9
 80056e6:	4638      	mov	r0, r7
 80056e8:	47c0      	blx	r8
 80056ea:	3001      	adds	r0, #1
 80056ec:	d01e      	beq.n	800572c <_printf_common+0xa4>
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	68e5      	ldr	r5, [r4, #12]
 80056f2:	6832      	ldr	r2, [r6, #0]
 80056f4:	f003 0306 	and.w	r3, r3, #6
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	bf08      	it	eq
 80056fc:	1aad      	subeq	r5, r5, r2
 80056fe:	68a3      	ldr	r3, [r4, #8]
 8005700:	6922      	ldr	r2, [r4, #16]
 8005702:	bf0c      	ite	eq
 8005704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005708:	2500      	movne	r5, #0
 800570a:	4293      	cmp	r3, r2
 800570c:	bfc4      	itt	gt
 800570e:	1a9b      	subgt	r3, r3, r2
 8005710:	18ed      	addgt	r5, r5, r3
 8005712:	2600      	movs	r6, #0
 8005714:	341a      	adds	r4, #26
 8005716:	42b5      	cmp	r5, r6
 8005718:	d11a      	bne.n	8005750 <_printf_common+0xc8>
 800571a:	2000      	movs	r0, #0
 800571c:	e008      	b.n	8005730 <_printf_common+0xa8>
 800571e:	2301      	movs	r3, #1
 8005720:	4652      	mov	r2, sl
 8005722:	4649      	mov	r1, r9
 8005724:	4638      	mov	r0, r7
 8005726:	47c0      	blx	r8
 8005728:	3001      	adds	r0, #1
 800572a:	d103      	bne.n	8005734 <_printf_common+0xac>
 800572c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005734:	3501      	adds	r5, #1
 8005736:	e7c6      	b.n	80056c6 <_printf_common+0x3e>
 8005738:	18e1      	adds	r1, r4, r3
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	2030      	movs	r0, #48	; 0x30
 800573e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005742:	4422      	add	r2, r4
 8005744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800574c:	3302      	adds	r3, #2
 800574e:	e7c7      	b.n	80056e0 <_printf_common+0x58>
 8005750:	2301      	movs	r3, #1
 8005752:	4622      	mov	r2, r4
 8005754:	4649      	mov	r1, r9
 8005756:	4638      	mov	r0, r7
 8005758:	47c0      	blx	r8
 800575a:	3001      	adds	r0, #1
 800575c:	d0e6      	beq.n	800572c <_printf_common+0xa4>
 800575e:	3601      	adds	r6, #1
 8005760:	e7d9      	b.n	8005716 <_printf_common+0x8e>
	...

08005764 <_printf_i>:
 8005764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005768:	7e0f      	ldrb	r7, [r1, #24]
 800576a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800576c:	2f78      	cmp	r7, #120	; 0x78
 800576e:	4691      	mov	r9, r2
 8005770:	4680      	mov	r8, r0
 8005772:	460c      	mov	r4, r1
 8005774:	469a      	mov	sl, r3
 8005776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800577a:	d807      	bhi.n	800578c <_printf_i+0x28>
 800577c:	2f62      	cmp	r7, #98	; 0x62
 800577e:	d80a      	bhi.n	8005796 <_printf_i+0x32>
 8005780:	2f00      	cmp	r7, #0
 8005782:	f000 80d8 	beq.w	8005936 <_printf_i+0x1d2>
 8005786:	2f58      	cmp	r7, #88	; 0x58
 8005788:	f000 80a3 	beq.w	80058d2 <_printf_i+0x16e>
 800578c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005794:	e03a      	b.n	800580c <_printf_i+0xa8>
 8005796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800579a:	2b15      	cmp	r3, #21
 800579c:	d8f6      	bhi.n	800578c <_printf_i+0x28>
 800579e:	a101      	add	r1, pc, #4	; (adr r1, 80057a4 <_printf_i+0x40>)
 80057a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057a4:	080057fd 	.word	0x080057fd
 80057a8:	08005811 	.word	0x08005811
 80057ac:	0800578d 	.word	0x0800578d
 80057b0:	0800578d 	.word	0x0800578d
 80057b4:	0800578d 	.word	0x0800578d
 80057b8:	0800578d 	.word	0x0800578d
 80057bc:	08005811 	.word	0x08005811
 80057c0:	0800578d 	.word	0x0800578d
 80057c4:	0800578d 	.word	0x0800578d
 80057c8:	0800578d 	.word	0x0800578d
 80057cc:	0800578d 	.word	0x0800578d
 80057d0:	0800591d 	.word	0x0800591d
 80057d4:	08005841 	.word	0x08005841
 80057d8:	080058ff 	.word	0x080058ff
 80057dc:	0800578d 	.word	0x0800578d
 80057e0:	0800578d 	.word	0x0800578d
 80057e4:	0800593f 	.word	0x0800593f
 80057e8:	0800578d 	.word	0x0800578d
 80057ec:	08005841 	.word	0x08005841
 80057f0:	0800578d 	.word	0x0800578d
 80057f4:	0800578d 	.word	0x0800578d
 80057f8:	08005907 	.word	0x08005907
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	1d1a      	adds	r2, r3, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	602a      	str	r2, [r5, #0]
 8005804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800580c:	2301      	movs	r3, #1
 800580e:	e0a3      	b.n	8005958 <_printf_i+0x1f4>
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	6829      	ldr	r1, [r5, #0]
 8005814:	0606      	lsls	r6, r0, #24
 8005816:	f101 0304 	add.w	r3, r1, #4
 800581a:	d50a      	bpl.n	8005832 <_printf_i+0xce>
 800581c:	680e      	ldr	r6, [r1, #0]
 800581e:	602b      	str	r3, [r5, #0]
 8005820:	2e00      	cmp	r6, #0
 8005822:	da03      	bge.n	800582c <_printf_i+0xc8>
 8005824:	232d      	movs	r3, #45	; 0x2d
 8005826:	4276      	negs	r6, r6
 8005828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800582c:	485e      	ldr	r0, [pc, #376]	; (80059a8 <_printf_i+0x244>)
 800582e:	230a      	movs	r3, #10
 8005830:	e019      	b.n	8005866 <_printf_i+0x102>
 8005832:	680e      	ldr	r6, [r1, #0]
 8005834:	602b      	str	r3, [r5, #0]
 8005836:	f010 0f40 	tst.w	r0, #64	; 0x40
 800583a:	bf18      	it	ne
 800583c:	b236      	sxthne	r6, r6
 800583e:	e7ef      	b.n	8005820 <_printf_i+0xbc>
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	6820      	ldr	r0, [r4, #0]
 8005844:	1d19      	adds	r1, r3, #4
 8005846:	6029      	str	r1, [r5, #0]
 8005848:	0601      	lsls	r1, r0, #24
 800584a:	d501      	bpl.n	8005850 <_printf_i+0xec>
 800584c:	681e      	ldr	r6, [r3, #0]
 800584e:	e002      	b.n	8005856 <_printf_i+0xf2>
 8005850:	0646      	lsls	r6, r0, #25
 8005852:	d5fb      	bpl.n	800584c <_printf_i+0xe8>
 8005854:	881e      	ldrh	r6, [r3, #0]
 8005856:	4854      	ldr	r0, [pc, #336]	; (80059a8 <_printf_i+0x244>)
 8005858:	2f6f      	cmp	r7, #111	; 0x6f
 800585a:	bf0c      	ite	eq
 800585c:	2308      	moveq	r3, #8
 800585e:	230a      	movne	r3, #10
 8005860:	2100      	movs	r1, #0
 8005862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005866:	6865      	ldr	r5, [r4, #4]
 8005868:	60a5      	str	r5, [r4, #8]
 800586a:	2d00      	cmp	r5, #0
 800586c:	bfa2      	ittt	ge
 800586e:	6821      	ldrge	r1, [r4, #0]
 8005870:	f021 0104 	bicge.w	r1, r1, #4
 8005874:	6021      	strge	r1, [r4, #0]
 8005876:	b90e      	cbnz	r6, 800587c <_printf_i+0x118>
 8005878:	2d00      	cmp	r5, #0
 800587a:	d04d      	beq.n	8005918 <_printf_i+0x1b4>
 800587c:	4615      	mov	r5, r2
 800587e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005882:	fb03 6711 	mls	r7, r3, r1, r6
 8005886:	5dc7      	ldrb	r7, [r0, r7]
 8005888:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800588c:	4637      	mov	r7, r6
 800588e:	42bb      	cmp	r3, r7
 8005890:	460e      	mov	r6, r1
 8005892:	d9f4      	bls.n	800587e <_printf_i+0x11a>
 8005894:	2b08      	cmp	r3, #8
 8005896:	d10b      	bne.n	80058b0 <_printf_i+0x14c>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	07de      	lsls	r6, r3, #31
 800589c:	d508      	bpl.n	80058b0 <_printf_i+0x14c>
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	6861      	ldr	r1, [r4, #4]
 80058a2:	4299      	cmp	r1, r3
 80058a4:	bfde      	ittt	le
 80058a6:	2330      	movle	r3, #48	; 0x30
 80058a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058b0:	1b52      	subs	r2, r2, r5
 80058b2:	6122      	str	r2, [r4, #16]
 80058b4:	f8cd a000 	str.w	sl, [sp]
 80058b8:	464b      	mov	r3, r9
 80058ba:	aa03      	add	r2, sp, #12
 80058bc:	4621      	mov	r1, r4
 80058be:	4640      	mov	r0, r8
 80058c0:	f7ff fee2 	bl	8005688 <_printf_common>
 80058c4:	3001      	adds	r0, #1
 80058c6:	d14c      	bne.n	8005962 <_printf_i+0x1fe>
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058cc:	b004      	add	sp, #16
 80058ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d2:	4835      	ldr	r0, [pc, #212]	; (80059a8 <_printf_i+0x244>)
 80058d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058d8:	6829      	ldr	r1, [r5, #0]
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80058e0:	6029      	str	r1, [r5, #0]
 80058e2:	061d      	lsls	r5, r3, #24
 80058e4:	d514      	bpl.n	8005910 <_printf_i+0x1ac>
 80058e6:	07df      	lsls	r7, r3, #31
 80058e8:	bf44      	itt	mi
 80058ea:	f043 0320 	orrmi.w	r3, r3, #32
 80058ee:	6023      	strmi	r3, [r4, #0]
 80058f0:	b91e      	cbnz	r6, 80058fa <_printf_i+0x196>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	f023 0320 	bic.w	r3, r3, #32
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	2310      	movs	r3, #16
 80058fc:	e7b0      	b.n	8005860 <_printf_i+0xfc>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	f043 0320 	orr.w	r3, r3, #32
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	2378      	movs	r3, #120	; 0x78
 8005908:	4828      	ldr	r0, [pc, #160]	; (80059ac <_printf_i+0x248>)
 800590a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800590e:	e7e3      	b.n	80058d8 <_printf_i+0x174>
 8005910:	0659      	lsls	r1, r3, #25
 8005912:	bf48      	it	mi
 8005914:	b2b6      	uxthmi	r6, r6
 8005916:	e7e6      	b.n	80058e6 <_printf_i+0x182>
 8005918:	4615      	mov	r5, r2
 800591a:	e7bb      	b.n	8005894 <_printf_i+0x130>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	6826      	ldr	r6, [r4, #0]
 8005920:	6961      	ldr	r1, [r4, #20]
 8005922:	1d18      	adds	r0, r3, #4
 8005924:	6028      	str	r0, [r5, #0]
 8005926:	0635      	lsls	r5, r6, #24
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	d501      	bpl.n	8005930 <_printf_i+0x1cc>
 800592c:	6019      	str	r1, [r3, #0]
 800592e:	e002      	b.n	8005936 <_printf_i+0x1d2>
 8005930:	0670      	lsls	r0, r6, #25
 8005932:	d5fb      	bpl.n	800592c <_printf_i+0x1c8>
 8005934:	8019      	strh	r1, [r3, #0]
 8005936:	2300      	movs	r3, #0
 8005938:	6123      	str	r3, [r4, #16]
 800593a:	4615      	mov	r5, r2
 800593c:	e7ba      	b.n	80058b4 <_printf_i+0x150>
 800593e:	682b      	ldr	r3, [r5, #0]
 8005940:	1d1a      	adds	r2, r3, #4
 8005942:	602a      	str	r2, [r5, #0]
 8005944:	681d      	ldr	r5, [r3, #0]
 8005946:	6862      	ldr	r2, [r4, #4]
 8005948:	2100      	movs	r1, #0
 800594a:	4628      	mov	r0, r5
 800594c:	f7fa fc48 	bl	80001e0 <memchr>
 8005950:	b108      	cbz	r0, 8005956 <_printf_i+0x1f2>
 8005952:	1b40      	subs	r0, r0, r5
 8005954:	6060      	str	r0, [r4, #4]
 8005956:	6863      	ldr	r3, [r4, #4]
 8005958:	6123      	str	r3, [r4, #16]
 800595a:	2300      	movs	r3, #0
 800595c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005960:	e7a8      	b.n	80058b4 <_printf_i+0x150>
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	462a      	mov	r2, r5
 8005966:	4649      	mov	r1, r9
 8005968:	4640      	mov	r0, r8
 800596a:	47d0      	blx	sl
 800596c:	3001      	adds	r0, #1
 800596e:	d0ab      	beq.n	80058c8 <_printf_i+0x164>
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	079b      	lsls	r3, r3, #30
 8005974:	d413      	bmi.n	800599e <_printf_i+0x23a>
 8005976:	68e0      	ldr	r0, [r4, #12]
 8005978:	9b03      	ldr	r3, [sp, #12]
 800597a:	4298      	cmp	r0, r3
 800597c:	bfb8      	it	lt
 800597e:	4618      	movlt	r0, r3
 8005980:	e7a4      	b.n	80058cc <_printf_i+0x168>
 8005982:	2301      	movs	r3, #1
 8005984:	4632      	mov	r2, r6
 8005986:	4649      	mov	r1, r9
 8005988:	4640      	mov	r0, r8
 800598a:	47d0      	blx	sl
 800598c:	3001      	adds	r0, #1
 800598e:	d09b      	beq.n	80058c8 <_printf_i+0x164>
 8005990:	3501      	adds	r5, #1
 8005992:	68e3      	ldr	r3, [r4, #12]
 8005994:	9903      	ldr	r1, [sp, #12]
 8005996:	1a5b      	subs	r3, r3, r1
 8005998:	42ab      	cmp	r3, r5
 800599a:	dcf2      	bgt.n	8005982 <_printf_i+0x21e>
 800599c:	e7eb      	b.n	8005976 <_printf_i+0x212>
 800599e:	2500      	movs	r5, #0
 80059a0:	f104 0619 	add.w	r6, r4, #25
 80059a4:	e7f5      	b.n	8005992 <_printf_i+0x22e>
 80059a6:	bf00      	nop
 80059a8:	08006149 	.word	0x08006149
 80059ac:	0800615a 	.word	0x0800615a

080059b0 <_sbrk_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4d06      	ldr	r5, [pc, #24]	; (80059cc <_sbrk_r+0x1c>)
 80059b4:	2300      	movs	r3, #0
 80059b6:	4604      	mov	r4, r0
 80059b8:	4608      	mov	r0, r1
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	f7fb f8a4 	bl	8000b08 <_sbrk>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d102      	bne.n	80059ca <_sbrk_r+0x1a>
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	b103      	cbz	r3, 80059ca <_sbrk_r+0x1a>
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	bd38      	pop	{r3, r4, r5, pc}
 80059cc:	20004a88 	.word	0x20004a88

080059d0 <__sread>:
 80059d0:	b510      	push	{r4, lr}
 80059d2:	460c      	mov	r4, r1
 80059d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d8:	f000 fab2 	bl	8005f40 <_read_r>
 80059dc:	2800      	cmp	r0, #0
 80059de:	bfab      	itete	ge
 80059e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059e2:	89a3      	ldrhlt	r3, [r4, #12]
 80059e4:	181b      	addge	r3, r3, r0
 80059e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ea:	bfac      	ite	ge
 80059ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80059ee:	81a3      	strhlt	r3, [r4, #12]
 80059f0:	bd10      	pop	{r4, pc}

080059f2 <__swrite>:
 80059f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f6:	461f      	mov	r7, r3
 80059f8:	898b      	ldrh	r3, [r1, #12]
 80059fa:	05db      	lsls	r3, r3, #23
 80059fc:	4605      	mov	r5, r0
 80059fe:	460c      	mov	r4, r1
 8005a00:	4616      	mov	r6, r2
 8005a02:	d505      	bpl.n	8005a10 <__swrite+0x1e>
 8005a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a08:	2302      	movs	r3, #2
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f000 f9c8 	bl	8005da0 <_lseek_r>
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a1a:	81a3      	strh	r3, [r4, #12]
 8005a1c:	4632      	mov	r2, r6
 8005a1e:	463b      	mov	r3, r7
 8005a20:	4628      	mov	r0, r5
 8005a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a26:	f000 b869 	b.w	8005afc <_write_r>

08005a2a <__sseek>:
 8005a2a:	b510      	push	{r4, lr}
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a32:	f000 f9b5 	bl	8005da0 <_lseek_r>
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	bf15      	itete	ne
 8005a3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a46:	81a3      	strheq	r3, [r4, #12]
 8005a48:	bf18      	it	ne
 8005a4a:	81a3      	strhne	r3, [r4, #12]
 8005a4c:	bd10      	pop	{r4, pc}

08005a4e <__sclose>:
 8005a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a52:	f000 b8d3 	b.w	8005bfc <_close_r>
	...

08005a58 <__swbuf_r>:
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	460e      	mov	r6, r1
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	4605      	mov	r5, r0
 8005a60:	b118      	cbz	r0, 8005a6a <__swbuf_r+0x12>
 8005a62:	6983      	ldr	r3, [r0, #24]
 8005a64:	b90b      	cbnz	r3, 8005a6a <__swbuf_r+0x12>
 8005a66:	f7ff fb81 	bl	800516c <__sinit>
 8005a6a:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <__swbuf_r+0x98>)
 8005a6c:	429c      	cmp	r4, r3
 8005a6e:	d12b      	bne.n	8005ac8 <__swbuf_r+0x70>
 8005a70:	686c      	ldr	r4, [r5, #4]
 8005a72:	69a3      	ldr	r3, [r4, #24]
 8005a74:	60a3      	str	r3, [r4, #8]
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	071a      	lsls	r2, r3, #28
 8005a7a:	d52f      	bpl.n	8005adc <__swbuf_r+0x84>
 8005a7c:	6923      	ldr	r3, [r4, #16]
 8005a7e:	b36b      	cbz	r3, 8005adc <__swbuf_r+0x84>
 8005a80:	6923      	ldr	r3, [r4, #16]
 8005a82:	6820      	ldr	r0, [r4, #0]
 8005a84:	1ac0      	subs	r0, r0, r3
 8005a86:	6963      	ldr	r3, [r4, #20]
 8005a88:	b2f6      	uxtb	r6, r6
 8005a8a:	4283      	cmp	r3, r0
 8005a8c:	4637      	mov	r7, r6
 8005a8e:	dc04      	bgt.n	8005a9a <__swbuf_r+0x42>
 8005a90:	4621      	mov	r1, r4
 8005a92:	4628      	mov	r0, r5
 8005a94:	f000 f948 	bl	8005d28 <_fflush_r>
 8005a98:	bb30      	cbnz	r0, 8005ae8 <__swbuf_r+0x90>
 8005a9a:	68a3      	ldr	r3, [r4, #8]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	60a3      	str	r3, [r4, #8]
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	6022      	str	r2, [r4, #0]
 8005aa6:	701e      	strb	r6, [r3, #0]
 8005aa8:	6963      	ldr	r3, [r4, #20]
 8005aaa:	3001      	adds	r0, #1
 8005aac:	4283      	cmp	r3, r0
 8005aae:	d004      	beq.n	8005aba <__swbuf_r+0x62>
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	07db      	lsls	r3, r3, #31
 8005ab4:	d506      	bpl.n	8005ac4 <__swbuf_r+0x6c>
 8005ab6:	2e0a      	cmp	r6, #10
 8005ab8:	d104      	bne.n	8005ac4 <__swbuf_r+0x6c>
 8005aba:	4621      	mov	r1, r4
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 f933 	bl	8005d28 <_fflush_r>
 8005ac2:	b988      	cbnz	r0, 8005ae8 <__swbuf_r+0x90>
 8005ac4:	4638      	mov	r0, r7
 8005ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ac8:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <__swbuf_r+0x9c>)
 8005aca:	429c      	cmp	r4, r3
 8005acc:	d101      	bne.n	8005ad2 <__swbuf_r+0x7a>
 8005ace:	68ac      	ldr	r4, [r5, #8]
 8005ad0:	e7cf      	b.n	8005a72 <__swbuf_r+0x1a>
 8005ad2:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <__swbuf_r+0xa0>)
 8005ad4:	429c      	cmp	r4, r3
 8005ad6:	bf08      	it	eq
 8005ad8:	68ec      	ldreq	r4, [r5, #12]
 8005ada:	e7ca      	b.n	8005a72 <__swbuf_r+0x1a>
 8005adc:	4621      	mov	r1, r4
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 f81e 	bl	8005b20 <__swsetup_r>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d0cb      	beq.n	8005a80 <__swbuf_r+0x28>
 8005ae8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005aec:	e7ea      	b.n	8005ac4 <__swbuf_r+0x6c>
 8005aee:	bf00      	nop
 8005af0:	080060f8 	.word	0x080060f8
 8005af4:	08006118 	.word	0x08006118
 8005af8:	080060d8 	.word	0x080060d8

08005afc <_write_r>:
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	4d07      	ldr	r5, [pc, #28]	; (8005b1c <_write_r+0x20>)
 8005b00:	4604      	mov	r4, r0
 8005b02:	4608      	mov	r0, r1
 8005b04:	4611      	mov	r1, r2
 8005b06:	2200      	movs	r2, #0
 8005b08:	602a      	str	r2, [r5, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f7fa ffab 	bl	8000a66 <_write>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d102      	bne.n	8005b1a <_write_r+0x1e>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	b103      	cbz	r3, 8005b1a <_write_r+0x1e>
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	20004a88 	.word	0x20004a88

08005b20 <__swsetup_r>:
 8005b20:	4b32      	ldr	r3, [pc, #200]	; (8005bec <__swsetup_r+0xcc>)
 8005b22:	b570      	push	{r4, r5, r6, lr}
 8005b24:	681d      	ldr	r5, [r3, #0]
 8005b26:	4606      	mov	r6, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	b125      	cbz	r5, 8005b36 <__swsetup_r+0x16>
 8005b2c:	69ab      	ldr	r3, [r5, #24]
 8005b2e:	b913      	cbnz	r3, 8005b36 <__swsetup_r+0x16>
 8005b30:	4628      	mov	r0, r5
 8005b32:	f7ff fb1b 	bl	800516c <__sinit>
 8005b36:	4b2e      	ldr	r3, [pc, #184]	; (8005bf0 <__swsetup_r+0xd0>)
 8005b38:	429c      	cmp	r4, r3
 8005b3a:	d10f      	bne.n	8005b5c <__swsetup_r+0x3c>
 8005b3c:	686c      	ldr	r4, [r5, #4]
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b44:	0719      	lsls	r1, r3, #28
 8005b46:	d42c      	bmi.n	8005ba2 <__swsetup_r+0x82>
 8005b48:	06dd      	lsls	r5, r3, #27
 8005b4a:	d411      	bmi.n	8005b70 <__swsetup_r+0x50>
 8005b4c:	2309      	movs	r3, #9
 8005b4e:	6033      	str	r3, [r6, #0]
 8005b50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b5a:	e03e      	b.n	8005bda <__swsetup_r+0xba>
 8005b5c:	4b25      	ldr	r3, [pc, #148]	; (8005bf4 <__swsetup_r+0xd4>)
 8005b5e:	429c      	cmp	r4, r3
 8005b60:	d101      	bne.n	8005b66 <__swsetup_r+0x46>
 8005b62:	68ac      	ldr	r4, [r5, #8]
 8005b64:	e7eb      	b.n	8005b3e <__swsetup_r+0x1e>
 8005b66:	4b24      	ldr	r3, [pc, #144]	; (8005bf8 <__swsetup_r+0xd8>)
 8005b68:	429c      	cmp	r4, r3
 8005b6a:	bf08      	it	eq
 8005b6c:	68ec      	ldreq	r4, [r5, #12]
 8005b6e:	e7e6      	b.n	8005b3e <__swsetup_r+0x1e>
 8005b70:	0758      	lsls	r0, r3, #29
 8005b72:	d512      	bpl.n	8005b9a <__swsetup_r+0x7a>
 8005b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b76:	b141      	cbz	r1, 8005b8a <__swsetup_r+0x6a>
 8005b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b7c:	4299      	cmp	r1, r3
 8005b7e:	d002      	beq.n	8005b86 <__swsetup_r+0x66>
 8005b80:	4630      	mov	r0, r6
 8005b82:	f000 f991 	bl	8005ea8 <_free_r>
 8005b86:	2300      	movs	r3, #0
 8005b88:	6363      	str	r3, [r4, #52]	; 0x34
 8005b8a:	89a3      	ldrh	r3, [r4, #12]
 8005b8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b90:	81a3      	strh	r3, [r4, #12]
 8005b92:	2300      	movs	r3, #0
 8005b94:	6063      	str	r3, [r4, #4]
 8005b96:	6923      	ldr	r3, [r4, #16]
 8005b98:	6023      	str	r3, [r4, #0]
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	f043 0308 	orr.w	r3, r3, #8
 8005ba0:	81a3      	strh	r3, [r4, #12]
 8005ba2:	6923      	ldr	r3, [r4, #16]
 8005ba4:	b94b      	cbnz	r3, 8005bba <__swsetup_r+0x9a>
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bb0:	d003      	beq.n	8005bba <__swsetup_r+0x9a>
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f000 f92b 	bl	8005e10 <__smakebuf_r>
 8005bba:	89a0      	ldrh	r0, [r4, #12]
 8005bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bc0:	f010 0301 	ands.w	r3, r0, #1
 8005bc4:	d00a      	beq.n	8005bdc <__swsetup_r+0xbc>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60a3      	str	r3, [r4, #8]
 8005bca:	6963      	ldr	r3, [r4, #20]
 8005bcc:	425b      	negs	r3, r3
 8005bce:	61a3      	str	r3, [r4, #24]
 8005bd0:	6923      	ldr	r3, [r4, #16]
 8005bd2:	b943      	cbnz	r3, 8005be6 <__swsetup_r+0xc6>
 8005bd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bd8:	d1ba      	bne.n	8005b50 <__swsetup_r+0x30>
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
 8005bdc:	0781      	lsls	r1, r0, #30
 8005bde:	bf58      	it	pl
 8005be0:	6963      	ldrpl	r3, [r4, #20]
 8005be2:	60a3      	str	r3, [r4, #8]
 8005be4:	e7f4      	b.n	8005bd0 <__swsetup_r+0xb0>
 8005be6:	2000      	movs	r0, #0
 8005be8:	e7f7      	b.n	8005bda <__swsetup_r+0xba>
 8005bea:	bf00      	nop
 8005bec:	20000010 	.word	0x20000010
 8005bf0:	080060f8 	.word	0x080060f8
 8005bf4:	08006118 	.word	0x08006118
 8005bf8:	080060d8 	.word	0x080060d8

08005bfc <_close_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4d06      	ldr	r5, [pc, #24]	; (8005c18 <_close_r+0x1c>)
 8005c00:	2300      	movs	r3, #0
 8005c02:	4604      	mov	r4, r0
 8005c04:	4608      	mov	r0, r1
 8005c06:	602b      	str	r3, [r5, #0]
 8005c08:	f7fa ff49 	bl	8000a9e <_close>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d102      	bne.n	8005c16 <_close_r+0x1a>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	b103      	cbz	r3, 8005c16 <_close_r+0x1a>
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	20004a88 	.word	0x20004a88

08005c1c <__sflush_r>:
 8005c1c:	898a      	ldrh	r2, [r1, #12]
 8005c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c22:	4605      	mov	r5, r0
 8005c24:	0710      	lsls	r0, r2, #28
 8005c26:	460c      	mov	r4, r1
 8005c28:	d458      	bmi.n	8005cdc <__sflush_r+0xc0>
 8005c2a:	684b      	ldr	r3, [r1, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	dc05      	bgt.n	8005c3c <__sflush_r+0x20>
 8005c30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	dc02      	bgt.n	8005c3c <__sflush_r+0x20>
 8005c36:	2000      	movs	r0, #0
 8005c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c3e:	2e00      	cmp	r6, #0
 8005c40:	d0f9      	beq.n	8005c36 <__sflush_r+0x1a>
 8005c42:	2300      	movs	r3, #0
 8005c44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c48:	682f      	ldr	r7, [r5, #0]
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	d032      	beq.n	8005cb4 <__sflush_r+0x98>
 8005c4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	075a      	lsls	r2, r3, #29
 8005c54:	d505      	bpl.n	8005c62 <__sflush_r+0x46>
 8005c56:	6863      	ldr	r3, [r4, #4]
 8005c58:	1ac0      	subs	r0, r0, r3
 8005c5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c5c:	b10b      	cbz	r3, 8005c62 <__sflush_r+0x46>
 8005c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c60:	1ac0      	subs	r0, r0, r3
 8005c62:	2300      	movs	r3, #0
 8005c64:	4602      	mov	r2, r0
 8005c66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c68:	6a21      	ldr	r1, [r4, #32]
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b0      	blx	r6
 8005c6e:	1c43      	adds	r3, r0, #1
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	d106      	bne.n	8005c82 <__sflush_r+0x66>
 8005c74:	6829      	ldr	r1, [r5, #0]
 8005c76:	291d      	cmp	r1, #29
 8005c78:	d82c      	bhi.n	8005cd4 <__sflush_r+0xb8>
 8005c7a:	4a2a      	ldr	r2, [pc, #168]	; (8005d24 <__sflush_r+0x108>)
 8005c7c:	40ca      	lsrs	r2, r1
 8005c7e:	07d6      	lsls	r6, r2, #31
 8005c80:	d528      	bpl.n	8005cd4 <__sflush_r+0xb8>
 8005c82:	2200      	movs	r2, #0
 8005c84:	6062      	str	r2, [r4, #4]
 8005c86:	04d9      	lsls	r1, r3, #19
 8005c88:	6922      	ldr	r2, [r4, #16]
 8005c8a:	6022      	str	r2, [r4, #0]
 8005c8c:	d504      	bpl.n	8005c98 <__sflush_r+0x7c>
 8005c8e:	1c42      	adds	r2, r0, #1
 8005c90:	d101      	bne.n	8005c96 <__sflush_r+0x7a>
 8005c92:	682b      	ldr	r3, [r5, #0]
 8005c94:	b903      	cbnz	r3, 8005c98 <__sflush_r+0x7c>
 8005c96:	6560      	str	r0, [r4, #84]	; 0x54
 8005c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c9a:	602f      	str	r7, [r5, #0]
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	d0ca      	beq.n	8005c36 <__sflush_r+0x1a>
 8005ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ca4:	4299      	cmp	r1, r3
 8005ca6:	d002      	beq.n	8005cae <__sflush_r+0x92>
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f000 f8fd 	bl	8005ea8 <_free_r>
 8005cae:	2000      	movs	r0, #0
 8005cb0:	6360      	str	r0, [r4, #52]	; 0x34
 8005cb2:	e7c1      	b.n	8005c38 <__sflush_r+0x1c>
 8005cb4:	6a21      	ldr	r1, [r4, #32]
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4628      	mov	r0, r5
 8005cba:	47b0      	blx	r6
 8005cbc:	1c41      	adds	r1, r0, #1
 8005cbe:	d1c7      	bne.n	8005c50 <__sflush_r+0x34>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0c4      	beq.n	8005c50 <__sflush_r+0x34>
 8005cc6:	2b1d      	cmp	r3, #29
 8005cc8:	d001      	beq.n	8005cce <__sflush_r+0xb2>
 8005cca:	2b16      	cmp	r3, #22
 8005ccc:	d101      	bne.n	8005cd2 <__sflush_r+0xb6>
 8005cce:	602f      	str	r7, [r5, #0]
 8005cd0:	e7b1      	b.n	8005c36 <__sflush_r+0x1a>
 8005cd2:	89a3      	ldrh	r3, [r4, #12]
 8005cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cd8:	81a3      	strh	r3, [r4, #12]
 8005cda:	e7ad      	b.n	8005c38 <__sflush_r+0x1c>
 8005cdc:	690f      	ldr	r7, [r1, #16]
 8005cde:	2f00      	cmp	r7, #0
 8005ce0:	d0a9      	beq.n	8005c36 <__sflush_r+0x1a>
 8005ce2:	0793      	lsls	r3, r2, #30
 8005ce4:	680e      	ldr	r6, [r1, #0]
 8005ce6:	bf08      	it	eq
 8005ce8:	694b      	ldreq	r3, [r1, #20]
 8005cea:	600f      	str	r7, [r1, #0]
 8005cec:	bf18      	it	ne
 8005cee:	2300      	movne	r3, #0
 8005cf0:	eba6 0807 	sub.w	r8, r6, r7
 8005cf4:	608b      	str	r3, [r1, #8]
 8005cf6:	f1b8 0f00 	cmp.w	r8, #0
 8005cfa:	dd9c      	ble.n	8005c36 <__sflush_r+0x1a>
 8005cfc:	6a21      	ldr	r1, [r4, #32]
 8005cfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d00:	4643      	mov	r3, r8
 8005d02:	463a      	mov	r2, r7
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b0      	blx	r6
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	dc06      	bgt.n	8005d1a <__sflush_r+0xfe>
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d12:	81a3      	strh	r3, [r4, #12]
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d18:	e78e      	b.n	8005c38 <__sflush_r+0x1c>
 8005d1a:	4407      	add	r7, r0
 8005d1c:	eba8 0800 	sub.w	r8, r8, r0
 8005d20:	e7e9      	b.n	8005cf6 <__sflush_r+0xda>
 8005d22:	bf00      	nop
 8005d24:	20400001 	.word	0x20400001

08005d28 <_fflush_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	690b      	ldr	r3, [r1, #16]
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	b913      	cbnz	r3, 8005d38 <_fflush_r+0x10>
 8005d32:	2500      	movs	r5, #0
 8005d34:	4628      	mov	r0, r5
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	b118      	cbz	r0, 8005d42 <_fflush_r+0x1a>
 8005d3a:	6983      	ldr	r3, [r0, #24]
 8005d3c:	b90b      	cbnz	r3, 8005d42 <_fflush_r+0x1a>
 8005d3e:	f7ff fa15 	bl	800516c <__sinit>
 8005d42:	4b14      	ldr	r3, [pc, #80]	; (8005d94 <_fflush_r+0x6c>)
 8005d44:	429c      	cmp	r4, r3
 8005d46:	d11b      	bne.n	8005d80 <_fflush_r+0x58>
 8005d48:	686c      	ldr	r4, [r5, #4]
 8005d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0ef      	beq.n	8005d32 <_fflush_r+0xa>
 8005d52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d54:	07d0      	lsls	r0, r2, #31
 8005d56:	d404      	bmi.n	8005d62 <_fflush_r+0x3a>
 8005d58:	0599      	lsls	r1, r3, #22
 8005d5a:	d402      	bmi.n	8005d62 <_fflush_r+0x3a>
 8005d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d5e:	f7ff faa3 	bl	80052a8 <__retarget_lock_acquire_recursive>
 8005d62:	4628      	mov	r0, r5
 8005d64:	4621      	mov	r1, r4
 8005d66:	f7ff ff59 	bl	8005c1c <__sflush_r>
 8005d6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d6c:	07da      	lsls	r2, r3, #31
 8005d6e:	4605      	mov	r5, r0
 8005d70:	d4e0      	bmi.n	8005d34 <_fflush_r+0xc>
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	059b      	lsls	r3, r3, #22
 8005d76:	d4dd      	bmi.n	8005d34 <_fflush_r+0xc>
 8005d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d7a:	f7ff fa96 	bl	80052aa <__retarget_lock_release_recursive>
 8005d7e:	e7d9      	b.n	8005d34 <_fflush_r+0xc>
 8005d80:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <_fflush_r+0x70>)
 8005d82:	429c      	cmp	r4, r3
 8005d84:	d101      	bne.n	8005d8a <_fflush_r+0x62>
 8005d86:	68ac      	ldr	r4, [r5, #8]
 8005d88:	e7df      	b.n	8005d4a <_fflush_r+0x22>
 8005d8a:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <_fflush_r+0x74>)
 8005d8c:	429c      	cmp	r4, r3
 8005d8e:	bf08      	it	eq
 8005d90:	68ec      	ldreq	r4, [r5, #12]
 8005d92:	e7da      	b.n	8005d4a <_fflush_r+0x22>
 8005d94:	080060f8 	.word	0x080060f8
 8005d98:	08006118 	.word	0x08006118
 8005d9c:	080060d8 	.word	0x080060d8

08005da0 <_lseek_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4d07      	ldr	r5, [pc, #28]	; (8005dc0 <_lseek_r+0x20>)
 8005da4:	4604      	mov	r4, r0
 8005da6:	4608      	mov	r0, r1
 8005da8:	4611      	mov	r1, r2
 8005daa:	2200      	movs	r2, #0
 8005dac:	602a      	str	r2, [r5, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	f7fa fe9c 	bl	8000aec <_lseek>
 8005db4:	1c43      	adds	r3, r0, #1
 8005db6:	d102      	bne.n	8005dbe <_lseek_r+0x1e>
 8005db8:	682b      	ldr	r3, [r5, #0]
 8005dba:	b103      	cbz	r3, 8005dbe <_lseek_r+0x1e>
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	20004a88 	.word	0x20004a88

08005dc4 <__swhatbuf_r>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	460e      	mov	r6, r1
 8005dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	b096      	sub	sp, #88	; 0x58
 8005dd0:	4614      	mov	r4, r2
 8005dd2:	461d      	mov	r5, r3
 8005dd4:	da08      	bge.n	8005de8 <__swhatbuf_r+0x24>
 8005dd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	602a      	str	r2, [r5, #0]
 8005dde:	061a      	lsls	r2, r3, #24
 8005de0:	d410      	bmi.n	8005e04 <__swhatbuf_r+0x40>
 8005de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de6:	e00e      	b.n	8005e06 <__swhatbuf_r+0x42>
 8005de8:	466a      	mov	r2, sp
 8005dea:	f000 f8bb 	bl	8005f64 <_fstat_r>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	dbf1      	blt.n	8005dd6 <__swhatbuf_r+0x12>
 8005df2:	9a01      	ldr	r2, [sp, #4]
 8005df4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005df8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005dfc:	425a      	negs	r2, r3
 8005dfe:	415a      	adcs	r2, r3
 8005e00:	602a      	str	r2, [r5, #0]
 8005e02:	e7ee      	b.n	8005de2 <__swhatbuf_r+0x1e>
 8005e04:	2340      	movs	r3, #64	; 0x40
 8005e06:	2000      	movs	r0, #0
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	b016      	add	sp, #88	; 0x58
 8005e0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e10 <__smakebuf_r>:
 8005e10:	898b      	ldrh	r3, [r1, #12]
 8005e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e14:	079d      	lsls	r5, r3, #30
 8005e16:	4606      	mov	r6, r0
 8005e18:	460c      	mov	r4, r1
 8005e1a:	d507      	bpl.n	8005e2c <__smakebuf_r+0x1c>
 8005e1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e20:	6023      	str	r3, [r4, #0]
 8005e22:	6123      	str	r3, [r4, #16]
 8005e24:	2301      	movs	r3, #1
 8005e26:	6163      	str	r3, [r4, #20]
 8005e28:	b002      	add	sp, #8
 8005e2a:	bd70      	pop	{r4, r5, r6, pc}
 8005e2c:	ab01      	add	r3, sp, #4
 8005e2e:	466a      	mov	r2, sp
 8005e30:	f7ff ffc8 	bl	8005dc4 <__swhatbuf_r>
 8005e34:	9900      	ldr	r1, [sp, #0]
 8005e36:	4605      	mov	r5, r0
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f7ff fa57 	bl	80052ec <_malloc_r>
 8005e3e:	b948      	cbnz	r0, 8005e54 <__smakebuf_r+0x44>
 8005e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e44:	059a      	lsls	r2, r3, #22
 8005e46:	d4ef      	bmi.n	8005e28 <__smakebuf_r+0x18>
 8005e48:	f023 0303 	bic.w	r3, r3, #3
 8005e4c:	f043 0302 	orr.w	r3, r3, #2
 8005e50:	81a3      	strh	r3, [r4, #12]
 8005e52:	e7e3      	b.n	8005e1c <__smakebuf_r+0xc>
 8005e54:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <__smakebuf_r+0x7c>)
 8005e56:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	6020      	str	r0, [r4, #0]
 8005e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	9b00      	ldr	r3, [sp, #0]
 8005e64:	6163      	str	r3, [r4, #20]
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	6120      	str	r0, [r4, #16]
 8005e6a:	b15b      	cbz	r3, 8005e84 <__smakebuf_r+0x74>
 8005e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e70:	4630      	mov	r0, r6
 8005e72:	f000 f889 	bl	8005f88 <_isatty_r>
 8005e76:	b128      	cbz	r0, 8005e84 <__smakebuf_r+0x74>
 8005e78:	89a3      	ldrh	r3, [r4, #12]
 8005e7a:	f023 0303 	bic.w	r3, r3, #3
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	81a3      	strh	r3, [r4, #12]
 8005e84:	89a0      	ldrh	r0, [r4, #12]
 8005e86:	4305      	orrs	r5, r0
 8005e88:	81a5      	strh	r5, [r4, #12]
 8005e8a:	e7cd      	b.n	8005e28 <__smakebuf_r+0x18>
 8005e8c:	08005105 	.word	0x08005105

08005e90 <__malloc_lock>:
 8005e90:	4801      	ldr	r0, [pc, #4]	; (8005e98 <__malloc_lock+0x8>)
 8005e92:	f7ff ba09 	b.w	80052a8 <__retarget_lock_acquire_recursive>
 8005e96:	bf00      	nop
 8005e98:	20004a7c 	.word	0x20004a7c

08005e9c <__malloc_unlock>:
 8005e9c:	4801      	ldr	r0, [pc, #4]	; (8005ea4 <__malloc_unlock+0x8>)
 8005e9e:	f7ff ba04 	b.w	80052aa <__retarget_lock_release_recursive>
 8005ea2:	bf00      	nop
 8005ea4:	20004a7c 	.word	0x20004a7c

08005ea8 <_free_r>:
 8005ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eaa:	2900      	cmp	r1, #0
 8005eac:	d044      	beq.n	8005f38 <_free_r+0x90>
 8005eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eb2:	9001      	str	r0, [sp, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f1a1 0404 	sub.w	r4, r1, #4
 8005eba:	bfb8      	it	lt
 8005ebc:	18e4      	addlt	r4, r4, r3
 8005ebe:	f7ff ffe7 	bl	8005e90 <__malloc_lock>
 8005ec2:	4a1e      	ldr	r2, [pc, #120]	; (8005f3c <_free_r+0x94>)
 8005ec4:	9801      	ldr	r0, [sp, #4]
 8005ec6:	6813      	ldr	r3, [r2, #0]
 8005ec8:	b933      	cbnz	r3, 8005ed8 <_free_r+0x30>
 8005eca:	6063      	str	r3, [r4, #4]
 8005ecc:	6014      	str	r4, [r2, #0]
 8005ece:	b003      	add	sp, #12
 8005ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ed4:	f7ff bfe2 	b.w	8005e9c <__malloc_unlock>
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	d908      	bls.n	8005eee <_free_r+0x46>
 8005edc:	6825      	ldr	r5, [r4, #0]
 8005ede:	1961      	adds	r1, r4, r5
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	bf01      	itttt	eq
 8005ee4:	6819      	ldreq	r1, [r3, #0]
 8005ee6:	685b      	ldreq	r3, [r3, #4]
 8005ee8:	1949      	addeq	r1, r1, r5
 8005eea:	6021      	streq	r1, [r4, #0]
 8005eec:	e7ed      	b.n	8005eca <_free_r+0x22>
 8005eee:	461a      	mov	r2, r3
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b10b      	cbz	r3, 8005ef8 <_free_r+0x50>
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	d9fa      	bls.n	8005eee <_free_r+0x46>
 8005ef8:	6811      	ldr	r1, [r2, #0]
 8005efa:	1855      	adds	r5, r2, r1
 8005efc:	42a5      	cmp	r5, r4
 8005efe:	d10b      	bne.n	8005f18 <_free_r+0x70>
 8005f00:	6824      	ldr	r4, [r4, #0]
 8005f02:	4421      	add	r1, r4
 8005f04:	1854      	adds	r4, r2, r1
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	6011      	str	r1, [r2, #0]
 8005f0a:	d1e0      	bne.n	8005ece <_free_r+0x26>
 8005f0c:	681c      	ldr	r4, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	6053      	str	r3, [r2, #4]
 8005f12:	4421      	add	r1, r4
 8005f14:	6011      	str	r1, [r2, #0]
 8005f16:	e7da      	b.n	8005ece <_free_r+0x26>
 8005f18:	d902      	bls.n	8005f20 <_free_r+0x78>
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	6003      	str	r3, [r0, #0]
 8005f1e:	e7d6      	b.n	8005ece <_free_r+0x26>
 8005f20:	6825      	ldr	r5, [r4, #0]
 8005f22:	1961      	adds	r1, r4, r5
 8005f24:	428b      	cmp	r3, r1
 8005f26:	bf04      	itt	eq
 8005f28:	6819      	ldreq	r1, [r3, #0]
 8005f2a:	685b      	ldreq	r3, [r3, #4]
 8005f2c:	6063      	str	r3, [r4, #4]
 8005f2e:	bf04      	itt	eq
 8005f30:	1949      	addeq	r1, r1, r5
 8005f32:	6021      	streq	r1, [r4, #0]
 8005f34:	6054      	str	r4, [r2, #4]
 8005f36:	e7ca      	b.n	8005ece <_free_r+0x26>
 8005f38:	b003      	add	sp, #12
 8005f3a:	bd30      	pop	{r4, r5, pc}
 8005f3c:	20004a80 	.word	0x20004a80

08005f40 <_read_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4d07      	ldr	r5, [pc, #28]	; (8005f60 <_read_r+0x20>)
 8005f44:	4604      	mov	r4, r0
 8005f46:	4608      	mov	r0, r1
 8005f48:	4611      	mov	r1, r2
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	602a      	str	r2, [r5, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f7fa fd6c 	bl	8000a2c <_read>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_read_r+0x1e>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_read_r+0x1e>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	20004a88 	.word	0x20004a88

08005f64 <_fstat_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4d07      	ldr	r5, [pc, #28]	; (8005f84 <_fstat_r+0x20>)
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	4608      	mov	r0, r1
 8005f6e:	4611      	mov	r1, r2
 8005f70:	602b      	str	r3, [r5, #0]
 8005f72:	f7fa fda0 	bl	8000ab6 <_fstat>
 8005f76:	1c43      	adds	r3, r0, #1
 8005f78:	d102      	bne.n	8005f80 <_fstat_r+0x1c>
 8005f7a:	682b      	ldr	r3, [r5, #0]
 8005f7c:	b103      	cbz	r3, 8005f80 <_fstat_r+0x1c>
 8005f7e:	6023      	str	r3, [r4, #0]
 8005f80:	bd38      	pop	{r3, r4, r5, pc}
 8005f82:	bf00      	nop
 8005f84:	20004a88 	.word	0x20004a88

08005f88 <_isatty_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4d06      	ldr	r5, [pc, #24]	; (8005fa4 <_isatty_r+0x1c>)
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4608      	mov	r0, r1
 8005f92:	602b      	str	r3, [r5, #0]
 8005f94:	f7fa fd9f 	bl	8000ad6 <_isatty>
 8005f98:	1c43      	adds	r3, r0, #1
 8005f9a:	d102      	bne.n	8005fa2 <_isatty_r+0x1a>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	b103      	cbz	r3, 8005fa2 <_isatty_r+0x1a>
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	bd38      	pop	{r3, r4, r5, pc}
 8005fa4:	20004a88 	.word	0x20004a88

08005fa8 <_init>:
 8005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005faa:	bf00      	nop
 8005fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fae:	bc08      	pop	{r3}
 8005fb0:	469e      	mov	lr, r3
 8005fb2:	4770      	bx	lr

08005fb4 <_fini>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	bf00      	nop
 8005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fba:	bc08      	pop	{r3}
 8005fbc:	469e      	mov	lr, r3
 8005fbe:	4770      	bx	lr
