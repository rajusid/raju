
BluetoothCommunicationProgToBlinkLED_ON_OFF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000037c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000514  08000514  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000514  08000514  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000514  08000514  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000514  08000514  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000514  08000514  00010514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000518  08000518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800051c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000520  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000520  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000192f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006e4  00000000  00000000  00021963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00022048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d0  00000000  00000000  00022280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000142b2  00000000  00000000  00022450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c6a  00000000  00000000  00036702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008067f  00000000  00000000  0003936c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b99eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000680  00000000  00000000  000b9a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004fc 	.word	0x080004fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080004fc 	.word	0x080004fc

080001d8 <gpio_init>:
#include "stm32f4xx.h"
#include "gpio.h"

void gpio_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= 1;          // Enable GPIOA clock
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <gpio_init+0x34>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <gpio_init+0x34>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER &= ~0x00000C00; // Clear pin mode
 80001e8:	4b09      	ldr	r3, [pc, #36]	; (8000210 <gpio_init+0x38>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <gpio_init+0x38>)
 80001ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80001f2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= 0x00000400;  // Set pin to output mode
 80001f4:	4b06      	ldr	r3, [pc, #24]	; (8000210 <gpio_init+0x38>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a05      	ldr	r2, [pc, #20]	; (8000210 <gpio_init+0x38>)
 80001fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001fe:	6013      	str	r3, [r2, #0]
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800
 8000210:	40020000 	.word	0x40020000

08000214 <gpio_set>:

void gpio_set(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
    GPIOA->ODR |= 0x00000020;   // Turn on LED
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <gpio_set+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <gpio_set+0x1c>)
 800021e:	f043 0320 	orr.w	r3, r3, #32
 8000222:	6153      	str	r3, [r2, #20]
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40020000 	.word	0x40020000

08000234 <gpio_reset>:

void gpio_reset(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
    GPIOA->ODR &= ~0x00000020;  // Turn off LED
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <gpio_reset+0x1c>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a04      	ldr	r2, [pc, #16]	; (8000250 <gpio_reset+0x1c>)
 800023e:	f023 0320 	bic.w	r3, r3, #32
 8000242:	6153      	str	r3, [r2, #20]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40020000 	.word	0x40020000

08000254 <main>:
#include "uart1ReadWrite.h"


int main()
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0

	char c;
    uart1_init();
 800025a:	f000 f853 	bl	8000304 <uart1_init>
    gpio_init();
 800025e:	f7ff ffbb 	bl	80001d8 <gpio_init>

    while(1)
    {
    	c = uart1_read();
 8000262:	f000 f8bd 	bl	80003e0 <uart1_read>
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
    	if(c == 'N')
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b4e      	cmp	r3, #78	; 0x4e
 800026e:	d102      	bne.n	8000276 <main+0x22>
    		gpio_set();
 8000270:	f7ff ffd0 	bl	8000214 <gpio_set>
 8000274:	e004      	b.n	8000280 <main+0x2c>
    	else if(c == 'F')
 8000276:	79fb      	ldrb	r3, [r7, #7]
 8000278:	2b46      	cmp	r3, #70	; 0x46
 800027a:	d101      	bne.n	8000280 <main+0x2c>
    		gpio_reset();
 800027c:	f7ff ffda 	bl	8000234 <gpio_reset>
    	else
    	{

    	}
    	uart1_write(c);
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	4618      	mov	r0, r3
 8000284:	f000 f8c0 	bl	8000408 <uart1_write>
    	c = uart1_read();
 8000288:	e7eb      	b.n	8000262 <main+0xe>

0800028a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800028e:	e7fe      	b.n	800028e <NMI_Handler+0x4>

08000290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000294:	e7fe      	b.n	8000294 <HardFault_Handler+0x4>

08000296 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800029a:	e7fe      	b.n	800029a <MemManage_Handler+0x4>

0800029c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002a0:	e7fe      	b.n	80002a0 <BusFault_Handler+0x4>

080002a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002a2:	b480      	push	{r7}
 80002a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a6:	e7fe      	b.n	80002a6 <UsageFault_Handler+0x4>

080002a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr

080002b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b6:	b480      	push	{r7}
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002d2:	b580      	push	{r7, lr}
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002d6:	f000 f8d9 	bl	800048c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <SystemInit+0x20>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a05      	ldr	r2, [pc, #20]	; (8000300 <SystemInit+0x20>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <uart1_init>:
 */
#include "uart1ReadWrite.h"


void uart1_init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0

    /**Configure uart gpio pin***/
        /*Enable clock access to gpioa */
        RCC->AHB1ENR |= GPIOAEN;
 8000308:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <uart1_init+0x80>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030c:	4a1d      	ldr	r2, [pc, #116]	; (8000384 <uart1_init+0x80>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6313      	str	r3, [r2, #48]	; 0x30

        //Set PA9 mode to alternate function mode/
        GPIOA->MODER  |= PA9MOD;
 8000314:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <uart1_init+0x84>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a1b      	ldr	r2, [pc, #108]	; (8000388 <uart1_init+0x84>)
 800031a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800031e:	6013      	str	r3, [r2, #0]

        //Set PA10 mode to alternate function mode/
        GPIOA->MODER  |= PA10MOD;
 8000320:	4b19      	ldr	r3, [pc, #100]	; (8000388 <uart1_init+0x84>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a18      	ldr	r2, [pc, #96]	; (8000388 <uart1_init+0x84>)
 8000326:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800032a:	6013      	str	r3, [r2, #0]

        //Set PA9 alternate function type to UART_TX (AF07)/
        GPIOA->AFR[1] |= PA9AF;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <uart1_init+0x84>)
 800032e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000330:	4a15      	ldr	r2, [pc, #84]	; (8000388 <uart1_init+0x84>)
 8000332:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000336:	6253      	str	r3, [r2, #36]	; 0x24

        //Set PA10 alternate function type to UART_RX (AF07)/
        GPIOA->AFR[1] |= PA10AF;
 8000338:	4b13      	ldr	r3, [pc, #76]	; (8000388 <uart1_init+0x84>)
 800033a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800033c:	4a12      	ldr	r2, [pc, #72]	; (8000388 <uart1_init+0x84>)
 800033e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000342:	6253      	str	r3, [r2, #36]	; 0x24

        /**Configure uart module ***/
        /*Enable clock access to uart1 */
         RCC->APB2ENR |= APB2EN;
 8000344:	4b0f      	ldr	r3, [pc, #60]	; (8000384 <uart1_init+0x80>)
 8000346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000348:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <uart1_init+0x80>)
 800034a:	f043 0310 	orr.w	r3, r3, #16
 800034e:	6453      	str	r3, [r2, #68]	; 0x44

        //Configure baudrate/
        uart_set_baudrate(USART1,APB2_CLK,UART_BAUDRATE);
 8000350:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000354:	490d      	ldr	r1, [pc, #52]	; (800038c <uart1_init+0x88>)
 8000356:	480e      	ldr	r0, [pc, #56]	; (8000390 <uart1_init+0x8c>)
 8000358:	f000 f81c 	bl	8000394 <uart_set_baudrate>

        //Configure the transfer direction/
        USART1->CR1 |= USART1_TX;
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <uart1_init+0x8c>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <uart1_init+0x8c>)
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	60d3      	str	r3, [r2, #12]

        //Configure the transfer direction/
        USART1->CR1 |= USART1_RX;
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <uart1_init+0x8c>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a08      	ldr	r2, [pc, #32]	; (8000390 <uart1_init+0x8c>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	60d3      	str	r3, [r2, #12]

        //Enable uart module/
        USART1->CR1 |= USART1EN;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <uart1_init+0x8c>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a05      	ldr	r2, [pc, #20]	; (8000390 <uart1_init+0x8c>)
 800037a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800037e:	60d3      	str	r3, [r2, #12]

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40023800 	.word	0x40023800
 8000388:	40020000 	.word	0x40020000
 800038c:	00f42400 	.word	0x00f42400
 8000390:	40011000 	.word	0x40011000

08000394 <uart_set_baudrate>:




static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	607a      	str	r2, [r7, #4]
    USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 80003a0:	6879      	ldr	r1, [r7, #4]
 80003a2:	68b8      	ldr	r0, [r7, #8]
 80003a4:	f000 f808 	bl	80003b8 <compute_uart_bd>
 80003a8:	4603      	mov	r3, r0
 80003aa:	461a      	mov	r2, r3
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	609a      	str	r2, [r3, #8]
}
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	085a      	lsrs	r2, r3, #1
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	441a      	add	r2, r3
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d0:	b29b      	uxth	r3, r3
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
	...

080003e0 <uart1_read>:




char uart1_read(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  //Make sure the transmit data register is empty/
	while(!(USART1->SR & SR_RXNE)){}
 80003e4:	bf00      	nop
 80003e6:	4b07      	ldr	r3, [pc, #28]	; (8000404 <uart1_read+0x24>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f003 0320 	and.w	r3, r3, #32
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f9      	beq.n	80003e6 <uart1_read+0x6>

  //read to receive data register/
	return USART1->DR;
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <uart1_read+0x24>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	b2db      	uxtb	r3, r3
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40011000 	.word	0x40011000

08000408 <uart1_write>:


void uart1_write(int ch)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  //Make sure the transmit data register is empty/
	while(!(USART1->SR & SR_TXE)){}
 8000410:	bf00      	nop
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <uart1_write+0x2c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800041a:	2b00      	cmp	r3, #0
 800041c:	d0f9      	beq.n	8000412 <uart1_write+0xa>

  //Write to transmit data register/
	USART1->DR	=  (ch & 0xFF);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a04      	ldr	r2, [pc, #16]	; (8000434 <uart1_write+0x2c>)
 8000422:	b2db      	uxtb	r3, r3
 8000424:	6053      	str	r3, [r2, #4]
}
 8000426:	bf00      	nop
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40011000 	.word	0x40011000

08000438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000470 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800043c:	480d      	ldr	r0, [pc, #52]	; (8000474 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800043e:	490e      	ldr	r1, [pc, #56]	; (8000478 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000440:	4a0e      	ldr	r2, [pc, #56]	; (800047c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a0b      	ldr	r2, [pc, #44]	; (8000480 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000454:	4c0b      	ldr	r4, [pc, #44]	; (8000484 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000462:	f7ff ff3d 	bl	80002e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000466:	f000 f825 	bl	80004b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800046a:	f7ff fef3 	bl	8000254 <main>
  bx  lr    
 800046e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800047c:	0800051c 	.word	0x0800051c
  ldr r2, =_sbss
 8000480:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000484:	20000024 	.word	0x20000024

08000488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC_IRQHandler>
	...

0800048c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_IncTick+0x20>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	461a      	mov	r2, r3
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_IncTick+0x24>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4413      	add	r3, r2
 800049c:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <HAL_IncTick+0x24>)
 800049e:	6013      	str	r3, [r2, #0]
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	20000000 	.word	0x20000000
 80004b0:	20000020 	.word	0x20000020

080004b4 <__libc_init_array>:
 80004b4:	b570      	push	{r4, r5, r6, lr}
 80004b6:	4d0d      	ldr	r5, [pc, #52]	; (80004ec <__libc_init_array+0x38>)
 80004b8:	4c0d      	ldr	r4, [pc, #52]	; (80004f0 <__libc_init_array+0x3c>)
 80004ba:	1b64      	subs	r4, r4, r5
 80004bc:	10a4      	asrs	r4, r4, #2
 80004be:	2600      	movs	r6, #0
 80004c0:	42a6      	cmp	r6, r4
 80004c2:	d109      	bne.n	80004d8 <__libc_init_array+0x24>
 80004c4:	4d0b      	ldr	r5, [pc, #44]	; (80004f4 <__libc_init_array+0x40>)
 80004c6:	4c0c      	ldr	r4, [pc, #48]	; (80004f8 <__libc_init_array+0x44>)
 80004c8:	f000 f818 	bl	80004fc <_init>
 80004cc:	1b64      	subs	r4, r4, r5
 80004ce:	10a4      	asrs	r4, r4, #2
 80004d0:	2600      	movs	r6, #0
 80004d2:	42a6      	cmp	r6, r4
 80004d4:	d105      	bne.n	80004e2 <__libc_init_array+0x2e>
 80004d6:	bd70      	pop	{r4, r5, r6, pc}
 80004d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004dc:	4798      	blx	r3
 80004de:	3601      	adds	r6, #1
 80004e0:	e7ee      	b.n	80004c0 <__libc_init_array+0xc>
 80004e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e6:	4798      	blx	r3
 80004e8:	3601      	adds	r6, #1
 80004ea:	e7f2      	b.n	80004d2 <__libc_init_array+0x1e>
 80004ec:	08000514 	.word	0x08000514
 80004f0:	08000514 	.word	0x08000514
 80004f4:	08000514 	.word	0x08000514
 80004f8:	08000518 	.word	0x08000518

080004fc <_init>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr

08000508 <_fini>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr
