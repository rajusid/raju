
18_Timer3_InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000488  08000488  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000488  08000488  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000488  08000488  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000488  08000488  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800048c  0800048c  0001048c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000490  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000494  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000494  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000163d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000054c  00000000  00000000  00021671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00021bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00021da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000140d6  00000000  00000000  00021f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000255b  00000000  00000000  0003600e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000805d0  00000000  00000000  00038569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8b39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000578  00000000  00000000  000b8b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000470 	.word	0x08000470

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000470 	.word	0x08000470

080001d8 <tim3_pa6_input_capture>:
 */
#include "Timer3_InputCapture.h"


void tim3_pa6_input_capture(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
    // Enable clock access to GPIOA
    RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b1f      	ldr	r3, [pc, #124]	; (800025c <tim3_pa6_input_capture+0x84>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a1e      	ldr	r2, [pc, #120]	; (800025c <tim3_pa6_input_capture+0x84>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

    // Set PA6 mode to alternate function
    GPIOA->MODER &= ~(3U << 2*6);
 80001e8:	4b1d      	ldr	r3, [pc, #116]	; (8000260 <tim3_pa6_input_capture+0x88>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a1c      	ldr	r2, [pc, #112]	; (8000260 <tim3_pa6_input_capture+0x88>)
 80001ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80001f2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= 2U << 2*6;
 80001f4:	4b1a      	ldr	r3, [pc, #104]	; (8000260 <tim3_pa6_input_capture+0x88>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a19      	ldr	r2, [pc, #100]	; (8000260 <tim3_pa6_input_capture+0x88>)
 80001fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001fe:	6013      	str	r3, [r2, #0]

    // Set PA6 alternate function type to TIM3_CH1 (AF02)
    GPIOA->AFR[0] &= ~(0xFU << 4*6);
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <tim3_pa6_input_capture+0x88>)
 8000202:	6a1b      	ldr	r3, [r3, #32]
 8000204:	4a16      	ldr	r2, [pc, #88]	; (8000260 <tim3_pa6_input_capture+0x88>)
 8000206:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800020a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= 2U << 4*6;
 800020c:	4b14      	ldr	r3, [pc, #80]	; (8000260 <tim3_pa6_input_capture+0x88>)
 800020e:	6a1b      	ldr	r3, [r3, #32]
 8000210:	4a13      	ldr	r2, [pc, #76]	; (8000260 <tim3_pa6_input_capture+0x88>)
 8000212:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000216:	6213      	str	r3, [r2, #32]

    // Enable clock access to TIM3
    RCC->APB1ENR |= TIM3EN;
 8000218:	4b10      	ldr	r3, [pc, #64]	; (800025c <tim3_pa6_input_capture+0x84>)
 800021a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800021c:	4a0f      	ldr	r2, [pc, #60]	; (800025c <tim3_pa6_input_capture+0x84>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6413      	str	r3, [r2, #64]	; 0x40

    // Set Prescaler
    TIM3->PSC = 16000 - 1; // 16 000 000 / 16 000
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <tim3_pa6_input_capture+0x8c>)
 8000226:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800022a:	629a      	str	r2, [r3, #40]	; 0x28

    // Set CH1 to input capture
    TIM3->CCMR1 |= 1U << 0;
 800022c:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <tim3_pa6_input_capture+0x8c>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a0c      	ldr	r2, [pc, #48]	; (8000264 <tim3_pa6_input_capture+0x8c>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	6193      	str	r3, [r2, #24]

    // Set CH1 to capture at rising edge
    TIM3->CCER |= CCER_CC1E;
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <tim3_pa6_input_capture+0x8c>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a09      	ldr	r2, [pc, #36]	; (8000264 <tim3_pa6_input_capture+0x8c>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6213      	str	r3, [r2, #32]

    // Enable TIM3
    TIM3->CR1 |= CR1_CEN;
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <tim3_pa6_input_capture+0x8c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a06      	ldr	r2, [pc, #24]	; (8000264 <tim3_pa6_input_capture+0x8c>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6013      	str	r3, [r2, #0]
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800
 8000260:	40020000 	.word	0x40020000
 8000264:	40000400 	.word	0x40000400

08000268 <tim2_pa5_output_compare>:

void tim2_pa5_output_compare(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 800026c:	4b24      	ldr	r3, [pc, #144]	; (8000300 <tim2_pa5_output_compare+0x98>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a23      	ldr	r2, [pc, #140]	; (8000300 <tim2_pa5_output_compare+0x98>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 mode to alternate function*/
	GPIOA->MODER &=~(1U<<10);
 8000278:	4b22      	ldr	r3, [pc, #136]	; (8000304 <tim2_pa5_output_compare+0x9c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a21      	ldr	r2, [pc, #132]	; (8000304 <tim2_pa5_output_compare+0x9c>)
 800027e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000282:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 8000284:	4b1f      	ldr	r3, [pc, #124]	; (8000304 <tim2_pa5_output_compare+0x9c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a1e      	ldr	r2, [pc, #120]	; (8000304 <tim2_pa5_output_compare+0x9c>)
 800028a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800028e:	6013      	str	r3, [r2, #0]

	/*Set PA5 alternate function type to TIM2_CH1 (AF01)*/
	GPIOA->AFR[0] |=AFR5_TIM;
 8000290:	4b1c      	ldr	r3, [pc, #112]	; (8000304 <tim2_pa5_output_compare+0x9c>)
 8000292:	6a1b      	ldr	r3, [r3, #32]
 8000294:	4a1b      	ldr	r2, [pc, #108]	; (8000304 <tim2_pa5_output_compare+0x9c>)
 8000296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800029a:	6213      	str	r3, [r2, #32]

	/*Enable clock access to tim2*/
	RCC->APB1ENR |=TIM2EN;
 800029c:	4b18      	ldr	r3, [pc, #96]	; (8000300 <tim2_pa5_output_compare+0x98>)
 800029e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a0:	4a17      	ldr	r2, [pc, #92]	; (8000300 <tim2_pa5_output_compare+0x98>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/
	TIM2->PSC =  1600 - 1 ;  //  16 000 000 / 1 600 = 10 000
 80002a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ac:	f240 623f 	movw	r2, #1599	; 0x63f
 80002b0:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value*/
	TIM2->ARR =  10000 - 1;  // 10 000 / 10 000 = 1
 80002b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80002ba:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set output compare toggle mode */
	TIM2->CCMR1 |= OC_TOGGLE;
 80002bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002c6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80002ca:	6193      	str	r3, [r2, #24]

	/* Set compare value for TIM2 Channel 1 */
	//TIM2->CCR1 = 5000 - 1; // Toggle output at 50% of period

	/* Enable tim2 ch1 in compare mode */
	TIM2->CCER |= CCER_CC1E;
 80002cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d0:	6a1b      	ldr	r3, [r3, #32]
 80002d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6213      	str	r3, [r2, #32]


	/*Clear counter*/
	TIM2->CNT = 0;
 80002dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e0:	2200      	movs	r2, #0
 80002e2:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable timer*/
	TIM2->CR1 |= CR1_CEN;
 80002e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6013      	str	r3, [r2, #0]
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40023800 	.word	0x40023800
 8000304:	40020000 	.word	0x40020000

08000308 <main>:
#include "Timer3_InputCapture.h"

uint32_t timestamp;

int main()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0

	tim3_pa6_input_capture();
 800030c:	f7ff ff64 	bl	80001d8 <tim3_pa6_input_capture>
	tim2_pa5_output_compare();
 8000310:	f7ff ffaa 	bl	8000268 <tim2_pa5_output_compare>
	while (1)
	    {
	        // Wait until edge is captured
	        while (!(TIM3->SR & TIM_SR_CC1IF))
 8000314:	bf00      	nop
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <main+0x24>)
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	f003 0302 	and.w	r3, r3, #2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f9      	beq.n	8000316 <main+0xe>
	        {
	            // Do nothing
	        }

	        // Read captured value
	        timestamp = TIM3->CCR1;
 8000322:	4b02      	ldr	r3, [pc, #8]	; (800032c <main+0x24>)
 8000324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000326:	4a02      	ldr	r2, [pc, #8]	; (8000330 <main+0x28>)
 8000328:	6013      	str	r3, [r2, #0]
	        while (!(TIM3->SR & TIM_SR_CC1IF))
 800032a:	e7f3      	b.n	8000314 <main+0xc>
 800032c:	40000400 	.word	0x40000400
 8000330:	20000020 	.word	0x20000020

08000334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000338:	e7fe      	b.n	8000338 <NMI_Handler+0x4>

0800033a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800033e:	e7fe      	b.n	800033e <HardFault_Handler+0x4>

08000340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000344:	e7fe      	b.n	8000344 <MemManage_Handler+0x4>

08000346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800034a:	e7fe      	b.n	800034a <BusFault_Handler+0x4>

0800034c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <UsageFault_Handler+0x4>

08000352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000380:	f000 f83e 	bl	8000400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}

08000388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <SystemInit+0x20>)
 800038e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000392:	4a05      	ldr	r2, [pc, #20]	; (80003a8 <SystemInit+0x20>)
 8000394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	e000ed00 	.word	0xe000ed00

080003ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003b0:	480d      	ldr	r0, [pc, #52]	; (80003e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003b2:	490e      	ldr	r1, [pc, #56]	; (80003ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003b4:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a0b      	ldr	r2, [pc, #44]	; (80003f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003c8:	4c0b      	ldr	r4, [pc, #44]	; (80003f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003d6:	f7ff ffd7 	bl	8000388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003da:	f000 f825 	bl	8000428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003de:	f7ff ff93 	bl	8000308 <main>
  bx  lr    
 80003e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003f0:	08000490 	.word	0x08000490
  ldr r2, =_sbss
 80003f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003f8:	20000028 	.word	0x20000028

080003fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC_IRQHandler>
	...

08000400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <HAL_IncTick+0x20>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	461a      	mov	r2, r3
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <HAL_IncTick+0x24>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4413      	add	r3, r2
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <HAL_IncTick+0x24>)
 8000412:	6013      	str	r3, [r2, #0]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	20000000 	.word	0x20000000
 8000424:	20000024 	.word	0x20000024

08000428 <__libc_init_array>:
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	4d0d      	ldr	r5, [pc, #52]	; (8000460 <__libc_init_array+0x38>)
 800042c:	4c0d      	ldr	r4, [pc, #52]	; (8000464 <__libc_init_array+0x3c>)
 800042e:	1b64      	subs	r4, r4, r5
 8000430:	10a4      	asrs	r4, r4, #2
 8000432:	2600      	movs	r6, #0
 8000434:	42a6      	cmp	r6, r4
 8000436:	d109      	bne.n	800044c <__libc_init_array+0x24>
 8000438:	4d0b      	ldr	r5, [pc, #44]	; (8000468 <__libc_init_array+0x40>)
 800043a:	4c0c      	ldr	r4, [pc, #48]	; (800046c <__libc_init_array+0x44>)
 800043c:	f000 f818 	bl	8000470 <_init>
 8000440:	1b64      	subs	r4, r4, r5
 8000442:	10a4      	asrs	r4, r4, #2
 8000444:	2600      	movs	r6, #0
 8000446:	42a6      	cmp	r6, r4
 8000448:	d105      	bne.n	8000456 <__libc_init_array+0x2e>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000450:	4798      	blx	r3
 8000452:	3601      	adds	r6, #1
 8000454:	e7ee      	b.n	8000434 <__libc_init_array+0xc>
 8000456:	f855 3b04 	ldr.w	r3, [r5], #4
 800045a:	4798      	blx	r3
 800045c:	3601      	adds	r6, #1
 800045e:	e7f2      	b.n	8000446 <__libc_init_array+0x1e>
 8000460:	08000488 	.word	0x08000488
 8000464:	08000488 	.word	0x08000488
 8000468:	08000488 	.word	0x08000488
 800046c:	0800048c 	.word	0x0800048c

08000470 <_init>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr

0800047c <_fini>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr
