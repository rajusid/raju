
12_uart2_rx_multipleFiles.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000034c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e4  080004e4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e4  080004e4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004e4  080004e4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e4  080004e4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e4  080004e4  000104e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004e8  080004e8  000104e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004ec  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004f0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004f0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018ea  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000708  00000000  00000000  0002191e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000230  00000000  00000000  00022028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  00022258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014448  00000000  00000000  00022410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003292  00000000  00000000  00036858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080592  00000000  00000000  00039aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ba07c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000608  00000000  00000000  000ba0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004cc 	.word	0x080004cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	080004cc 	.word	0x080004cc

080001d8 <LED_blink>:
#include "led.h"
#include "systick.h"

/* turn on or off the LEDs according to the value */
void LED_blink(int value)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
    value %= 16; /* cap the max count at 15 */
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	425a      	negs	r2, r3
 80001e4:	f003 030f 	and.w	r3, r3, #15
 80001e8:	f002 020f 	and.w	r2, r2, #15
 80001ec:	bf58      	it	pl
 80001ee:	4253      	negpl	r3, r2
 80001f0:	607b      	str	r3, [r7, #4]
    for (; value > 0; value--)
 80001f2:	e00f      	b.n	8000214 <LED_blink+0x3c>
    {
        GPIOA->BSRR = 0x00000020; /* turn on LED */
 80001f4:	4b0d      	ldr	r3, [pc, #52]	; (800022c <LED_blink+0x54>)
 80001f6:	2220      	movs	r2, #32
 80001f8:	619a      	str	r2, [r3, #24]
        systickDelayMs(200);
 80001fa:	20c8      	movs	r0, #200	; 0xc8
 80001fc:	f000 f882 	bl	8000304 <systickDelayMs>
        GPIOA->BSRR = 0x00200000; /* turn off LED */
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <LED_blink+0x54>)
 8000202:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000206:	619a      	str	r2, [r3, #24]
        systickDelayMs(200);
 8000208:	20c8      	movs	r0, #200	; 0xc8
 800020a:	f000 f87b 	bl	8000304 <systickDelayMs>
    for (; value > 0; value--)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	3b01      	subs	r3, #1
 8000212:	607b      	str	r3, [r7, #4]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	2b00      	cmp	r3, #0
 8000218:	dcec      	bgt.n	80001f4 <LED_blink+0x1c>
    }
    systickDelayMs(800);
 800021a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800021e:	f000 f871 	bl	8000304 <systickDelayMs>
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40020000 	.word	0x40020000

08000230 <LED_init>:

void LED_init(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 1;           /* enable GPIOA clock */
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <LED_init+0x34>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <LED_init+0x34>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~0x00000C00; /* clear pin mode */
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <LED_init+0x38>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a08      	ldr	r2, [pc, #32]	; (8000268 <LED_init+0x38>)
 8000246:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800024a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000400;  /* set pin to output mode */
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <LED_init+0x38>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a05      	ldr	r2, [pc, #20]	; (8000268 <LED_init+0x38>)
 8000252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000256:	6013      	str	r3, [r2, #0]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800
 8000268:	40020000 	.word	0x40020000

0800026c <main>:
/*------------------------------------------------------------------
---------MAIN function
*-------------------------------------------------------------------
---------*/
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
    char c;

    USART1_init();          /* initialize USART2 */
 8000272:	f000 f871 	bl	8000358 <USART1_init>
    LED_init();			    /* initialize PA5 */
 8000276:	f7ff ffdb 	bl	8000230 <LED_init>
    while (1)
    {                      /* Loop forever */
        c = USART1_read(); /* wait for a character received */
 800027a:	f000 f8b1 	bl	80003e0 <USART1_read>
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
        LED_blink(c);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4618      	mov	r0, r3
 8000286:	f7ff ffa7 	bl	80001d8 <LED_blink>
        c = USART1_read(); /* wait for a character received */
 800028a:	e7f6      	b.n	800027a <main+0xe>

0800028c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000290:	e7fe      	b.n	8000290 <NMI_Handler+0x4>

08000292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000292:	b480      	push	{r7}
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000296:	e7fe      	b.n	8000296 <HardFault_Handler+0x4>

08000298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800029c:	e7fe      	b.n	800029c <MemManage_Handler+0x4>

0800029e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002a2:	e7fe      	b.n	80002a2 <BusFault_Handler+0x4>

080002a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <UsageFault_Handler+0x4>

080002aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr

080002b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr

080002c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002c6:	b480      	push	{r7}
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002ca:	bf00      	nop
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002d8:	f000 f8c0 	bl	800045c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002dc:	bf00      	nop
 80002de:	bd80      	pop	{r7, pc}

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <SystemInit+0x20>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a05      	ldr	r2, [pc, #20]	; (8000300 <SystemInit+0x20>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <systickDelayMs>:
#include "systick.h"
#include "stm32f4xx.h"


void systickDelayMs(int delay)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	/*Reload with number of clocks per millisecond*/
	SysTick->LOAD	= SYSTICK_LOAD_VAL;
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <systickDelayMs+0x50>)
 800030e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000312:	605a      	str	r2, [r3, #4]

	/*Clear systick current value register */
	SysTick->VAL = 0;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <systickDelayMs+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]

	/*Enable systick and select internal clk src*/
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <systickDelayMs+0x50>)
 800031c:	2205      	movs	r2, #5
 800031e:	601a      	str	r2, [r3, #0]

	for(int i=0; i<delay ; i++)
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	e009      	b.n	800033a <systickDelayMs+0x36>
	{
		/*Wait until the COUNTFLAG is set*/
		while((SysTick->CTRL &  CTRL_COUNTFLAG) == 0){}
 8000326:	bf00      	nop
 8000328:	4b0a      	ldr	r3, [pc, #40]	; (8000354 <systickDelayMs+0x50>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f9      	beq.n	8000328 <systickDelayMs+0x24>
	for(int i=0; i<delay ; i++)
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	3301      	adds	r3, #1
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fa      	ldr	r2, [r7, #12]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	429a      	cmp	r2, r3
 8000340:	dbf1      	blt.n	8000326 <systickDelayMs+0x22>
	}

	SysTick->CTRL = 0;
 8000342:	4b04      	ldr	r3, [pc, #16]	; (8000354 <systickDelayMs+0x50>)
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]

}
 8000348:	bf00      	nop
 800034a:	3714      	adds	r7, #20
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	e000e010 	.word	0xe000e010

08000358 <USART1_init>:
/*------------------------------------------------------------------
---------Initialize UART pins, Baudrate
*-------------------------------------------------------------------
---------*/
void USART1_init(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;    /* Enable GPIOA clock */
 800035c:	4b1d      	ldr	r3, [pc, #116]	; (80003d4 <USART1_init+0x7c>)
 800035e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000360:	4a1c      	ldr	r2, [pc, #112]	; (80003d4 <USART1_init+0x7c>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; 	/* Enable USART1 clock */
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <USART1_init+0x7c>)
 800036a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800036c:	4a19      	ldr	r2, [pc, #100]	; (80003d4 <USART1_init+0x7c>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	6453      	str	r3, [r2, #68]	; 0x44
    USART1->BRR = 0x008B; 		/* 115200 baud @ 16 MHz */
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <USART1_init+0x80>)
 8000376:	228b      	movs	r2, #139	; 0x8b
 8000378:	609a      	str	r2, [r3, #8]
    USART1->CR1 = 0x0004;     /* enable Rx, 8-bit data */
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <USART1_init+0x80>)
 800037c:	2204      	movs	r2, #4
 800037e:	60da      	str	r2, [r3, #12]
    USART1->CR2 = 0x0000;     /* 1 stop bit */
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <USART1_init+0x80>)
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
    USART1->CR3 = 0x0000;     /* no flow control */
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <USART1_init+0x80>)
 8000388:	2200      	movs	r2, #0
 800038a:	615a      	str	r2, [r3, #20]
    USART1->CR1 |= USART_CR1_UE; // Enable USART1
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <USART1_init+0x80>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	4a11      	ldr	r2, [pc, #68]	; (80003d8 <USART1_init+0x80>)
 8000392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000396:	60d3      	str	r3, [r2, #12]

    /* Configure PA10 for USART1 RX */
    GPIOA->MODER &= ~(0x3 << (10 * 2));  // clear mode bits for PA10
 8000398:	4b10      	ldr	r3, [pc, #64]	; (80003dc <USART1_init+0x84>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0f      	ldr	r2, [pc, #60]	; (80003dc <USART1_init+0x84>)
 800039e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80003a2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0x2 << (10 * 2));   // set PA10 to alternate function mode
 80003a4:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <USART1_init+0x84>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a0c      	ldr	r2, [pc, #48]	; (80003dc <USART1_init+0x84>)
 80003aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003ae:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0xF << ((10 - 8) * 4));  // clear bits for PA10 in AFRL
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <USART1_init+0x84>)
 80003b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b4:	4a09      	ldr	r2, [pc, #36]	; (80003dc <USART1_init+0x84>)
 80003b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80003ba:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[1] |= (0x7 << ((10 - 8) * 4));   // set AF7 for PA10
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <USART1_init+0x84>)
 80003be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c0:	4a06      	ldr	r2, [pc, #24]	; (80003dc <USART1_init+0x84>)
 80003c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80003c6:	6253      	str	r3, [r2, #36]	; 0x24

}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40023800 	.word	0x40023800
 80003d8:	40011000 	.word	0x40011000
 80003dc:	40020000 	.word	0x40020000

080003e0 <USART1_read>:

/* Read a character from USART1 */
char USART1_read(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
    while (!(USART1->SR & 0x0020))
 80003e4:	bf00      	nop
 80003e6:	4b07      	ldr	r3, [pc, #28]	; (8000404 <USART1_read+0x24>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f003 0320 	and.w	r3, r3, #32
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f9      	beq.n	80003e6 <USART1_read+0x6>
    {
    } // wait until char arrives
    return USART1->DR;
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <USART1_read+0x24>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	b2db      	uxtb	r3, r3
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40011000 	.word	0x40011000

08000408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800040c:	480d      	ldr	r0, [pc, #52]	; (8000444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800040e:	490e      	ldr	r1, [pc, #56]	; (8000448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000410:	4a0e      	ldr	r2, [pc, #56]	; (800044c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000414:	e002      	b.n	800041c <LoopCopyDataInit>

08000416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041a:	3304      	adds	r3, #4

0800041c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800041c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000420:	d3f9      	bcc.n	8000416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000422:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000424:	4c0b      	ldr	r4, [pc, #44]	; (8000454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000428:	e001      	b.n	800042e <LoopFillZerobss>

0800042a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800042c:	3204      	adds	r2, #4

0800042e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000430:	d3fb      	bcc.n	800042a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000432:	f7ff ff55 	bl	80002e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000436:	f000 f825 	bl	8000484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800043a:	f7ff ff17 	bl	800026c <main>
  bx  lr    
 800043e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800044c:	080004ec 	.word	0x080004ec
  ldr r2, =_sbss
 8000450:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000454:	20000024 	.word	0x20000024

08000458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC_IRQHandler>
	...

0800045c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <HAL_IncTick+0x20>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	461a      	mov	r2, r3
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_IncTick+0x24>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4413      	add	r3, r2
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_IncTick+0x24>)
 800046e:	6013      	str	r3, [r2, #0]
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	20000000 	.word	0x20000000
 8000480:	20000020 	.word	0x20000020

08000484 <__libc_init_array>:
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	4d0d      	ldr	r5, [pc, #52]	; (80004bc <__libc_init_array+0x38>)
 8000488:	4c0d      	ldr	r4, [pc, #52]	; (80004c0 <__libc_init_array+0x3c>)
 800048a:	1b64      	subs	r4, r4, r5
 800048c:	10a4      	asrs	r4, r4, #2
 800048e:	2600      	movs	r6, #0
 8000490:	42a6      	cmp	r6, r4
 8000492:	d109      	bne.n	80004a8 <__libc_init_array+0x24>
 8000494:	4d0b      	ldr	r5, [pc, #44]	; (80004c4 <__libc_init_array+0x40>)
 8000496:	4c0c      	ldr	r4, [pc, #48]	; (80004c8 <__libc_init_array+0x44>)
 8000498:	f000 f818 	bl	80004cc <_init>
 800049c:	1b64      	subs	r4, r4, r5
 800049e:	10a4      	asrs	r4, r4, #2
 80004a0:	2600      	movs	r6, #0
 80004a2:	42a6      	cmp	r6, r4
 80004a4:	d105      	bne.n	80004b2 <__libc_init_array+0x2e>
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ac:	4798      	blx	r3
 80004ae:	3601      	adds	r6, #1
 80004b0:	e7ee      	b.n	8000490 <__libc_init_array+0xc>
 80004b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b6:	4798      	blx	r3
 80004b8:	3601      	adds	r6, #1
 80004ba:	e7f2      	b.n	80004a2 <__libc_init_array+0x1e>
 80004bc:	080004e4 	.word	0x080004e4
 80004c0:	080004e4 	.word	0x080004e4
 80004c4:	080004e4 	.word	0x080004e4
 80004c8:	080004e8 	.word	0x080004e8

080004cc <_init>:
 80004cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ce:	bf00      	nop
 80004d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d2:	bc08      	pop	{r3}
 80004d4:	469e      	mov	lr, r3
 80004d6:	4770      	bx	lr

080004d8 <_fini>:
 80004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004da:	bf00      	nop
 80004dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004de:	bc08      	pop	{r3}
 80004e0:	469e      	mov	lr, r3
 80004e2:	4770      	bx	lr
