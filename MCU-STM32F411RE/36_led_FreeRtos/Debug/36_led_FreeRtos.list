
36_led_FreeRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003138  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080032d8  080032d8  000132d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003300  08003300  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08003300  08003300  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003300  08003300  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003300  08003300  00013300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003304  08003304  00013304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08003308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049b8  20000008  08003310  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049c0  08003310  000249c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010517  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002200  00000000  00000000  0003054f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00032750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  000335f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002121  00000000  00000000  000343b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f246  00000000  00000000  000364d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009575b  00000000  00000000  0004571f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dae7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e20  00000000  00000000  000daecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000008 	.word	0x20000008
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080032c0 	.word	0x080032c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	080032c0 	.word	0x080032c0

080001e0 <Task1>:
#include "stm32f4xx_hal.h"

TaskHandle_t task1_handle;
TaskHandle_t task2_handle;

void Task1(void *pvParameters) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b088      	sub	sp, #32
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
    // Initialize GPIO for LED
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e8:	2300      	movs	r3, #0
 80001ea:	60bb      	str	r3, [r7, #8]
 80001ec:	4b11      	ldr	r3, [pc, #68]	; (8000234 <Task1+0x54>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a10      	ldr	r2, [pc, #64]	; (8000234 <Task1+0x54>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <Task1+0x54>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	f003 0301 	and.w	r3, r3, #1
 8000200:	60bb      	str	r3, [r7, #8]
 8000202:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000204:	2320      	movs	r3, #32
 8000206:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000208:	2301      	movs	r3, #1
 800020a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020c:	2300      	movs	r3, #0
 800020e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000210:	2300      	movs	r3, #0
 8000212:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000214:	f107 030c 	add.w	r3, r7, #12
 8000218:	4619      	mov	r1, r3
 800021a:	4807      	ldr	r0, [pc, #28]	; (8000238 <Task1+0x58>)
 800021c:	f000 f8be 	bl	800039c <HAL_GPIO_Init>

    while (1) {
        // Turn on the LED
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000220:	2201      	movs	r2, #1
 8000222:	2120      	movs	r1, #32
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <Task1+0x58>)
 8000226:	f000 fa3d 	bl	80006a4 <HAL_GPIO_WritePin>

        // Delay for 1 second
        vTaskDelay(pdMS_TO_TICKS(5000));
 800022a:	f241 3088 	movw	r0, #5000	; 0x1388
 800022e:	f001 fb27 	bl	8001880 <vTaskDelay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000232:	e7f5      	b.n	8000220 <Task1+0x40>
 8000234:	40023800 	.word	0x40023800
 8000238:	40020000 	.word	0x40020000

0800023c <Task2>:
    }
}

void Task2(void *pvParameters) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b088      	sub	sp, #32
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
    // Initialize GPIO for LED
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000244:	2300      	movs	r3, #0
 8000246:	60bb      	str	r3, [r7, #8]
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <Task2+0x54>)
 800024a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024c:	4a10      	ldr	r2, [pc, #64]	; (8000290 <Task2+0x54>)
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6313      	str	r3, [r2, #48]	; 0x30
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <Task2+0x54>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000258:	f003 0301 	and.w	r3, r3, #1
 800025c:	60bb      	str	r3, [r7, #8]
 800025e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000260:	2320      	movs	r3, #32
 8000262:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000264:	2301      	movs	r3, #1
 8000266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000268:	2300      	movs	r3, #0
 800026a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026c:	2300      	movs	r3, #0
 800026e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000270:	f107 030c 	add.w	r3, r7, #12
 8000274:	4619      	mov	r1, r3
 8000276:	4807      	ldr	r0, [pc, #28]	; (8000294 <Task2+0x58>)
 8000278:	f000 f890 	bl	800039c <HAL_GPIO_Init>

    while (1) {
        // Turn off the LED
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	2120      	movs	r1, #32
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <Task2+0x58>)
 8000282:	f000 fa0f 	bl	80006a4 <HAL_GPIO_WritePin>

        // Delay for 1 second
        vTaskDelay(pdMS_TO_TICKS(1000));
 8000286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800028a:	f001 faf9 	bl	8001880 <vTaskDelay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800028e:	e7f5      	b.n	800027c <Task2+0x40>
 8000290:	40023800 	.word	0x40023800
 8000294:	40020000 	.word	0x40020000

08000298 <main>:
    }
}

int main(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af02      	add	r7, sp, #8
    // Initialize HAL and other peripherals as required

    // Create Task 1
    xTaskCreate(Task1, "Task 1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, &task1_handle);
 800029e:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <main+0x34>)
 80002a0:	9301      	str	r3, [sp, #4]
 80002a2:	2301      	movs	r3, #1
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	2300      	movs	r3, #0
 80002a8:	2280      	movs	r2, #128	; 0x80
 80002aa:	4909      	ldr	r1, [pc, #36]	; (80002d0 <main+0x38>)
 80002ac:	4809      	ldr	r0, [pc, #36]	; (80002d4 <main+0x3c>)
 80002ae:	f001 f9a2 	bl	80015f6 <xTaskCreate>

    // Create Task 2
    xTaskCreate(Task2, "Task 2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, &task2_handle);
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <main+0x40>)
 80002b4:	9301      	str	r3, [sp, #4]
 80002b6:	2301      	movs	r3, #1
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2300      	movs	r3, #0
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	4907      	ldr	r1, [pc, #28]	; (80002dc <main+0x44>)
 80002c0:	4807      	ldr	r0, [pc, #28]	; (80002e0 <main+0x48>)
 80002c2:	f001 f998 	bl	80015f6 <xTaskCreate>

    // Start the FreeRTOS scheduler
    vTaskStartScheduler();
 80002c6:	f001 fb0f 	bl	80018e8 <vTaskStartScheduler>

    // The scheduler should never return, but if it does, handle the error
    while (1) {
 80002ca:	e7fe      	b.n	80002ca <main+0x32>
 80002cc:	20000024 	.word	0x20000024
 80002d0:	080032d8 	.word	0x080032d8
 80002d4:	080001e1 	.word	0x080001e1
 80002d8:	20000028 	.word	0x20000028
 80002dc:	080032e0 	.word	0x080032e0
 80002e0:	0800023d 	.word	0x0800023d

080002e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <NMI_Handler+0x4>

080002ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ee:	e7fe      	b.n	80002ee <HardFault_Handler+0x4>

080002f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <MemManage_Handler+0x4>

080002f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002f6:	b480      	push	{r7}
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002fa:	e7fe      	b.n	80002fa <BusFault_Handler+0x4>

080002fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000300:	e7fe      	b.n	8000300 <UsageFault_Handler+0x4>

08000302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000314:	4802      	ldr	r0, [pc, #8]	; (8000320 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000316:	f000 f9de 	bl	80006d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	2000002c 	.word	0x2000002c

08000324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <SystemInit+0x20>)
 800032a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800032e:	4a05      	ldr	r2, [pc, #20]	; (8000344 <SystemInit+0x20>)
 8000330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000380 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800034e:	490e      	ldr	r1, [pc, #56]	; (8000388 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000350:	4a0e      	ldr	r2, [pc, #56]	; (800038c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000364:	4c0b      	ldr	r4, [pc, #44]	; (8000394 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000372:	f7ff ffd7 	bl	8000324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000376:	f002 ff69 	bl	800324c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800037a:	f7ff ff8d 	bl	8000298 <main>
  bx  lr    
 800037e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 800038c:	08003308 	.word	0x08003308
  ldr r2, =_sbss
 8000390:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000394:	200049c0 	.word	0x200049c0

08000398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800039c:	b480      	push	{r7}
 800039e:	b089      	sub	sp, #36	; 0x24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
 80003b6:	e159      	b.n	800066c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80003b8:	2201      	movs	r2, #1
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	fa02 f303 	lsl.w	r3, r2, r3
 80003c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	697a      	ldr	r2, [r7, #20]
 80003c8:	4013      	ands	r3, r2
 80003ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80003cc:	693a      	ldr	r2, [r7, #16]
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	f040 8148 	bne.w	8000666 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	f003 0303 	and.w	r3, r3, #3
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d005      	beq.n	80003ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80003ea:	2b02      	cmp	r3, #2
 80003ec:	d130      	bne.n	8000450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003f4:	69fb      	ldr	r3, [r7, #28]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	2203      	movs	r2, #3
 80003fa:	fa02 f303 	lsl.w	r3, r2, r3
 80003fe:	43db      	mvns	r3, r3
 8000400:	69ba      	ldr	r2, [r7, #24]
 8000402:	4013      	ands	r3, r2
 8000404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	68da      	ldr	r2, [r3, #12]
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	69ba      	ldr	r2, [r7, #24]
 8000414:	4313      	orrs	r3, r2
 8000416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	69ba      	ldr	r2, [r7, #24]
 800041c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000424:	2201      	movs	r2, #1
 8000426:	69fb      	ldr	r3, [r7, #28]
 8000428:	fa02 f303 	lsl.w	r3, r2, r3
 800042c:	43db      	mvns	r3, r3
 800042e:	69ba      	ldr	r2, [r7, #24]
 8000430:	4013      	ands	r3, r2
 8000432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	f003 0201 	and.w	r2, r3, #1
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	fa02 f303 	lsl.w	r3, r2, r3
 8000444:	69ba      	ldr	r2, [r7, #24]
 8000446:	4313      	orrs	r3, r2
 8000448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	69ba      	ldr	r2, [r7, #24]
 800044e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	f003 0303 	and.w	r3, r3, #3
 8000458:	2b03      	cmp	r3, #3
 800045a:	d017      	beq.n	800048c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	68db      	ldr	r3, [r3, #12]
 8000460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000462:	69fb      	ldr	r3, [r7, #28]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	2203      	movs	r2, #3
 8000468:	fa02 f303 	lsl.w	r3, r2, r3
 800046c:	43db      	mvns	r3, r3
 800046e:	69ba      	ldr	r2, [r7, #24]
 8000470:	4013      	ands	r3, r2
 8000472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
 8000480:	69ba      	ldr	r2, [r7, #24]
 8000482:	4313      	orrs	r3, r2
 8000484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	69ba      	ldr	r2, [r7, #24]
 800048a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	f003 0303 	and.w	r3, r3, #3
 8000494:	2b02      	cmp	r3, #2
 8000496:	d123      	bne.n	80004e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000498:	69fb      	ldr	r3, [r7, #28]
 800049a:	08da      	lsrs	r2, r3, #3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	3208      	adds	r2, #8
 80004a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	f003 0307 	and.w	r3, r3, #7
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	220f      	movs	r2, #15
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	43db      	mvns	r3, r3
 80004b6:	69ba      	ldr	r2, [r7, #24]
 80004b8:	4013      	ands	r3, r2
 80004ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	691a      	ldr	r2, [r3, #16]
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	f003 0307 	and.w	r3, r3, #7
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	69ba      	ldr	r2, [r7, #24]
 80004ce:	4313      	orrs	r3, r2
 80004d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80004d2:	69fb      	ldr	r3, [r7, #28]
 80004d4:	08da      	lsrs	r2, r3, #3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3208      	adds	r2, #8
 80004da:	69b9      	ldr	r1, [r7, #24]
 80004dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	2203      	movs	r2, #3
 80004ec:	fa02 f303 	lsl.w	r3, r2, r3
 80004f0:	43db      	mvns	r3, r3
 80004f2:	69ba      	ldr	r2, [r7, #24]
 80004f4:	4013      	ands	r3, r2
 80004f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	f003 0203 	and.w	r2, r3, #3
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	69ba      	ldr	r2, [r7, #24]
 800050a:	4313      	orrs	r3, r2
 800050c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	69ba      	ldr	r2, [r7, #24]
 8000512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800051c:	2b00      	cmp	r3, #0
 800051e:	f000 80a2 	beq.w	8000666 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b57      	ldr	r3, [pc, #348]	; (8000684 <HAL_GPIO_Init+0x2e8>)
 8000528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800052a:	4a56      	ldr	r2, [pc, #344]	; (8000684 <HAL_GPIO_Init+0x2e8>)
 800052c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000530:	6453      	str	r3, [r2, #68]	; 0x44
 8000532:	4b54      	ldr	r3, [pc, #336]	; (8000684 <HAL_GPIO_Init+0x2e8>)
 8000534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800053e:	4a52      	ldr	r2, [pc, #328]	; (8000688 <HAL_GPIO_Init+0x2ec>)
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	089b      	lsrs	r3, r3, #2
 8000544:	3302      	adds	r3, #2
 8000546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800054a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	f003 0303 	and.w	r3, r3, #3
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	220f      	movs	r2, #15
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	43db      	mvns	r3, r3
 800055c:	69ba      	ldr	r2, [r7, #24]
 800055e:	4013      	ands	r3, r2
 8000560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a49      	ldr	r2, [pc, #292]	; (800068c <HAL_GPIO_Init+0x2f0>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d019      	beq.n	800059e <HAL_GPIO_Init+0x202>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a48      	ldr	r2, [pc, #288]	; (8000690 <HAL_GPIO_Init+0x2f4>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d013      	beq.n	800059a <HAL_GPIO_Init+0x1fe>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4a47      	ldr	r2, [pc, #284]	; (8000694 <HAL_GPIO_Init+0x2f8>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d00d      	beq.n	8000596 <HAL_GPIO_Init+0x1fa>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a46      	ldr	r2, [pc, #280]	; (8000698 <HAL_GPIO_Init+0x2fc>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d007      	beq.n	8000592 <HAL_GPIO_Init+0x1f6>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a45      	ldr	r2, [pc, #276]	; (800069c <HAL_GPIO_Init+0x300>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d101      	bne.n	800058e <HAL_GPIO_Init+0x1f2>
 800058a:	2304      	movs	r3, #4
 800058c:	e008      	b.n	80005a0 <HAL_GPIO_Init+0x204>
 800058e:	2307      	movs	r3, #7
 8000590:	e006      	b.n	80005a0 <HAL_GPIO_Init+0x204>
 8000592:	2303      	movs	r3, #3
 8000594:	e004      	b.n	80005a0 <HAL_GPIO_Init+0x204>
 8000596:	2302      	movs	r3, #2
 8000598:	e002      	b.n	80005a0 <HAL_GPIO_Init+0x204>
 800059a:	2301      	movs	r3, #1
 800059c:	e000      	b.n	80005a0 <HAL_GPIO_Init+0x204>
 800059e:	2300      	movs	r3, #0
 80005a0:	69fa      	ldr	r2, [r7, #28]
 80005a2:	f002 0203 	and.w	r2, r2, #3
 80005a6:	0092      	lsls	r2, r2, #2
 80005a8:	4093      	lsls	r3, r2
 80005aa:	69ba      	ldr	r2, [r7, #24]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80005b0:	4935      	ldr	r1, [pc, #212]	; (8000688 <HAL_GPIO_Init+0x2ec>)
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	089b      	lsrs	r3, r3, #2
 80005b6:	3302      	adds	r3, #2
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80005be:	4b38      	ldr	r3, [pc, #224]	; (80006a0 <HAL_GPIO_Init+0x304>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	43db      	mvns	r3, r3
 80005c8:	69ba      	ldr	r2, [r7, #24]
 80005ca:	4013      	ands	r3, r2
 80005cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d003      	beq.n	80005e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80005da:	69ba      	ldr	r2, [r7, #24]
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	4313      	orrs	r3, r2
 80005e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80005e2:	4a2f      	ldr	r2, [pc, #188]	; (80006a0 <HAL_GPIO_Init+0x304>)
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80005e8:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <HAL_GPIO_Init+0x304>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	43db      	mvns	r3, r3
 80005f2:	69ba      	ldr	r2, [r7, #24]
 80005f4:	4013      	ands	r3, r2
 80005f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000600:	2b00      	cmp	r3, #0
 8000602:	d003      	beq.n	800060c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000604:	69ba      	ldr	r2, [r7, #24]
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	4313      	orrs	r3, r2
 800060a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800060c:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <HAL_GPIO_Init+0x304>)
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000612:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <HAL_GPIO_Init+0x304>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	43db      	mvns	r3, r3
 800061c:	69ba      	ldr	r2, [r7, #24]
 800061e:	4013      	ands	r3, r2
 8000620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062a:	2b00      	cmp	r3, #0
 800062c:	d003      	beq.n	8000636 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800062e:	69ba      	ldr	r2, [r7, #24]
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	4313      	orrs	r3, r2
 8000634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000636:	4a1a      	ldr	r2, [pc, #104]	; (80006a0 <HAL_GPIO_Init+0x304>)
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <HAL_GPIO_Init+0x304>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000642:	693b      	ldr	r3, [r7, #16]
 8000644:	43db      	mvns	r3, r3
 8000646:	69ba      	ldr	r2, [r7, #24]
 8000648:	4013      	ands	r3, r2
 800064a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000654:	2b00      	cmp	r3, #0
 8000656:	d003      	beq.n	8000660 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000658:	69ba      	ldr	r2, [r7, #24]
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	4313      	orrs	r3, r2
 800065e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000660:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <HAL_GPIO_Init+0x304>)
 8000662:	69bb      	ldr	r3, [r7, #24]
 8000664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	3301      	adds	r3, #1
 800066a:	61fb      	str	r3, [r7, #28]
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	2b0f      	cmp	r3, #15
 8000670:	f67f aea2 	bls.w	80003b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3724      	adds	r7, #36	; 0x24
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40013800 	.word	0x40013800
 800068c:	40020000 	.word	0x40020000
 8000690:	40020400 	.word	0x40020400
 8000694:	40020800 	.word	0x40020800
 8000698:	40020c00 	.word	0x40020c00
 800069c:	40021000 	.word	0x40021000
 80006a0:	40013c00 	.word	0x40013c00

080006a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	807b      	strh	r3, [r7, #2]
 80006b0:	4613      	mov	r3, r2
 80006b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80006b4:	787b      	ldrb	r3, [r7, #1]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d003      	beq.n	80006c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006ba:	887a      	ldrh	r2, [r7, #2]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80006c0:	e003      	b.n	80006ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006c2:	887b      	ldrh	r3, [r7, #2]
 80006c4:	041a      	lsls	r2, r3, #16
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	619a      	str	r2, [r3, #24]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	f003 0302 	and.w	r3, r3, #2
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d122      	bne.n	8000732 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d11b      	bne.n	8000732 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f06f 0202 	mvn.w	r2, #2
 8000702:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2201      	movs	r2, #1
 8000708:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0303 	and.w	r3, r3, #3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d003      	beq.n	8000720 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 f8f8 	bl	800090e <HAL_TIM_IC_CaptureCallback>
 800071e:	e005      	b.n	800072c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 f8ea 	bl	80008fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f8fb 	bl	8000922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	691b      	ldr	r3, [r3, #16]
 8000738:	f003 0304 	and.w	r3, r3, #4
 800073c:	2b04      	cmp	r3, #4
 800073e:	d122      	bne.n	8000786 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	68db      	ldr	r3, [r3, #12]
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	2b04      	cmp	r3, #4
 800074c:	d11b      	bne.n	8000786 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f06f 0204 	mvn.w	r2, #4
 8000756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2202      	movs	r2, #2
 800075c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000768:	2b00      	cmp	r3, #0
 800076a:	d003      	beq.n	8000774 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f8ce 	bl	800090e <HAL_TIM_IC_CaptureCallback>
 8000772:	e005      	b.n	8000780 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 f8c0 	bl	80008fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f000 f8d1 	bl	8000922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2200      	movs	r2, #0
 8000784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	691b      	ldr	r3, [r3, #16]
 800078c:	f003 0308 	and.w	r3, r3, #8
 8000790:	2b08      	cmp	r3, #8
 8000792:	d122      	bne.n	80007da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	2b08      	cmp	r3, #8
 80007a0:	d11b      	bne.n	80007da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f06f 0208 	mvn.w	r2, #8
 80007aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2204      	movs	r2, #4
 80007b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	f003 0303 	and.w	r3, r3, #3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d003      	beq.n	80007c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 f8a4 	bl	800090e <HAL_TIM_IC_CaptureCallback>
 80007c6:	e005      	b.n	80007d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 f896 	bl	80008fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f000 f8a7 	bl	8000922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	691b      	ldr	r3, [r3, #16]
 80007e0:	f003 0310 	and.w	r3, r3, #16
 80007e4:	2b10      	cmp	r3, #16
 80007e6:	d122      	bne.n	800082e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	2b10      	cmp	r3, #16
 80007f4:	d11b      	bne.n	800082e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f06f 0210 	mvn.w	r2, #16
 80007fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2208      	movs	r2, #8
 8000804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000810:	2b00      	cmp	r3, #0
 8000812:	d003      	beq.n	800081c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 f87a 	bl	800090e <HAL_TIM_IC_CaptureCallback>
 800081a:	e005      	b.n	8000828 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f000 f86c 	bl	80008fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f000 f87d 	bl	8000922 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	691b      	ldr	r3, [r3, #16]
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	2b01      	cmp	r3, #1
 800083a:	d10e      	bne.n	800085a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	2b01      	cmp	r3, #1
 8000848:	d107      	bne.n	800085a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f06f 0201 	mvn.w	r2, #1
 8000852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 f846 	bl	80008e6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000864:	2b80      	cmp	r3, #128	; 0x80
 8000866:	d10e      	bne.n	8000886 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	2b80      	cmp	r3, #128	; 0x80
 8000874:	d107      	bne.n	8000886 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800087e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f000 f86c 	bl	800095e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000890:	2b40      	cmp	r3, #64	; 0x40
 8000892:	d10e      	bne.n	80008b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089e:	2b40      	cmp	r3, #64	; 0x40
 80008a0:	d107      	bne.n	80008b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80008aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f000 f842 	bl	8000936 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	691b      	ldr	r3, [r3, #16]
 80008b8:	f003 0320 	and.w	r3, r3, #32
 80008bc:	2b20      	cmp	r3, #32
 80008be:	d10e      	bne.n	80008de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	f003 0320 	and.w	r3, r3, #32
 80008ca:	2b20      	cmp	r3, #32
 80008cc:	d107      	bne.n	80008de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f06f 0220 	mvn.w	r2, #32
 80008d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f000 f836 	bl	800094a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e6:	b480      	push	{r7}
 80008e8:	b083      	sub	sp, #12
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000936:	b480      	push	{r7}
 8000938:	b083      	sub	sp, #12
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SysTick_Handler+0x1c>)
 800097a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800097c:	f001 fbfc 	bl	8002178 <xTaskGetSchedulerState>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d001      	beq.n	800098a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8000986:	f002 f9e7 	bl	8002d58 <xPortSysTickHandler>
  }
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	e000e010 	.word	0xe000e010

08000994 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80009a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <vApplicationGetIdleTaskMemory+0x30>)
 80009aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000074 	.word	0x20000074
 80009c4:	200000d0 	.word	0x200000d0

080009c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80009d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <vApplicationGetTimerTaskMemory+0x30>)
 80009de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e6:	601a      	str	r2, [r3, #0]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	200002d0 	.word	0x200002d0
 80009f8:	2000032c 	.word	0x2000032c

080009fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f103 0208 	add.w	r2, r3, #8
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f103 0208 	add.w	r2, r3, #8
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f103 0208 	add.w	r2, r3, #8
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a56:	b480      	push	{r7}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ab4:	d103      	bne.n	8000abe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	e00c      	b.n	8000ad8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	e002      	b.n	8000acc <vListInsert+0x2e>
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d2f6      	bcs.n	8000ac6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	6892      	ldr	r2, [r2, #8]
 8000b26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	6852      	ldr	r2, [r2, #4]
 8000b30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d103      	bne.n	8000b44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	1e5a      	subs	r2, r3, #1
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d10a      	bne.n	8000b8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b7c:	f383 8811 	msr	BASEPRI, r3
 8000b80:	f3bf 8f6f 	isb	sy
 8000b84:	f3bf 8f4f 	dsb	sy
 8000b88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b8a:	bf00      	nop
 8000b8c:	e7fe      	b.n	8000b8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000b8e:	f002 f851 	bl	8002c34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b9a:	68f9      	ldr	r1, [r7, #12]
 8000b9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ba2:	441a      	add	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2200      	movs	r2, #0
 8000bac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	68f9      	ldr	r1, [r7, #12]
 8000bc2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	441a      	add	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	22ff      	movs	r2, #255	; 0xff
 8000bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	22ff      	movs	r2, #255	; 0xff
 8000bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d114      	bne.n	8000c0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d01a      	beq.n	8000c22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3310      	adds	r3, #16
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 f903 	bl	8001dfc <xTaskRemoveFromEventList>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d012      	beq.n	8000c22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <xQueueGenericReset+0xcc>)
 8000bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	f3bf 8f6f 	isb	sy
 8000c0c:	e009      	b.n	8000c22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3310      	adds	r3, #16
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fef2 	bl	80009fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3324      	adds	r3, #36	; 0x24
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff feed 	bl	80009fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000c22:	f002 f837 	bl	8002c94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	e000ed04 	.word	0xe000ed04

08000c34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08e      	sub	sp, #56	; 0x38
 8000c38:	af02      	add	r7, sp, #8
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10a      	bne.n	8000c5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8000c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c4c:	f383 8811 	msr	BASEPRI, r3
 8000c50:	f3bf 8f6f 	isb	sy
 8000c54:	f3bf 8f4f 	dsb	sy
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000c5a:	bf00      	nop
 8000c5c:	e7fe      	b.n	8000c5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10a      	bne.n	8000c7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8000c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c68:	f383 8811 	msr	BASEPRI, r3
 8000c6c:	f3bf 8f6f 	isb	sy
 8000c70:	f3bf 8f4f 	dsb	sy
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000c76:	bf00      	nop
 8000c78:	e7fe      	b.n	8000c78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <xQueueGenericCreateStatic+0x52>
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <xQueueGenericCreateStatic+0x56>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <xQueueGenericCreateStatic+0x58>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10a      	bne.n	8000ca6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8000c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c94:	f383 8811 	msr	BASEPRI, r3
 8000c98:	f3bf 8f6f 	isb	sy
 8000c9c:	f3bf 8f4f 	dsb	sy
 8000ca0:	623b      	str	r3, [r7, #32]
}
 8000ca2:	bf00      	nop
 8000ca4:	e7fe      	b.n	8000ca4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <xQueueGenericCreateStatic+0x7e>
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <xQueueGenericCreateStatic+0x82>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <xQueueGenericCreateStatic+0x84>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10a      	bne.n	8000cd2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8000cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cc0:	f383 8811 	msr	BASEPRI, r3
 8000cc4:	f3bf 8f6f 	isb	sy
 8000cc8:	f3bf 8f4f 	dsb	sy
 8000ccc:	61fb      	str	r3, [r7, #28]
}
 8000cce:	bf00      	nop
 8000cd0:	e7fe      	b.n	8000cd0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8000cd2:	2350      	movs	r3, #80	; 0x50
 8000cd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2b50      	cmp	r3, #80	; 0x50
 8000cda:	d00a      	beq.n	8000cf2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8000cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce0:	f383 8811 	msr	BASEPRI, r3
 8000ce4:	f3bf 8f6f 	isb	sy
 8000ce8:	f3bf 8f4f 	dsb	sy
 8000cec:	61bb      	str	r3, [r7, #24]
}
 8000cee:	bf00      	nop
 8000cf0:	e7fe      	b.n	8000cf0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8000cf2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8000cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00d      	beq.n	8000d1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8000cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d00:	2201      	movs	r2, #1
 8000d02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000d06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f000 f805 	bl	8000d24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3730      	adds	r7, #48	; 0x30
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d103      	bne.n	8000d40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	e002      	b.n	8000d46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d52:	2101      	movs	r1, #1
 8000d54:	69b8      	ldr	r0, [r7, #24]
 8000d56:	f7ff ff05 	bl	8000b64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	; 0x38
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d10a      	bne.n	8000d9e <xQueueGenericSend+0x32>
	__asm volatile
 8000d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d8c:	f383 8811 	msr	BASEPRI, r3
 8000d90:	f3bf 8f6f 	isb	sy
 8000d94:	f3bf 8f4f 	dsb	sy
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000d9a:	bf00      	nop
 8000d9c:	e7fe      	b.n	8000d9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d103      	bne.n	8000dac <xQueueGenericSend+0x40>
 8000da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d101      	bne.n	8000db0 <xQueueGenericSend+0x44>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <xQueueGenericSend+0x46>
 8000db0:	2300      	movs	r3, #0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10a      	bne.n	8000dcc <xQueueGenericSend+0x60>
	__asm volatile
 8000db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dba:	f383 8811 	msr	BASEPRI, r3
 8000dbe:	f3bf 8f6f 	isb	sy
 8000dc2:	f3bf 8f4f 	dsb	sy
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000dc8:	bf00      	nop
 8000dca:	e7fe      	b.n	8000dca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d103      	bne.n	8000dda <xQueueGenericSend+0x6e>
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d101      	bne.n	8000dde <xQueueGenericSend+0x72>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e000      	b.n	8000de0 <xQueueGenericSend+0x74>
 8000dde:	2300      	movs	r3, #0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10a      	bne.n	8000dfa <xQueueGenericSend+0x8e>
	__asm volatile
 8000de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de8:	f383 8811 	msr	BASEPRI, r3
 8000dec:	f3bf 8f6f 	isb	sy
 8000df0:	f3bf 8f4f 	dsb	sy
 8000df4:	623b      	str	r3, [r7, #32]
}
 8000df6:	bf00      	nop
 8000df8:	e7fe      	b.n	8000df8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000dfa:	f001 f9bd 	bl	8002178 <xTaskGetSchedulerState>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <xQueueGenericSend+0x9e>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d101      	bne.n	8000e0e <xQueueGenericSend+0xa2>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <xQueueGenericSend+0xa4>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10a      	bne.n	8000e2a <xQueueGenericSend+0xbe>
	__asm volatile
 8000e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e18:	f383 8811 	msr	BASEPRI, r3
 8000e1c:	f3bf 8f6f 	isb	sy
 8000e20:	f3bf 8f4f 	dsb	sy
 8000e24:	61fb      	str	r3, [r7, #28]
}
 8000e26:	bf00      	nop
 8000e28:	e7fe      	b.n	8000e28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000e2a:	f001 ff03 	bl	8002c34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d302      	bcc.n	8000e40 <xQueueGenericSend+0xd4>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d129      	bne.n	8000e94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e40:	683a      	ldr	r2, [r7, #0]
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e46:	f000 fa0b 	bl	8001260 <prvCopyDataToQueue>
 8000e4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d010      	beq.n	8000e76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e56:	3324      	adds	r3, #36	; 0x24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 ffcf 	bl	8001dfc <xTaskRemoveFromEventList>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d013      	beq.n	8000e8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e64:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <xQueueGenericSend+0x1f8>)
 8000e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	f3bf 8f4f 	dsb	sy
 8000e70:	f3bf 8f6f 	isb	sy
 8000e74:	e00a      	b.n	8000e8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d007      	beq.n	8000e8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000e7c:	4b39      	ldr	r3, [pc, #228]	; (8000f64 <xQueueGenericSend+0x1f8>)
 8000e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	f3bf 8f4f 	dsb	sy
 8000e88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000e8c:	f001 ff02 	bl	8002c94 <vPortExitCritical>
				return pdPASS;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e063      	b.n	8000f5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d103      	bne.n	8000ea2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e9a:	f001 fefb 	bl	8002c94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e05c      	b.n	8000f5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d106      	bne.n	8000eb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 f809 	bl	8001ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000eb6:	f001 feed 	bl	8002c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000eba:	f000 fd7b 	bl	80019b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ebe:	f001 feb9 	bl	8002c34 <vPortEnterCritical>
 8000ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ec8:	b25b      	sxtb	r3, r3
 8000eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ece:	d103      	bne.n	8000ed8 <xQueueGenericSend+0x16c>
 8000ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ee4:	d103      	bne.n	8000eee <xQueueGenericSend+0x182>
 8000ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000eee:	f001 fed1 	bl	8002c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ef2:	1d3a      	adds	r2, r7, #4
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fff8 	bl	8001ef0 <xTaskCheckForTimeOut>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d124      	bne.n	8000f50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f08:	f000 faa2 	bl	8001450 <prvIsQueueFull>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d018      	beq.n	8000f44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f14:	3310      	adds	r3, #16
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 ff1e 	bl	8001d5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f22:	f000 fa2d 	bl	8001380 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000f26:	f000 fd53 	bl	80019d0 <xTaskResumeAll>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f47f af7c 	bne.w	8000e2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <xQueueGenericSend+0x1f8>)
 8000f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	f3bf 8f4f 	dsb	sy
 8000f3e:	f3bf 8f6f 	isb	sy
 8000f42:	e772      	b.n	8000e2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f46:	f000 fa1b 	bl	8001380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f4a:	f000 fd41 	bl	80019d0 <xTaskResumeAll>
 8000f4e:	e76c      	b.n	8000e2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f52:	f000 fa15 	bl	8001380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f56:	f000 fd3b 	bl	80019d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000f5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3738      	adds	r7, #56	; 0x38
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	e000ed04 	.word	0xe000ed04

08000f68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b090      	sub	sp, #64	; 0x40
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10a      	bne.n	8000f96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8000f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f84:	f383 8811 	msr	BASEPRI, r3
 8000f88:	f3bf 8f6f 	isb	sy
 8000f8c:	f3bf 8f4f 	dsb	sy
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8000f92:	bf00      	nop
 8000f94:	e7fe      	b.n	8000f94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d103      	bne.n	8000fa4 <xQueueGenericSendFromISR+0x3c>
 8000f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d101      	bne.n	8000fa8 <xQueueGenericSendFromISR+0x40>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <xQueueGenericSendFromISR+0x42>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10a      	bne.n	8000fc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8000fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb2:	f383 8811 	msr	BASEPRI, r3
 8000fb6:	f3bf 8f6f 	isb	sy
 8000fba:	f3bf 8f4f 	dsb	sy
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000fc0:	bf00      	nop
 8000fc2:	e7fe      	b.n	8000fc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d103      	bne.n	8000fd2 <xQueueGenericSendFromISR+0x6a>
 8000fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d101      	bne.n	8000fd6 <xQueueGenericSendFromISR+0x6e>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <xQueueGenericSendFromISR+0x70>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10a      	bne.n	8000ff2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8000fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe0:	f383 8811 	msr	BASEPRI, r3
 8000fe4:	f3bf 8f6f 	isb	sy
 8000fe8:	f3bf 8f4f 	dsb	sy
 8000fec:	623b      	str	r3, [r7, #32]
}
 8000fee:	bf00      	nop
 8000ff0:	e7fe      	b.n	8000ff0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000ff2:	f001 ff01 	bl	8002df8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000ff6:	f3ef 8211 	mrs	r2, BASEPRI
 8000ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ffe:	f383 8811 	msr	BASEPRI, r3
 8001002:	f3bf 8f6f 	isb	sy
 8001006:	f3bf 8f4f 	dsb	sy
 800100a:	61fa      	str	r2, [r7, #28]
 800100c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800100e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800101a:	429a      	cmp	r2, r3
 800101c:	d302      	bcc.n	8001024 <xQueueGenericSendFromISR+0xbc>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d12f      	bne.n	8001084 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800102a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800102e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	68b9      	ldr	r1, [r7, #8]
 8001038:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800103a:	f000 f911 	bl	8001260 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800103e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001046:	d112      	bne.n	800106e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	2b00      	cmp	r3, #0
 800104e:	d016      	beq.n	800107e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001052:	3324      	adds	r3, #36	; 0x24
 8001054:	4618      	mov	r0, r3
 8001056:	f000 fed1 	bl	8001dfc <xTaskRemoveFromEventList>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00e      	beq.n	800107e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00b      	beq.n	800107e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e007      	b.n	800107e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800106e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001072:	3301      	adds	r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	b25a      	sxtb	r2, r3
 8001078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800107a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800107e:	2301      	movs	r3, #1
 8001080:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001082:	e001      	b.n	8001088 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001084:	2300      	movs	r3, #0
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001092:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001096:	4618      	mov	r0, r3
 8001098:	3740      	adds	r7, #64	; 0x40
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80010b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10a      	bne.n	80010d0 <xQueueReceive+0x30>
	__asm volatile
 80010ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010be:	f383 8811 	msr	BASEPRI, r3
 80010c2:	f3bf 8f6f 	isb	sy
 80010c6:	f3bf 8f4f 	dsb	sy
 80010ca:	623b      	str	r3, [r7, #32]
}
 80010cc:	bf00      	nop
 80010ce:	e7fe      	b.n	80010ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d103      	bne.n	80010de <xQueueReceive+0x3e>
 80010d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <xQueueReceive+0x42>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <xQueueReceive+0x44>
 80010e2:	2300      	movs	r3, #0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10a      	bne.n	80010fe <xQueueReceive+0x5e>
	__asm volatile
 80010e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ec:	f383 8811 	msr	BASEPRI, r3
 80010f0:	f3bf 8f6f 	isb	sy
 80010f4:	f3bf 8f4f 	dsb	sy
 80010f8:	61fb      	str	r3, [r7, #28]
}
 80010fa:	bf00      	nop
 80010fc:	e7fe      	b.n	80010fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80010fe:	f001 f83b 	bl	8002178 <xTaskGetSchedulerState>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <xQueueReceive+0x6e>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <xQueueReceive+0x72>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <xQueueReceive+0x74>
 8001112:	2300      	movs	r3, #0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10a      	bne.n	800112e <xQueueReceive+0x8e>
	__asm volatile
 8001118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	61bb      	str	r3, [r7, #24]
}
 800112a:	bf00      	nop
 800112c:	e7fe      	b.n	800112c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800112e:	f001 fd81 	bl	8002c34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001136:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	2b00      	cmp	r3, #0
 800113c:	d01f      	beq.n	800117e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800113e:	68b9      	ldr	r1, [r7, #8]
 8001140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001142:	f000 f8f7 	bl	8001334 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	1e5a      	subs	r2, r3, #1
 800114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00f      	beq.n	8001176 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	3310      	adds	r3, #16
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fe4e 	bl	8001dfc <xTaskRemoveFromEventList>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d007      	beq.n	8001176 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <xQueueReceive+0x1bc>)
 8001168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	f3bf 8f4f 	dsb	sy
 8001172:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001176:	f001 fd8d 	bl	8002c94 <vPortExitCritical>
				return pdPASS;
 800117a:	2301      	movs	r3, #1
 800117c:	e069      	b.n	8001252 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d103      	bne.n	800118c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001184:	f001 fd86 	bl	8002c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001188:	2300      	movs	r3, #0
 800118a:	e062      	b.n	8001252 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118e:	2b00      	cmp	r3, #0
 8001190:	d106      	bne.n	80011a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fe94 	bl	8001ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800119c:	2301      	movs	r3, #1
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80011a0:	f001 fd78 	bl	8002c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80011a4:	f000 fc06 	bl	80019b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80011a8:	f001 fd44 	bl	8002c34 <vPortEnterCritical>
 80011ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b8:	d103      	bne.n	80011c2 <xQueueReceive+0x122>
 80011ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011ce:	d103      	bne.n	80011d8 <xQueueReceive+0x138>
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011d8:	f001 fd5c 	bl	8002c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80011dc:	1d3a      	adds	r2, r7, #4
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fe83 	bl	8001ef0 <xTaskCheckForTimeOut>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d123      	bne.n	8001238 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011f2:	f000 f917 	bl	8001424 <prvIsQueueEmpty>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d017      	beq.n	800122c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80011fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fe:	3324      	adds	r3, #36	; 0x24
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fda9 	bl	8001d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800120a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800120c:	f000 f8b8 	bl	8001380 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001210:	f000 fbde 	bl	80019d0 <xTaskResumeAll>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d189      	bne.n	800112e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <xQueueReceive+0x1bc>)
 800121c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	f3bf 8f4f 	dsb	sy
 8001226:	f3bf 8f6f 	isb	sy
 800122a:	e780      	b.n	800112e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800122c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800122e:	f000 f8a7 	bl	8001380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001232:	f000 fbcd 	bl	80019d0 <xTaskResumeAll>
 8001236:	e77a      	b.n	800112e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800123a:	f000 f8a1 	bl	8001380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800123e:	f000 fbc7 	bl	80019d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001244:	f000 f8ee 	bl	8001424 <prvIsQueueEmpty>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	f43f af6f 	beq.w	800112e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001250:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001252:	4618      	mov	r0, r3
 8001254:	3730      	adds	r7, #48	; 0x30
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000ed04 	.word	0xe000ed04

08001260 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001274:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10d      	bne.n	800129a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d14d      	bne.n	8001322 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 ff92 	bl	80021b4 <xTaskPriorityDisinherit>
 8001290:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	e043      	b.n	8001322 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d119      	bne.n	80012d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6858      	ldr	r0, [r3, #4]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	461a      	mov	r2, r3
 80012aa:	68b9      	ldr	r1, [r7, #8]
 80012ac:	f001 fff2 	bl	8003294 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	441a      	add	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d32b      	bcc.n	8001322 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	e026      	b.n	8001322 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	68d8      	ldr	r0, [r3, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	461a      	mov	r2, r3
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	f001 ffd8 	bl	8003294 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	425b      	negs	r3, r3
 80012ee:	441a      	add	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d207      	bcs.n	8001310 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	425b      	negs	r3, r3
 800130a:	441a      	add	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d105      	bne.n	8001322 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	3b01      	subs	r3, #1
 8001320:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800132a:	697b      	ldr	r3, [r7, #20]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	2b00      	cmp	r3, #0
 8001344:	d018      	beq.n	8001378 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	441a      	add	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	429a      	cmp	r2, r3
 800135e:	d303      	bcc.n	8001368 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68d9      	ldr	r1, [r3, #12]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	461a      	mov	r2, r3
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	f001 ff8e 	bl	8003294 <memcpy>
	}
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001388:	f001 fc54 	bl	8002c34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001392:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001394:	e011      	b.n	80013ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	2b00      	cmp	r3, #0
 800139c:	d012      	beq.n	80013c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3324      	adds	r3, #36	; 0x24
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fd2a 	bl	8001dfc <xTaskRemoveFromEventList>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80013ae:	f000 fe01 	bl	8001fb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dce9      	bgt.n	8001396 <prvUnlockQueue+0x16>
 80013c2:	e000      	b.n	80013c6 <prvUnlockQueue+0x46>
					break;
 80013c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	22ff      	movs	r2, #255	; 0xff
 80013ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80013ce:	f001 fc61 	bl	8002c94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80013d2:	f001 fc2f 	bl	8002c34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80013de:	e011      	b.n	8001404 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d012      	beq.n	800140e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3310      	adds	r3, #16
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fd05 	bl	8001dfc <xTaskRemoveFromEventList>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80013f8:	f000 fddc 	bl	8001fb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	3b01      	subs	r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001408:	2b00      	cmp	r3, #0
 800140a:	dce9      	bgt.n	80013e0 <prvUnlockQueue+0x60>
 800140c:	e000      	b.n	8001410 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800140e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	22ff      	movs	r2, #255	; 0xff
 8001414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001418:	f001 fc3c 	bl	8002c94 <vPortExitCritical>
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800142c:	f001 fc02 	bl	8002c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001438:	2301      	movs	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e001      	b.n	8001442 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001442:	f001 fc27 	bl	8002c94 <vPortExitCritical>

	return xReturn;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001458:	f001 fbec 	bl	8002c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001464:	429a      	cmp	r2, r3
 8001466:	d102      	bne.n	800146e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001468:	2301      	movs	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	e001      	b.n	8001472 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001472:	f001 fc0f 	bl	8002c94 <vPortExitCritical>

	return xReturn;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	e014      	b.n	80014ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001490:	4a0f      	ldr	r2, [pc, #60]	; (80014d0 <vQueueAddToRegistry+0x50>)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10b      	bne.n	80014b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <vQueueAddToRegistry+0x50>)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <vQueueAddToRegistry+0x50>)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	4413      	add	r3, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80014b2:	e006      	b.n	80014c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2b07      	cmp	r3, #7
 80014be:	d9e7      	bls.n	8001490 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	2000072c 	.word	0x2000072c

080014d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80014e4:	f001 fba6 	bl	8002c34 <vPortEnterCritical>
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014f4:	d103      	bne.n	80014fe <vQueueWaitForMessageRestricted+0x2a>
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001504:	b25b      	sxtb	r3, r3
 8001506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800150a:	d103      	bne.n	8001514 <vQueueWaitForMessageRestricted+0x40>
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001514:	f001 fbbe 	bl	8002c94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151c:	2b00      	cmp	r3, #0
 800151e:	d106      	bne.n	800152e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	3324      	adds	r3, #36	; 0x24
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fc3b 	bl	8001da4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff26 	bl	8001380 <prvUnlockQueue>
	}
 8001534:	bf00      	nop
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	; 0x38
 8001540:	af04      	add	r7, sp, #16
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800154a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800154c:	2b00      	cmp	r3, #0
 800154e:	d10a      	bne.n	8001566 <xTaskCreateStatic+0x2a>
	__asm volatile
 8001550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001554:	f383 8811 	msr	BASEPRI, r3
 8001558:	f3bf 8f6f 	isb	sy
 800155c:	f3bf 8f4f 	dsb	sy
 8001560:	623b      	str	r3, [r7, #32]
}
 8001562:	bf00      	nop
 8001564:	e7fe      	b.n	8001564 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10a      	bne.n	8001582 <xTaskCreateStatic+0x46>
	__asm volatile
 800156c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001570:	f383 8811 	msr	BASEPRI, r3
 8001574:	f3bf 8f6f 	isb	sy
 8001578:	f3bf 8f4f 	dsb	sy
 800157c:	61fb      	str	r3, [r7, #28]
}
 800157e:	bf00      	nop
 8001580:	e7fe      	b.n	8001580 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001582:	235c      	movs	r3, #92	; 0x5c
 8001584:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	2b5c      	cmp	r3, #92	; 0x5c
 800158a:	d00a      	beq.n	80015a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800158c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001590:	f383 8811 	msr	BASEPRI, r3
 8001594:	f3bf 8f6f 	isb	sy
 8001598:	f3bf 8f4f 	dsb	sy
 800159c:	61bb      	str	r3, [r7, #24]
}
 800159e:	bf00      	nop
 80015a0:	e7fe      	b.n	80015a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80015a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80015a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01e      	beq.n	80015e8 <xTaskCreateStatic+0xac>
 80015aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d01b      	beq.n	80015e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80015b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	2202      	movs	r2, #2
 80015be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80015c2:	2300      	movs	r3, #0
 80015c4:	9303      	str	r3, [sp, #12]
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f000 f850 	bl	8001680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80015e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015e2:	f000 f8dd 	bl	80017a0 <prvAddNewTaskToReadyList>
 80015e6:	e001      	b.n	80015ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80015ec:	697b      	ldr	r3, [r7, #20]
	}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b08c      	sub	sp, #48	; 0x30
 80015fa:	af04      	add	r7, sp, #16
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	4613      	mov	r3, r2
 8001604:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4618      	mov	r0, r3
 800160c:	f001 fc34 	bl	8002e78 <pvPortMalloc>
 8001610:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00e      	beq.n	8001636 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001618:	205c      	movs	r0, #92	; 0x5c
 800161a:	f001 fc2d 	bl	8002e78 <pvPortMalloc>
 800161e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
 800162c:	e005      	b.n	800163a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f001 fcee 	bl	8003010 <vPortFree>
 8001634:	e001      	b.n	800163a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d017      	beq.n	8001670 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001648:	88fa      	ldrh	r2, [r7, #6]
 800164a:	2300      	movs	r3, #0
 800164c:	9303      	str	r3, [sp, #12]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 f80e 	bl	8001680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001664:	69f8      	ldr	r0, [r7, #28]
 8001666:	f000 f89b 	bl	80017a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800166a:	2301      	movs	r3, #1
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	e002      	b.n	8001676 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001674:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001676:	69bb      	ldr	r3, [r7, #24]
	}
 8001678:	4618      	mov	r0, r3
 800167a:	3720      	adds	r7, #32
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001690:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	461a      	mov	r2, r3
 8001698:	21a5      	movs	r1, #165	; 0xa5
 800169a:	f001 fe09 	bl	80032b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800169e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016a8:	3b01      	subs	r3, #1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	f023 0307 	bic.w	r3, r3, #7
 80016b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00a      	beq.n	80016d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80016c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016c6:	f383 8811 	msr	BASEPRI, r3
 80016ca:	f3bf 8f6f 	isb	sy
 80016ce:	f3bf 8f4f 	dsb	sy
 80016d2:	617b      	str	r3, [r7, #20]
}
 80016d4:	bf00      	nop
 80016d6:	e7fe      	b.n	80016d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d01f      	beq.n	800171e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
 80016e2:	e012      	b.n	800170a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016e4:	68ba      	ldr	r2, [r7, #8]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	7819      	ldrb	r1, [r3, #0]
 80016ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	4413      	add	r3, r2
 80016f2:	3334      	adds	r3, #52	; 0x34
 80016f4:	460a      	mov	r2, r1
 80016f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	4413      	add	r3, r2
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	3301      	adds	r3, #1
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d9e9      	bls.n	80016e4 <prvInitialiseNewTask+0x64>
 8001710:	e000      	b.n	8001714 <prvInitialiseNewTask+0x94>
			{
				break;
 8001712:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800171c:	e003      	b.n	8001726 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800171e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001728:	2b37      	cmp	r3, #55	; 0x37
 800172a:	d901      	bls.n	8001730 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800172c:	2337      	movs	r3, #55	; 0x37
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001734:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800173a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800173c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173e:	2200      	movs	r2, #0
 8001740:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001744:	3304      	adds	r3, #4
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f978 	bl	8000a3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800174c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174e:	3318      	adds	r3, #24
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f973 	bl	8000a3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800175a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001764:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800176a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800176e:	2200      	movs	r2, #0
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	69b8      	ldr	r0, [r7, #24]
 8001780:	f001 f928 	bl	80029d4 <pxPortInitialiseStack>
 8001784:	4602      	mov	r2, r0
 8001786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001788:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001796:	bf00      	nop
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80017a8:	f001 fa44 	bl	8002c34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <prvAddNewTaskToReadyList+0xc4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a2c      	ldr	r2, [pc, #176]	; (8001864 <prvAddNewTaskToReadyList+0xc4>)
 80017b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80017b6:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <prvAddNewTaskToReadyList+0xc8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80017be:	4a2a      	ldr	r2, [pc, #168]	; (8001868 <prvAddNewTaskToReadyList+0xc8>)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80017c4:	4b27      	ldr	r3, [pc, #156]	; (8001864 <prvAddNewTaskToReadyList+0xc4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d110      	bne.n	80017ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80017cc:	f000 fc16 	bl	8001ffc <prvInitialiseTaskLists>
 80017d0:	e00d      	b.n	80017ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <prvAddNewTaskToReadyList+0xcc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017da:	4b23      	ldr	r3, [pc, #140]	; (8001868 <prvAddNewTaskToReadyList+0xc8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d802      	bhi.n	80017ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80017e8:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <prvAddNewTaskToReadyList+0xc8>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <prvAddNewTaskToReadyList+0xd0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	4a1e      	ldr	r2, [pc, #120]	; (8001870 <prvAddNewTaskToReadyList+0xd0>)
 80017f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80017f8:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <prvAddNewTaskToReadyList+0xd0>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <prvAddNewTaskToReadyList+0xd4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d903      	bls.n	8001814 <prvAddNewTaskToReadyList+0x74>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <prvAddNewTaskToReadyList+0xd4>)
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4a15      	ldr	r2, [pc, #84]	; (8001878 <prvAddNewTaskToReadyList+0xd8>)
 8001822:	441a      	add	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3304      	adds	r3, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f7ff f913 	bl	8000a56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001830:	f001 fa30 	bl	8002c94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <prvAddNewTaskToReadyList+0xcc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00e      	beq.n	800185a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <prvAddNewTaskToReadyList+0xc8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	429a      	cmp	r2, r3
 8001848:	d207      	bcs.n	800185a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <prvAddNewTaskToReadyList+0xdc>)
 800184c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	f3bf 8f4f 	dsb	sy
 8001856:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000c40 	.word	0x20000c40
 8001868:	2000076c 	.word	0x2000076c
 800186c:	20000c4c 	.word	0x20000c4c
 8001870:	20000c5c 	.word	0x20000c5c
 8001874:	20000c48 	.word	0x20000c48
 8001878:	20000770 	.word	0x20000770
 800187c:	e000ed04 	.word	0xe000ed04

08001880 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d017      	beq.n	80018c2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <vTaskDelay+0x60>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00a      	beq.n	80018b0 <vTaskDelay+0x30>
	__asm volatile
 800189a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800189e:	f383 8811 	msr	BASEPRI, r3
 80018a2:	f3bf 8f6f 	isb	sy
 80018a6:	f3bf 8f4f 	dsb	sy
 80018aa:	60bb      	str	r3, [r7, #8]
}
 80018ac:	bf00      	nop
 80018ae:	e7fe      	b.n	80018ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80018b0:	f000 f880 	bl	80019b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80018b4:	2100      	movs	r1, #0
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 fcea 	bl	8002290 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80018bc:	f000 f888 	bl	80019d0 <xTaskResumeAll>
 80018c0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <vTaskDelay+0x64>)
 80018ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	f3bf 8f4f 	dsb	sy
 80018d4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000c68 	.word	0x20000c68
 80018e4:	e000ed04 	.word	0xe000ed04

080018e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80018f6:	463a      	mov	r2, r7
 80018f8:	1d39      	adds	r1, r7, #4
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f848 	bl	8000994 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	9202      	str	r2, [sp, #8]
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2300      	movs	r3, #0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	460a      	mov	r2, r1
 8001916:	4921      	ldr	r1, [pc, #132]	; (800199c <vTaskStartScheduler+0xb4>)
 8001918:	4821      	ldr	r0, [pc, #132]	; (80019a0 <vTaskStartScheduler+0xb8>)
 800191a:	f7ff fe0f 	bl	800153c <xTaskCreateStatic>
 800191e:	4603      	mov	r3, r0
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <vTaskStartScheduler+0xbc>)
 8001922:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <vTaskStartScheduler+0xbc>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800192c:	2301      	movs	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e001      	b.n	8001936 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d102      	bne.n	8001942 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800193c:	f000 fcfc 	bl	8002338 <xTimerCreateTimerTask>
 8001940:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d116      	bne.n	8001976 <vTaskStartScheduler+0x8e>
	__asm volatile
 8001948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194c:	f383 8811 	msr	BASEPRI, r3
 8001950:	f3bf 8f6f 	isb	sy
 8001954:	f3bf 8f4f 	dsb	sy
 8001958:	613b      	str	r3, [r7, #16]
}
 800195a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <vTaskStartScheduler+0xc0>)
 800195e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001962:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <vTaskStartScheduler+0xc4>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <vTaskStartScheduler+0xc8>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001970:	f001 f8be 	bl	8002af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001974:	e00e      	b.n	8001994 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800197c:	d10a      	bne.n	8001994 <vTaskStartScheduler+0xac>
	__asm volatile
 800197e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001982:	f383 8811 	msr	BASEPRI, r3
 8001986:	f3bf 8f6f 	isb	sy
 800198a:	f3bf 8f4f 	dsb	sy
 800198e:	60fb      	str	r3, [r7, #12]
}
 8001990:	bf00      	nop
 8001992:	e7fe      	b.n	8001992 <vTaskStartScheduler+0xaa>
}
 8001994:	bf00      	nop
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	080032e8 	.word	0x080032e8
 80019a0:	08001fcd 	.word	0x08001fcd
 80019a4:	20000c64 	.word	0x20000c64
 80019a8:	20000c60 	.word	0x20000c60
 80019ac:	20000c4c 	.word	0x20000c4c
 80019b0:	20000c44 	.word	0x20000c44

080019b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <vTaskSuspendAll+0x18>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	4a03      	ldr	r2, [pc, #12]	; (80019cc <vTaskSuspendAll+0x18>)
 80019c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	20000c68 	.word	0x20000c68

080019d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80019da:	2300      	movs	r3, #0
 80019dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80019de:	4b42      	ldr	r3, [pc, #264]	; (8001ae8 <xTaskResumeAll+0x118>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <xTaskResumeAll+0x2c>
	__asm volatile
 80019e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ea:	f383 8811 	msr	BASEPRI, r3
 80019ee:	f3bf 8f6f 	isb	sy
 80019f2:	f3bf 8f4f 	dsb	sy
 80019f6:	603b      	str	r3, [r7, #0]
}
 80019f8:	bf00      	nop
 80019fa:	e7fe      	b.n	80019fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80019fc:	f001 f91a 	bl	8002c34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001a00:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <xTaskResumeAll+0x118>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	4a38      	ldr	r2, [pc, #224]	; (8001ae8 <xTaskResumeAll+0x118>)
 8001a08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <xTaskResumeAll+0x118>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d162      	bne.n	8001ad8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a12:	4b36      	ldr	r3, [pc, #216]	; (8001aec <xTaskResumeAll+0x11c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d05e      	beq.n	8001ad8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a1a:	e02f      	b.n	8001a7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a1c:	4b34      	ldr	r3, [pc, #208]	; (8001af0 <xTaskResumeAll+0x120>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3318      	adds	r3, #24
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff f871 	bl	8000b10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3304      	adds	r3, #4
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f86c 	bl	8000b10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <xTaskResumeAll+0x124>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d903      	bls.n	8001a4c <xTaskResumeAll+0x7c>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	4a2a      	ldr	r2, [pc, #168]	; (8001af4 <xTaskResumeAll+0x124>)
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4a27      	ldr	r2, [pc, #156]	; (8001af8 <xTaskResumeAll+0x128>)
 8001a5a:	441a      	add	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3304      	adds	r3, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	f7fe fff7 	bl	8000a56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6c:	4b23      	ldr	r3, [pc, #140]	; (8001afc <xTaskResumeAll+0x12c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d302      	bcc.n	8001a7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001a76:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <xTaskResumeAll+0x130>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <xTaskResumeAll+0x120>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1cb      	bne.n	8001a1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001a8a:	f000 fb55 	bl	8002138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <xTaskResumeAll+0x134>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d010      	beq.n	8001abc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001a9a:	f000 f847 	bl	8001b2c <xTaskIncrementTick>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <xTaskResumeAll+0x130>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f1      	bne.n	8001a9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <xTaskResumeAll+0x134>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <xTaskResumeAll+0x130>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d009      	beq.n	8001ad8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <xTaskResumeAll+0x138>)
 8001aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	f3bf 8f4f 	dsb	sy
 8001ad4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001ad8:	f001 f8dc 	bl	8002c94 <vPortExitCritical>

	return xAlreadyYielded;
 8001adc:	68bb      	ldr	r3, [r7, #8]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000c68 	.word	0x20000c68
 8001aec:	20000c40 	.word	0x20000c40
 8001af0:	20000c00 	.word	0x20000c00
 8001af4:	20000c48 	.word	0x20000c48
 8001af8:	20000770 	.word	0x20000770
 8001afc:	2000076c 	.word	0x2000076c
 8001b00:	20000c54 	.word	0x20000c54
 8001b04:	20000c50 	.word	0x20000c50
 8001b08:	e000ed04 	.word	0xe000ed04

08001b0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <xTaskGetTickCount+0x1c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001b18:	687b      	ldr	r3, [r7, #4]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000c44 	.word	0x20000c44

08001b2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b36:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <xTaskIncrementTick+0x148>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 808f 	bne.w	8001c5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b40:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <xTaskIncrementTick+0x14c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b48:	4a4b      	ldr	r2, [pc, #300]	; (8001c78 <xTaskIncrementTick+0x14c>)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d120      	bne.n	8001b96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001b54:	4b49      	ldr	r3, [pc, #292]	; (8001c7c <xTaskIncrementTick+0x150>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00a      	beq.n	8001b74 <xTaskIncrementTick+0x48>
	__asm volatile
 8001b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b62:	f383 8811 	msr	BASEPRI, r3
 8001b66:	f3bf 8f6f 	isb	sy
 8001b6a:	f3bf 8f4f 	dsb	sy
 8001b6e:	603b      	str	r3, [r7, #0]
}
 8001b70:	bf00      	nop
 8001b72:	e7fe      	b.n	8001b72 <xTaskIncrementTick+0x46>
 8001b74:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <xTaskIncrementTick+0x150>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <xTaskIncrementTick+0x154>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a3f      	ldr	r2, [pc, #252]	; (8001c7c <xTaskIncrementTick+0x150>)
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4a3f      	ldr	r2, [pc, #252]	; (8001c80 <xTaskIncrementTick+0x154>)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <xTaskIncrementTick+0x158>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	4a3d      	ldr	r2, [pc, #244]	; (8001c84 <xTaskIncrementTick+0x158>)
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	f000 fad1 	bl	8002138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b96:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <xTaskIncrementTick+0x15c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d349      	bcc.n	8001c34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <xTaskIncrementTick+0x150>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d104      	bne.n	8001bb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <xTaskIncrementTick+0x15c>)
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb0:	601a      	str	r2, [r3, #0]
					break;
 8001bb2:	e03f      	b.n	8001c34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bb4:	4b31      	ldr	r3, [pc, #196]	; (8001c7c <xTaskIncrementTick+0x150>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d203      	bcs.n	8001bd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001bcc:	4a2e      	ldr	r2, [pc, #184]	; (8001c88 <xTaskIncrementTick+0x15c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001bd2:	e02f      	b.n	8001c34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe ff99 	bl	8000b10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3318      	adds	r3, #24
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe ff90 	bl	8000b10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <xTaskIncrementTick+0x160>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d903      	bls.n	8001c04 <xTaskIncrementTick+0xd8>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	4a22      	ldr	r2, [pc, #136]	; (8001c8c <xTaskIncrementTick+0x160>)
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4a1f      	ldr	r2, [pc, #124]	; (8001c90 <xTaskIncrementTick+0x164>)
 8001c12:	441a      	add	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	3304      	adds	r3, #4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	f7fe ff1b 	bl	8000a56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <xTaskIncrementTick+0x168>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d3b8      	bcc.n	8001ba0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c32:	e7b5      	b.n	8001ba0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <xTaskIncrementTick+0x168>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3a:	4915      	ldr	r1, [pc, #84]	; (8001c90 <xTaskIncrementTick+0x164>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d901      	bls.n	8001c50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <xTaskIncrementTick+0x16c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	e004      	b.n	8001c68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <xTaskIncrementTick+0x170>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3301      	adds	r3, #1
 8001c64:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <xTaskIncrementTick+0x170>)
 8001c66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001c68:	697b      	ldr	r3, [r7, #20]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000c68 	.word	0x20000c68
 8001c78:	20000c44 	.word	0x20000c44
 8001c7c:	20000bf8 	.word	0x20000bf8
 8001c80:	20000bfc 	.word	0x20000bfc
 8001c84:	20000c58 	.word	0x20000c58
 8001c88:	20000c60 	.word	0x20000c60
 8001c8c:	20000c48 	.word	0x20000c48
 8001c90:	20000770 	.word	0x20000770
 8001c94:	2000076c 	.word	0x2000076c
 8001c98:	20000c54 	.word	0x20000c54
 8001c9c:	20000c50 	.word	0x20000c50

08001ca0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ca6:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <vTaskSwitchContext+0xa8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <vTaskSwitchContext+0xac>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001cb4:	e041      	b.n	8001d3a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8001cb6:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <vTaskSwitchContext+0xac>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <vTaskSwitchContext+0xb0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e010      	b.n	8001ce6 <vTaskSwitchContext+0x46>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10a      	bne.n	8001ce0 <vTaskSwitchContext+0x40>
	__asm volatile
 8001cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cce:	f383 8811 	msr	BASEPRI, r3
 8001cd2:	f3bf 8f6f 	isb	sy
 8001cd6:	f3bf 8f4f 	dsb	sy
 8001cda:	607b      	str	r3, [r7, #4]
}
 8001cdc:	bf00      	nop
 8001cde:	e7fe      	b.n	8001cde <vTaskSwitchContext+0x3e>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	491b      	ldr	r1, [pc, #108]	; (8001d54 <vTaskSwitchContext+0xb4>)
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0e4      	beq.n	8001cc4 <vTaskSwitchContext+0x24>
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4a13      	ldr	r2, [pc, #76]	; (8001d54 <vTaskSwitchContext+0xb4>)
 8001d06:	4413      	add	r3, r2
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d104      	bne.n	8001d2a <vTaskSwitchContext+0x8a>
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <vTaskSwitchContext+0xb8>)
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4a06      	ldr	r2, [pc, #24]	; (8001d50 <vTaskSwitchContext+0xb0>)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6013      	str	r3, [r2, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000c68 	.word	0x20000c68
 8001d4c:	20000c54 	.word	0x20000c54
 8001d50:	20000c48 	.word	0x20000c48
 8001d54:	20000770 	.word	0x20000770
 8001d58:	2000076c 	.word	0x2000076c

08001d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d10a      	bne.n	8001d82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8001d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d70:	f383 8811 	msr	BASEPRI, r3
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	f3bf 8f4f 	dsb	sy
 8001d7c:	60fb      	str	r3, [r7, #12]
}
 8001d7e:	bf00      	nop
 8001d80:	e7fe      	b.n	8001d80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <vTaskPlaceOnEventList+0x44>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3318      	adds	r3, #24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fe87 	bl	8000a9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d90:	2101      	movs	r1, #1
 8001d92:	6838      	ldr	r0, [r7, #0]
 8001d94:	f000 fa7c 	bl	8002290 <prvAddCurrentTaskToDelayedList>
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	2000076c 	.word	0x2000076c

08001da4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10a      	bne.n	8001dcc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dba:	f383 8811 	msr	BASEPRI, r3
 8001dbe:	f3bf 8f6f 	isb	sy
 8001dc2:	f3bf 8f4f 	dsb	sy
 8001dc6:	617b      	str	r3, [r7, #20]
}
 8001dc8:	bf00      	nop
 8001dca:	e7fe      	b.n	8001dca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <vTaskPlaceOnEventListRestricted+0x54>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3318      	adds	r3, #24
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f7fe fe3e 	bl	8000a56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001de4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	68b8      	ldr	r0, [r7, #8]
 8001dea:	f000 fa51 	bl	8002290 <prvAddCurrentTaskToDelayedList>
	}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000076c 	.word	0x2000076c

08001dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10a      	bne.n	8001e28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8001e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e16:	f383 8811 	msr	BASEPRI, r3
 8001e1a:	f3bf 8f6f 	isb	sy
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	60fb      	str	r3, [r7, #12]
}
 8001e24:	bf00      	nop
 8001e26:	e7fe      	b.n	8001e26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fe6f 	bl	8000b10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <xTaskRemoveFromEventList+0xb0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d11d      	bne.n	8001e76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fe66 	bl	8000b10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <xTaskRemoveFromEventList+0xb4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d903      	bls.n	8001e58 <xTaskRemoveFromEventList+0x5c>
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <xTaskRemoveFromEventList+0xb4>)
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4a13      	ldr	r2, [pc, #76]	; (8001eb4 <xTaskRemoveFromEventList+0xb8>)
 8001e66:	441a      	add	r2, r3
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	f7fe fdf1 	bl	8000a56 <vListInsertEnd>
 8001e74:	e005      	b.n	8001e82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	3318      	adds	r3, #24
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480e      	ldr	r0, [pc, #56]	; (8001eb8 <xTaskRemoveFromEventList+0xbc>)
 8001e7e:	f7fe fdea 	bl	8000a56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e86:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <xTaskRemoveFromEventList+0xc0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d905      	bls.n	8001e9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001e90:	2301      	movs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <xTaskRemoveFromEventList+0xc4>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e001      	b.n	8001ea0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001ea0:	697b      	ldr	r3, [r7, #20]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000c68 	.word	0x20000c68
 8001eb0:	20000c48 	.word	0x20000c48
 8001eb4:	20000770 	.word	0x20000770
 8001eb8:	20000c00 	.word	0x20000c00
 8001ebc:	2000076c 	.word	0x2000076c
 8001ec0:	20000c54 	.word	0x20000c54

08001ec4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <vTaskInternalSetTimeOutState+0x24>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <vTaskInternalSetTimeOutState+0x28>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	605a      	str	r2, [r3, #4]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	20000c58 	.word	0x20000c58
 8001eec:	20000c44 	.word	0x20000c44

08001ef0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10a      	bne.n	8001f16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8001f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f04:	f383 8811 	msr	BASEPRI, r3
 8001f08:	f3bf 8f6f 	isb	sy
 8001f0c:	f3bf 8f4f 	dsb	sy
 8001f10:	613b      	str	r3, [r7, #16]
}
 8001f12:	bf00      	nop
 8001f14:	e7fe      	b.n	8001f14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8001f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	60fb      	str	r3, [r7, #12]
}
 8001f2e:	bf00      	nop
 8001f30:	e7fe      	b.n	8001f30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001f32:	f000 fe7f 	bl	8002c34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <xTaskCheckForTimeOut+0xbc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f4e:	d102      	bne.n	8001f56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	e023      	b.n	8001f9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <xTaskCheckForTimeOut+0xc0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d007      	beq.n	8001f72 <xTaskCheckForTimeOut+0x82>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d302      	bcc.n	8001f72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	e015      	b.n	8001f9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d20b      	bcs.n	8001f94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	1ad2      	subs	r2, r2, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff9b 	bl	8001ec4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e004      	b.n	8001f9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001f9e:	f000 fe79 	bl	8002c94 <vPortExitCritical>

	return xReturn;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3720      	adds	r7, #32
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000c44 	.word	0x20000c44
 8001fb0:	20000c58 	.word	0x20000c58

08001fb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <vTaskMissedYield+0x14>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	20000c54 	.word	0x20000c54

08001fcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001fd4:	f000 f852 	bl	800207c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <prvIdleTask+0x28>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d9f9      	bls.n	8001fd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001fe0:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <prvIdleTask+0x2c>)
 8001fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f3bf 8f4f 	dsb	sy
 8001fec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001ff0:	e7f0      	b.n	8001fd4 <prvIdleTask+0x8>
 8001ff2:	bf00      	nop
 8001ff4:	20000770 	.word	0x20000770
 8001ff8:	e000ed04 	.word	0xe000ed04

08001ffc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	e00c      	b.n	8002022 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4a12      	ldr	r2, [pc, #72]	; (800205c <prvInitialiseTaskLists+0x60>)
 8002014:	4413      	add	r3, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fcf0 	bl	80009fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3301      	adds	r3, #1
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b37      	cmp	r3, #55	; 0x37
 8002026:	d9ef      	bls.n	8002008 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002028:	480d      	ldr	r0, [pc, #52]	; (8002060 <prvInitialiseTaskLists+0x64>)
 800202a:	f7fe fce7 	bl	80009fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800202e:	480d      	ldr	r0, [pc, #52]	; (8002064 <prvInitialiseTaskLists+0x68>)
 8002030:	f7fe fce4 	bl	80009fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <prvInitialiseTaskLists+0x6c>)
 8002036:	f7fe fce1 	bl	80009fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800203a:	480c      	ldr	r0, [pc, #48]	; (800206c <prvInitialiseTaskLists+0x70>)
 800203c:	f7fe fcde 	bl	80009fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002040:	480b      	ldr	r0, [pc, #44]	; (8002070 <prvInitialiseTaskLists+0x74>)
 8002042:	f7fe fcdb 	bl	80009fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <prvInitialiseTaskLists+0x78>)
 8002048:	4a05      	ldr	r2, [pc, #20]	; (8002060 <prvInitialiseTaskLists+0x64>)
 800204a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <prvInitialiseTaskLists+0x7c>)
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <prvInitialiseTaskLists+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000770 	.word	0x20000770
 8002060:	20000bd0 	.word	0x20000bd0
 8002064:	20000be4 	.word	0x20000be4
 8002068:	20000c00 	.word	0x20000c00
 800206c:	20000c14 	.word	0x20000c14
 8002070:	20000c2c 	.word	0x20000c2c
 8002074:	20000bf8 	.word	0x20000bf8
 8002078:	20000bfc 	.word	0x20000bfc

0800207c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002082:	e019      	b.n	80020b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002084:	f000 fdd6 	bl	8002c34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <prvCheckTasksWaitingTermination+0x50>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3304      	adds	r3, #4
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fd3b 	bl	8000b10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <prvCheckTasksWaitingTermination+0x54>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3b01      	subs	r3, #1
 80020a0:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <prvCheckTasksWaitingTermination+0x54>)
 80020a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <prvCheckTasksWaitingTermination+0x58>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <prvCheckTasksWaitingTermination+0x58>)
 80020ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80020ae:	f000 fdf1 	bl	8002c94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f810 	bl	80020d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <prvCheckTasksWaitingTermination+0x58>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e1      	bne.n	8002084 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000c14 	.word	0x20000c14
 80020d0:	20000c40 	.word	0x20000c40
 80020d4:	20000c28 	.word	0x20000c28

080020d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 ff8e 	bl	8003010 <vPortFree>
				vPortFree( pxTCB );
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 ff8b 	bl	8003010 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020fa:	e018      	b.n	800212e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002102:	2b01      	cmp	r3, #1
 8002104:	d103      	bne.n	800210e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 ff82 	bl	8003010 <vPortFree>
	}
 800210c:	e00f      	b.n	800212e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8002114:	2b02      	cmp	r3, #2
 8002116:	d00a      	beq.n	800212e <prvDeleteTCB+0x56>
	__asm volatile
 8002118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211c:	f383 8811 	msr	BASEPRI, r3
 8002120:	f3bf 8f6f 	isb	sy
 8002124:	f3bf 8f4f 	dsb	sy
 8002128:	60fb      	str	r3, [r7, #12]
}
 800212a:	bf00      	nop
 800212c:	e7fe      	b.n	800212c <prvDeleteTCB+0x54>
	}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
	...

08002138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <prvResetNextTaskUnblockTime+0x38>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d104      	bne.n	8002152 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <prvResetNextTaskUnblockTime+0x3c>)
 800214a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800214e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002150:	e008      	b.n	8002164 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <prvResetNextTaskUnblockTime+0x38>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <prvResetNextTaskUnblockTime+0x3c>)
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	20000bf8 	.word	0x20000bf8
 8002174:	20000c60 	.word	0x20000c60

08002178 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <xTaskGetSchedulerState+0x34>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002186:	2301      	movs	r3, #1
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	e008      	b.n	800219e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <xTaskGetSchedulerState+0x38>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002194:	2302      	movs	r3, #2
 8002196:	607b      	str	r3, [r7, #4]
 8002198:	e001      	b.n	800219e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800219e:	687b      	ldr	r3, [r7, #4]
	}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	20000c4c 	.word	0x20000c4c
 80021b0:	20000c68 	.word	0x20000c68

080021b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d056      	beq.n	8002278 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80021ca:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <xTaskPriorityDisinherit+0xd0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d00a      	beq.n	80021ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80021d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	60fb      	str	r3, [r7, #12]
}
 80021e6:	bf00      	nop
 80021e8:	e7fe      	b.n	80021e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10a      	bne.n	8002208 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80021f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f6:	f383 8811 	msr	BASEPRI, r3
 80021fa:	f3bf 8f6f 	isb	sy
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	60bb      	str	r3, [r7, #8]
}
 8002204:	bf00      	nop
 8002206:	e7fe      	b.n	8002206 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	429a      	cmp	r2, r3
 800221c:	d02c      	beq.n	8002278 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002222:	2b00      	cmp	r3, #0
 8002224:	d128      	bne.n	8002278 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	3304      	adds	r3, #4
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fc70 	bl	8000b10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <xTaskPriorityDisinherit+0xd4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d903      	bls.n	8002258 <xTaskPriorityDisinherit+0xa4>
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <xTaskPriorityDisinherit+0xd4>)
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4a09      	ldr	r2, [pc, #36]	; (800228c <xTaskPriorityDisinherit+0xd8>)
 8002266:	441a      	add	r2, r3
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	3304      	adds	r3, #4
 800226c:	4619      	mov	r1, r3
 800226e:	4610      	mov	r0, r2
 8002270:	f7fe fbf1 	bl	8000a56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002274:	2301      	movs	r3, #1
 8002276:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002278:	697b      	ldr	r3, [r7, #20]
	}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000076c 	.word	0x2000076c
 8002288:	20000c48 	.word	0x20000c48
 800228c:	20000770 	.word	0x20000770

08002290 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <prvAddCurrentTaskToDelayedList+0x90>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <prvAddCurrentTaskToDelayedList+0x94>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3304      	adds	r3, #4
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fc32 	bl	8000b10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022b2:	d10a      	bne.n	80022ca <prvAddCurrentTaskToDelayedList+0x3a>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d007      	beq.n	80022ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <prvAddCurrentTaskToDelayedList+0x94>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3304      	adds	r3, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	4819      	ldr	r0, [pc, #100]	; (8002328 <prvAddCurrentTaskToDelayedList+0x98>)
 80022c4:	f7fe fbc7 	bl	8000a56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80022c8:	e026      	b.n	8002318 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <prvAddCurrentTaskToDelayedList+0x94>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d209      	bcs.n	80022f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <prvAddCurrentTaskToDelayedList+0x9c>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <prvAddCurrentTaskToDelayedList+0x94>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f7fe fbd5 	bl	8000a9e <vListInsert>
}
 80022f4:	e010      	b.n	8002318 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <prvAddCurrentTaskToDelayedList+0xa0>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <prvAddCurrentTaskToDelayedList+0x94>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3304      	adds	r3, #4
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f7fe fbcb 	bl	8000a9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <prvAddCurrentTaskToDelayedList+0xa4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	429a      	cmp	r2, r3
 8002310:	d202      	bcs.n	8002318 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000c44 	.word	0x20000c44
 8002324:	2000076c 	.word	0x2000076c
 8002328:	20000c2c 	.word	0x20000c2c
 800232c:	20000bfc 	.word	0x20000bfc
 8002330:	20000bf8 	.word	0x20000bf8
 8002334:	20000c60 	.word	0x20000c60

08002338 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002342:	f000 fb07 	bl	8002954 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <xTimerCreateTimerTask+0x80>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d021      	beq.n	8002392 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002356:	1d3a      	adds	r2, r7, #4
 8002358:	f107 0108 	add.w	r1, r7, #8
 800235c:	f107 030c 	add.w	r3, r7, #12
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fb31 	bl	80009c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	9202      	str	r2, [sp, #8]
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2302      	movs	r3, #2
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2300      	movs	r3, #0
 8002376:	460a      	mov	r2, r1
 8002378:	4910      	ldr	r1, [pc, #64]	; (80023bc <xTimerCreateTimerTask+0x84>)
 800237a:	4811      	ldr	r0, [pc, #68]	; (80023c0 <xTimerCreateTimerTask+0x88>)
 800237c:	f7ff f8de 	bl	800153c <xTaskCreateStatic>
 8002380:	4603      	mov	r3, r0
 8002382:	4a10      	ldr	r2, [pc, #64]	; (80023c4 <xTimerCreateTimerTask+0x8c>)
 8002384:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <xTimerCreateTimerTask+0x8c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800238e:	2301      	movs	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	613b      	str	r3, [r7, #16]
}
 80023aa:	bf00      	nop
 80023ac:	e7fe      	b.n	80023ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80023ae:	697b      	ldr	r3, [r7, #20]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000c9c 	.word	0x20000c9c
 80023bc:	080032f0 	.word	0x080032f0
 80023c0:	080024fd 	.word	0x080024fd
 80023c4:	20000ca0 	.word	0x20000ca0

080023c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
 80023d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10a      	bne.n	80023f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80023e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e4:	f383 8811 	msr	BASEPRI, r3
 80023e8:	f3bf 8f6f 	isb	sy
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	623b      	str	r3, [r7, #32]
}
 80023f2:	bf00      	nop
 80023f4:	e7fe      	b.n	80023f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <xTimerGenericCommand+0x98>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d02a      	beq.n	8002454 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b05      	cmp	r3, #5
 800240e:	dc18      	bgt.n	8002442 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002410:	f7ff feb2 	bl	8002178 <xTaskGetSchedulerState>
 8002414:	4603      	mov	r3, r0
 8002416:	2b02      	cmp	r3, #2
 8002418:	d109      	bne.n	800242e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <xTimerGenericCommand+0x98>)
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	f107 0110 	add.w	r1, r7, #16
 8002422:	2300      	movs	r3, #0
 8002424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002426:	f7fe fca1 	bl	8000d6c <xQueueGenericSend>
 800242a:	6278      	str	r0, [r7, #36]	; 0x24
 800242c:	e012      	b.n	8002454 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <xTimerGenericCommand+0x98>)
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	f107 0110 	add.w	r1, r7, #16
 8002436:	2300      	movs	r3, #0
 8002438:	2200      	movs	r2, #0
 800243a:	f7fe fc97 	bl	8000d6c <xQueueGenericSend>
 800243e:	6278      	str	r0, [r7, #36]	; 0x24
 8002440:	e008      	b.n	8002454 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <xTimerGenericCommand+0x98>)
 8002444:	6818      	ldr	r0, [r3, #0]
 8002446:	f107 0110 	add.w	r1, r7, #16
 800244a:	2300      	movs	r3, #0
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	f7fe fd8b 	bl	8000f68 <xQueueGenericSendFromISR>
 8002452:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002456:	4618      	mov	r0, r3
 8002458:	3728      	adds	r7, #40	; 0x28
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000c9c 	.word	0x20000c9c

08002464 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af02      	add	r7, sp, #8
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <prvProcessExpiredTimer+0x94>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	3304      	adds	r3, #4
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fb47 	bl	8000b10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d022      	beq.n	80024d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	18d1      	adds	r1, r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	6978      	ldr	r0, [r7, #20]
 800249e:	f000 f8d1 	bl	8002644 <prvInsertTimerInActiveList>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01f      	beq.n	80024e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80024a8:	2300      	movs	r3, #0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2300      	movs	r3, #0
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	2100      	movs	r1, #0
 80024b2:	6978      	ldr	r0, [r7, #20]
 80024b4:	f7ff ff88 	bl	80023c8 <xTimerGenericCommand>
 80024b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d113      	bne.n	80024e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	60fb      	str	r3, [r7, #12]
}
 80024d2:	bf00      	nop
 80024d4:	e7fe      	b.n	80024d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	6978      	ldr	r0, [r7, #20]
 80024ee:	4798      	blx	r3
}
 80024f0:	bf00      	nop
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000c94 	.word	0x20000c94

080024fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f857 	bl	80025bc <prvGetNextExpireTime>
 800250e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	4619      	mov	r1, r3
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f803 	bl	8002520 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800251a:	f000 f8d5 	bl	80026c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800251e:	e7f1      	b.n	8002504 <prvTimerTask+0x8>

08002520 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800252a:	f7ff fa43 	bl	80019b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f866 	bl	8002604 <prvSampleTimeNow>
 8002538:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d130      	bne.n	80025a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10a      	bne.n	800255c <prvProcessTimerOrBlockTask+0x3c>
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	429a      	cmp	r2, r3
 800254c:	d806      	bhi.n	800255c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800254e:	f7ff fa3f 	bl	80019d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002552:	68f9      	ldr	r1, [r7, #12]
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff85 	bl	8002464 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800255a:	e024      	b.n	80025a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <prvProcessTimerOrBlockTask+0x90>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <prvProcessTimerOrBlockTask+0x50>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <prvProcessTimerOrBlockTask+0x52>
 8002570:	2300      	movs	r3, #0
 8002572:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <prvProcessTimerOrBlockTask+0x94>)
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	f7fe ffa7 	bl	80014d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002586:	f7ff fa23 	bl	80019d0 <xTaskResumeAll>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10a      	bne.n	80025a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <prvProcessTimerOrBlockTask+0x98>)
 8002592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	f3bf 8f6f 	isb	sy
}
 80025a0:	e001      	b.n	80025a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80025a2:	f7ff fa15 	bl	80019d0 <xTaskResumeAll>
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000c98 	.word	0x20000c98
 80025b4:	20000c9c 	.word	0x20000c9c
 80025b8:	e000ed04 	.word	0xe000ed04

080025bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <prvGetNextExpireTime+0x44>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <prvGetNextExpireTime+0x16>
 80025ce:	2201      	movs	r2, #1
 80025d0:	e000      	b.n	80025d4 <prvGetNextExpireTime+0x18>
 80025d2:	2200      	movs	r2, #0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d105      	bne.n	80025ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <prvGetNextExpireTime+0x44>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	e001      	b.n	80025f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80025f0:	68fb      	ldr	r3, [r7, #12]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000c94 	.word	0x20000c94

08002604 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800260c:	f7ff fa7e 	bl	8001b0c <xTaskGetTickCount>
 8002610:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002612:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <prvSampleTimeNow+0x3c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	429a      	cmp	r2, r3
 800261a:	d205      	bcs.n	8002628 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800261c:	f000 f936 	bl	800288c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e002      	b.n	800262e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800262e:	4a04      	ldr	r2, [pc, #16]	; (8002640 <prvSampleTimeNow+0x3c>)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002634:	68fb      	ldr	r3, [r7, #12]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000ca4 	.word	0x20000ca4

08002644 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	d812      	bhi.n	8002690 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	1ad2      	subs	r2, r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	429a      	cmp	r2, r3
 8002676:	d302      	bcc.n	800267e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002678:	2301      	movs	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	e01b      	b.n	80026b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <prvInsertTimerInActiveList+0x7c>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3304      	adds	r3, #4
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f7fe fa08 	bl	8000a9e <vListInsert>
 800268e:	e012      	b.n	80026b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d206      	bcs.n	80026a6 <prvInsertTimerInActiveList+0x62>
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d302      	bcc.n	80026a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80026a0:	2301      	movs	r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	e007      	b.n	80026b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <prvInsertTimerInActiveList+0x80>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3304      	adds	r3, #4
 80026ae:	4619      	mov	r1, r3
 80026b0:	4610      	mov	r0, r2
 80026b2:	f7fe f9f4 	bl	8000a9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80026b6:	697b      	ldr	r3, [r7, #20]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000c98 	.word	0x20000c98
 80026c4:	20000c94 	.word	0x20000c94

080026c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08e      	sub	sp, #56	; 0x38
 80026cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80026ce:	e0ca      	b.n	8002866 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	da18      	bge.n	8002708 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	3304      	adds	r3, #4
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80026e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e6:	f383 8811 	msr	BASEPRI, r3
 80026ea:	f3bf 8f6f 	isb	sy
 80026ee:	f3bf 8f4f 	dsb	sy
 80026f2:	61fb      	str	r3, [r7, #28]
}
 80026f4:	bf00      	nop
 80026f6:	e7fe      	b.n	80026f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fe:	6850      	ldr	r0, [r2, #4]
 8002700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002702:	6892      	ldr	r2, [r2, #8]
 8002704:	4611      	mov	r1, r2
 8002706:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f2c0 80aa 	blt.w	8002864 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	3304      	adds	r3, #4
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe f9f5 	bl	8000b10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002726:	463b      	mov	r3, r7
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff6b 	bl	8002604 <prvSampleTimeNow>
 800272e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b09      	cmp	r3, #9
 8002734:	f200 8097 	bhi.w	8002866 <prvProcessReceivedCommands+0x19e>
 8002738:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <prvProcessReceivedCommands+0x78>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002769 	.word	0x08002769
 8002744:	08002769 	.word	0x08002769
 8002748:	08002769 	.word	0x08002769
 800274c:	080027dd 	.word	0x080027dd
 8002750:	080027f1 	.word	0x080027f1
 8002754:	0800283b 	.word	0x0800283b
 8002758:	08002769 	.word	0x08002769
 800275c:	08002769 	.word	0x08002769
 8002760:	080027dd 	.word	0x080027dd
 8002764:	080027f1 	.word	0x080027f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	b2da      	uxtb	r2, r3
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	18d1      	adds	r1, r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002788:	f7ff ff5c 	bl	8002644 <prvInsertTimerInActiveList>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d069      	beq.n	8002866 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002798:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d05e      	beq.n	8002866 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	441a      	add	r2, r3
 80027b0:	2300      	movs	r3, #0
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2300      	movs	r3, #0
 80027b6:	2100      	movs	r1, #0
 80027b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ba:	f7ff fe05 	bl	80023c8 <xTimerGenericCommand>
 80027be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d14f      	bne.n	8002866 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	61bb      	str	r3, [r7, #24]
}
 80027d8:	bf00      	nop
 80027da:	e7fe      	b.n	80027da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80027ee:	e03a      	b.n	8002866 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	617b      	str	r3, [r7, #20]
}
 8002822:	bf00      	nop
 8002824:	e7fe      	b.n	8002824 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	18d1      	adds	r1, r2, r3
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002834:	f7ff ff06 	bl	8002644 <prvInsertTimerInActiveList>
					break;
 8002838:	e015      	b.n	8002866 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d103      	bne.n	8002850 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8002848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800284a:	f000 fbe1 	bl	8003010 <vPortFree>
 800284e:	e00a      	b.n	8002866 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002856:	f023 0301 	bic.w	r3, r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002862:	e000      	b.n	8002866 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8002864:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <prvProcessReceivedCommands+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	1d39      	adds	r1, r7, #4
 800286c:	2200      	movs	r2, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fc16 	bl	80010a0 <xQueueReceive>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	f47f af2a 	bne.w	80026d0 <prvProcessReceivedCommands+0x8>
	}
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3730      	adds	r7, #48	; 0x30
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000c9c 	.word	0x20000c9c

0800288c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002892:	e048      	b.n	8002926 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <prvSwitchTimerLists+0xc0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800289e:	4b2b      	ldr	r3, [pc, #172]	; (800294c <prvSwitchTimerLists+0xc0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3304      	adds	r3, #4
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fe f92f 	bl	8000b10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d02e      	beq.n	8002926 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d90e      	bls.n	80028f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <prvSwitchTimerLists+0xc0>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3304      	adds	r3, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f7fe f8d4 	bl	8000a9e <vListInsert>
 80028f6:	e016      	b.n	8002926 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80028f8:	2300      	movs	r3, #0
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2300      	movs	r3, #0
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	2100      	movs	r1, #0
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f7ff fd60 	bl	80023c8 <xTimerGenericCommand>
 8002908:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	603b      	str	r3, [r7, #0]
}
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <prvSwitchTimerLists+0xc0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1b1      	bne.n	8002894 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <prvSwitchTimerLists+0xc0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <prvSwitchTimerLists+0xc4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a04      	ldr	r2, [pc, #16]	; (800294c <prvSwitchTimerLists+0xc0>)
 800293c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800293e:	4a04      	ldr	r2, [pc, #16]	; (8002950 <prvSwitchTimerLists+0xc4>)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000c94 	.word	0x20000c94
 8002950:	20000c98 	.word	0x20000c98

08002954 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800295a:	f000 f96b 	bl	8002c34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <prvCheckForValidListAndQueue+0x60>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d120      	bne.n	80029a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002966:	4814      	ldr	r0, [pc, #80]	; (80029b8 <prvCheckForValidListAndQueue+0x64>)
 8002968:	f7fe f848 	bl	80009fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800296c:	4813      	ldr	r0, [pc, #76]	; (80029bc <prvCheckForValidListAndQueue+0x68>)
 800296e:	f7fe f845 	bl	80009fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <prvCheckForValidListAndQueue+0x6c>)
 8002974:	4a10      	ldr	r2, [pc, #64]	; (80029b8 <prvCheckForValidListAndQueue+0x64>)
 8002976:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <prvCheckForValidListAndQueue+0x70>)
 800297a:	4a10      	ldr	r2, [pc, #64]	; (80029bc <prvCheckForValidListAndQueue+0x68>)
 800297c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800297e:	2300      	movs	r3, #0
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <prvCheckForValidListAndQueue+0x74>)
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <prvCheckForValidListAndQueue+0x78>)
 8002986:	2110      	movs	r1, #16
 8002988:	200a      	movs	r0, #10
 800298a:	f7fe f953 	bl	8000c34 <xQueueGenericCreateStatic>
 800298e:	4603      	mov	r3, r0
 8002990:	4a08      	ldr	r2, [pc, #32]	; (80029b4 <prvCheckForValidListAndQueue+0x60>)
 8002992:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <prvCheckForValidListAndQueue+0x60>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <prvCheckForValidListAndQueue+0x60>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	490b      	ldr	r1, [pc, #44]	; (80029d0 <prvCheckForValidListAndQueue+0x7c>)
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fd6c 	bl	8001480 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80029a8:	f000 f974 	bl	8002c94 <vPortExitCritical>
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000c9c 	.word	0x20000c9c
 80029b8:	20000c6c 	.word	0x20000c6c
 80029bc:	20000c80 	.word	0x20000c80
 80029c0:	20000c94 	.word	0x20000c94
 80029c4:	20000c98 	.word	0x20000c98
 80029c8:	20000d48 	.word	0x20000d48
 80029cc:	20000ca8 	.word	0x20000ca8
 80029d0:	080032f8 	.word	0x080032f8

080029d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3b04      	subs	r3, #4
 80029e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3b04      	subs	r3, #4
 80029f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f023 0201 	bic.w	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3b04      	subs	r3, #4
 8002a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a04:	4a0c      	ldr	r2, [pc, #48]	; (8002a38 <pxPortInitialiseStack+0x64>)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3b14      	subs	r3, #20
 8002a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3b04      	subs	r3, #4
 8002a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f06f 0202 	mvn.w	r2, #2
 8002a22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	3b20      	subs	r3, #32
 8002a28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	08002a3d 	.word	0x08002a3d

08002a3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <prvTaskExitError+0x54>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a4e:	d00a      	beq.n	8002a66 <prvTaskExitError+0x2a>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	60fb      	str	r3, [r7, #12]
}
 8002a62:	bf00      	nop
 8002a64:	e7fe      	b.n	8002a64 <prvTaskExitError+0x28>
	__asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	60bb      	str	r3, [r7, #8]
}
 8002a78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002a7a:	bf00      	nop
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0fc      	beq.n	8002a7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002a82:	bf00      	nop
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	20000004 	.word	0x20000004
	...

08002aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <pxCurrentTCBConst2>)
 8002aa2:	6819      	ldr	r1, [r3, #0]
 8002aa4:	6808      	ldr	r0, [r1, #0]
 8002aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aaa:	f380 8809 	msr	PSP, r0
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f380 8811 	msr	BASEPRI, r0
 8002aba:	4770      	bx	lr
 8002abc:	f3af 8000 	nop.w

08002ac0 <pxCurrentTCBConst2>:
 8002ac0:	2000076c 	.word	0x2000076c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop

08002ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002ac8:	4808      	ldr	r0, [pc, #32]	; (8002aec <prvPortStartFirstTask+0x24>)
 8002aca:	6800      	ldr	r0, [r0, #0]
 8002acc:	6800      	ldr	r0, [r0, #0]
 8002ace:	f380 8808 	msr	MSP, r0
 8002ad2:	f04f 0000 	mov.w	r0, #0
 8002ad6:	f380 8814 	msr	CONTROL, r0
 8002ada:	b662      	cpsie	i
 8002adc:	b661      	cpsie	f
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	df00      	svc	0
 8002ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002aea:	bf00      	nop
 8002aec:	e000ed08 	.word	0xe000ed08

08002af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002af6:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <xPortStartScheduler+0x120>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a46      	ldr	r2, [pc, #280]	; (8002c14 <xPortStartScheduler+0x124>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d10a      	bne.n	8002b16 <xPortStartScheduler+0x26>
	__asm volatile
 8002b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	f3bf 8f6f 	isb	sy
 8002b0c:	f3bf 8f4f 	dsb	sy
 8002b10:	613b      	str	r3, [r7, #16]
}
 8002b12:	bf00      	nop
 8002b14:	e7fe      	b.n	8002b14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002b16:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <xPortStartScheduler+0x120>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a3f      	ldr	r2, [pc, #252]	; (8002c18 <xPortStartScheduler+0x128>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d10a      	bne.n	8002b36 <xPortStartScheduler+0x46>
	__asm volatile
 8002b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	60fb      	str	r3, [r7, #12]
}
 8002b32:	bf00      	nop
 8002b34:	e7fe      	b.n	8002b34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b36:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <xPortStartScheduler+0x12c>)
 8002b38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	22ff      	movs	r2, #255	; 0xff
 8002b46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <xPortStartScheduler+0x130>)
 8002b5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b5e:	4b31      	ldr	r3, [pc, #196]	; (8002c24 <xPortStartScheduler+0x134>)
 8002b60:	2207      	movs	r2, #7
 8002b62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b64:	e009      	b.n	8002b7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002b66:	4b2f      	ldr	r3, [pc, #188]	; (8002c24 <xPortStartScheduler+0x134>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	4a2d      	ldr	r2, [pc, #180]	; (8002c24 <xPortStartScheduler+0x134>)
 8002b6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b82:	2b80      	cmp	r3, #128	; 0x80
 8002b84:	d0ef      	beq.n	8002b66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b86:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <xPortStartScheduler+0x134>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d00a      	beq.n	8002ba8 <xPortStartScheduler+0xb8>
	__asm volatile
 8002b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	60bb      	str	r3, [r7, #8]
}
 8002ba4:	bf00      	nop
 8002ba6:	e7fe      	b.n	8002ba6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ba8:	4b1e      	ldr	r3, [pc, #120]	; (8002c24 <xPortStartScheduler+0x134>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <xPortStartScheduler+0x134>)
 8002bb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <xPortStartScheduler+0x134>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bba:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <xPortStartScheduler+0x134>)
 8002bbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002bc6:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <xPortStartScheduler+0x138>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <xPortStartScheduler+0x138>)
 8002bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <xPortStartScheduler+0x138>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <xPortStartScheduler+0x138>)
 8002bd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002bdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002bde:	f000 f8dd 	bl	8002d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <xPortStartScheduler+0x13c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002be8:	f000 f8fc 	bl	8002de4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <xPortStartScheduler+0x140>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0f      	ldr	r2, [pc, #60]	; (8002c30 <xPortStartScheduler+0x140>)
 8002bf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002bf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002bf8:	f7ff ff66 	bl	8002ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002bfc:	f7ff f850 	bl	8001ca0 <vTaskSwitchContext>
	prvTaskExitError();
 8002c00:	f7ff ff1c 	bl	8002a3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e000ed00 	.word	0xe000ed00
 8002c14:	410fc271 	.word	0x410fc271
 8002c18:	410fc270 	.word	0x410fc270
 8002c1c:	e000e400 	.word	0xe000e400
 8002c20:	20000d98 	.word	0x20000d98
 8002c24:	20000d9c 	.word	0x20000d9c
 8002c28:	e000ed20 	.word	0xe000ed20
 8002c2c:	20000004 	.word	0x20000004
 8002c30:	e000ef34 	.word	0xe000ef34

08002c34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
	__asm volatile
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	607b      	str	r3, [r7, #4]
}
 8002c4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <vPortEnterCritical+0x58>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <vPortEnterCritical+0x58>)
 8002c56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <vPortEnterCritical+0x58>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10f      	bne.n	8002c80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <vPortEnterCritical+0x5c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <vPortEnterCritical+0x4c>
	__asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	603b      	str	r3, [r7, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	e7fe      	b.n	8002c7e <vPortEnterCritical+0x4a>
	}
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	20000004 	.word	0x20000004
 8002c90:	e000ed04 	.word	0xe000ed04

08002c94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <vPortExitCritical+0x50>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <vPortExitCritical+0x24>
	__asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	607b      	str	r3, [r7, #4]
}
 8002cb4:	bf00      	nop
 8002cb6:	e7fe      	b.n	8002cb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <vPortExitCritical+0x50>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <vPortExitCritical+0x50>)
 8002cc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <vPortExitCritical+0x50>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <vPortExitCritical+0x42>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f383 8811 	msr	BASEPRI, r3
}
 8002cd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000004 	.word	0x20000004
	...

08002cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002cf0:	f3ef 8009 	mrs	r0, PSP
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <pxCurrentTCBConst>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	f01e 0f10 	tst.w	lr, #16
 8002d00:	bf08      	it	eq
 8002d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d0a:	6010      	str	r0, [r2, #0]
 8002d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d14:	f380 8811 	msr	BASEPRI, r0
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f7fe ffbe 	bl	8001ca0 <vTaskSwitchContext>
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	f380 8811 	msr	BASEPRI, r0
 8002d2c:	bc09      	pop	{r0, r3}
 8002d2e:	6819      	ldr	r1, [r3, #0]
 8002d30:	6808      	ldr	r0, [r1, #0]
 8002d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d36:	f01e 0f10 	tst.w	lr, #16
 8002d3a:	bf08      	it	eq
 8002d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d40:	f380 8809 	msr	PSP, r0
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	f3af 8000 	nop.w

08002d50 <pxCurrentTCBConst>:
 8002d50:	2000076c 	.word	0x2000076c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop

08002d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	607b      	str	r3, [r7, #4]
}
 8002d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002d72:	f7fe fedb 	bl	8001b2c <xTaskIncrementTick>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <xPortSysTickHandler+0x40>)
 8002d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	2300      	movs	r3, #0
 8002d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f383 8811 	msr	BASEPRI, r3
}
 8002d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	e000ed04 	.word	0xe000ed04

08002d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <vPortSetupTimerInterrupt+0x34>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <vPortSetupTimerInterrupt+0x38>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <vPortSetupTimerInterrupt+0x3c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <vPortSetupTimerInterrupt+0x40>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	099b      	lsrs	r3, r3, #6
 8002db8:	4a09      	ldr	r2, [pc, #36]	; (8002de0 <vPortSetupTimerInterrupt+0x44>)
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002dbe:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <vPortSetupTimerInterrupt+0x34>)
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	601a      	str	r2, [r3, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000e010 	.word	0xe000e010
 8002dd4:	e000e018 	.word	0xe000e018
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	10624dd3 	.word	0x10624dd3
 8002de0:	e000e014 	.word	0xe000e014

08002de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002de4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002df4 <vPortEnableVFP+0x10>
 8002de8:	6801      	ldr	r1, [r0, #0]
 8002dea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002dee:	6001      	str	r1, [r0, #0]
 8002df0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002df2:	bf00      	nop
 8002df4:	e000ed88 	.word	0xe000ed88

08002df8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002dfe:	f3ef 8305 	mrs	r3, IPSR
 8002e02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	d914      	bls.n	8002e34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002e0a:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <vPortValidateInterruptPriority+0x70>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <vPortValidateInterruptPriority+0x74>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	7afa      	ldrb	r2, [r7, #11]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d20a      	bcs.n	8002e34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	607b      	str	r3, [r7, #4]
}
 8002e30:	bf00      	nop
 8002e32:	e7fe      	b.n	8002e32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <vPortValidateInterruptPriority+0x78>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <vPortValidateInterruptPriority+0x7c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d90a      	bls.n	8002e5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	603b      	str	r3, [r7, #0]
}
 8002e56:	bf00      	nop
 8002e58:	e7fe      	b.n	8002e58 <vPortValidateInterruptPriority+0x60>
	}
 8002e5a:	bf00      	nop
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000e3f0 	.word	0xe000e3f0
 8002e6c:	20000d98 	.word	0x20000d98
 8002e70:	e000ed0c 	.word	0xe000ed0c
 8002e74:	20000d9c 	.word	0x20000d9c

08002e78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002e84:	f7fe fd96 	bl	80019b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002e88:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <pvPortMalloc+0x180>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002e90:	f000 f920 	bl	80030d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e94:	4b59      	ldr	r3, [pc, #356]	; (8002ffc <pvPortMalloc+0x184>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f040 8093 	bne.w	8002fc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01d      	beq.n	8002ee4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d014      	beq.n	8002ee4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f023 0307 	bic.w	r3, r3, #7
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <pvPortMalloc+0x6c>
	__asm volatile
 8002ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed2:	f383 8811 	msr	BASEPRI, r3
 8002ed6:	f3bf 8f6f 	isb	sy
 8002eda:	f3bf 8f4f 	dsb	sy
 8002ede:	617b      	str	r3, [r7, #20]
}
 8002ee0:	bf00      	nop
 8002ee2:	e7fe      	b.n	8002ee2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d06e      	beq.n	8002fc8 <pvPortMalloc+0x150>
 8002eea:	4b45      	ldr	r3, [pc, #276]	; (8003000 <pvPortMalloc+0x188>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d869      	bhi.n	8002fc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002ef4:	4b43      	ldr	r3, [pc, #268]	; (8003004 <pvPortMalloc+0x18c>)
 8002ef6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002ef8:	4b42      	ldr	r3, [pc, #264]	; (8003004 <pvPortMalloc+0x18c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002efe:	e004      	b.n	8002f0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d903      	bls.n	8002f1c <pvPortMalloc+0xa4>
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f1      	bne.n	8002f00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002f1c:	4b36      	ldr	r3, [pc, #216]	; (8002ff8 <pvPortMalloc+0x180>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d050      	beq.n	8002fc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	4413      	add	r3, r2
 8002f2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	1ad2      	subs	r2, r2, r3
 8002f40:	2308      	movs	r3, #8
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d91f      	bls.n	8002f88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <pvPortMalloc+0xf8>
	__asm volatile
 8002f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5e:	f383 8811 	msr	BASEPRI, r3
 8002f62:	f3bf 8f6f 	isb	sy
 8002f66:	f3bf 8f4f 	dsb	sy
 8002f6a:	613b      	str	r3, [r7, #16]
}
 8002f6c:	bf00      	nop
 8002f6e:	e7fe      	b.n	8002f6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	1ad2      	subs	r2, r2, r3
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f82:	69b8      	ldr	r0, [r7, #24]
 8002f84:	f000 f908 	bl	8003198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f88:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <pvPortMalloc+0x188>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	4a1b      	ldr	r2, [pc, #108]	; (8003000 <pvPortMalloc+0x188>)
 8002f94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f96:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <pvPortMalloc+0x188>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	; (8003008 <pvPortMalloc+0x190>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d203      	bcs.n	8002faa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002fa2:	4b17      	ldr	r3, [pc, #92]	; (8003000 <pvPortMalloc+0x188>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a18      	ldr	r2, [pc, #96]	; (8003008 <pvPortMalloc+0x190>)
 8002fa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <pvPortMalloc+0x184>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <pvPortMalloc+0x194>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	4a11      	ldr	r2, [pc, #68]	; (800300c <pvPortMalloc+0x194>)
 8002fc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002fc8:	f7fe fd02 	bl	80019d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <pvPortMalloc+0x174>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	60fb      	str	r3, [r7, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <pvPortMalloc+0x172>
	return pvReturn;
 8002fec:	69fb      	ldr	r3, [r7, #28]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3728      	adds	r7, #40	; 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200049a8 	.word	0x200049a8
 8002ffc:	200049bc 	.word	0x200049bc
 8003000:	200049ac 	.word	0x200049ac
 8003004:	200049a0 	.word	0x200049a0
 8003008:	200049b0 	.word	0x200049b0
 800300c:	200049b4 	.word	0x200049b4

08003010 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d04d      	beq.n	80030be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003022:	2308      	movs	r3, #8
 8003024:	425b      	negs	r3, r3
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4413      	add	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <vPortFree+0xb8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <vPortFree+0x44>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	60fb      	str	r3, [r7, #12]
}
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <vPortFree+0x62>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	60bb      	str	r3, [r7, #8]
}
 800306e:	bf00      	nop
 8003070:	e7fe      	b.n	8003070 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <vPortFree+0xb8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01e      	beq.n	80030be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d11a      	bne.n	80030be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <vPortFree+0xb8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	43db      	mvns	r3, r3
 8003092:	401a      	ands	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003098:	f7fe fc8c 	bl	80019b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <vPortFree+0xbc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4413      	add	r3, r2
 80030a6:	4a09      	ldr	r2, [pc, #36]	; (80030cc <vPortFree+0xbc>)
 80030a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030aa:	6938      	ldr	r0, [r7, #16]
 80030ac:	f000 f874 	bl	8003198 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <vPortFree+0xc0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	4a06      	ldr	r2, [pc, #24]	; (80030d0 <vPortFree+0xc0>)
 80030b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80030ba:	f7fe fc89 	bl	80019d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200049bc 	.word	0x200049bc
 80030cc:	200049ac 	.word	0x200049ac
 80030d0:	200049b8 	.word	0x200049b8

080030d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80030da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80030de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <prvHeapInit+0xac>)
 80030e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00c      	beq.n	8003108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3307      	adds	r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0307 	bic.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <prvHeapInit+0xac>)
 8003104:	4413      	add	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800310c:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <prvHeapInit+0xb0>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <prvHeapInit+0xb0>)
 8003114:	2200      	movs	r2, #0
 8003116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	4413      	add	r3, r2
 800311e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003120:	2208      	movs	r2, #8
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0307 	bic.w	r3, r3, #7
 800312e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4a15      	ldr	r2, [pc, #84]	; (8003188 <prvHeapInit+0xb4>)
 8003134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003136:	4b14      	ldr	r3, [pc, #80]	; (8003188 <prvHeapInit+0xb4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2200      	movs	r2, #0
 800313c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <prvHeapInit+0xb4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	1ad2      	subs	r2, r2, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <prvHeapInit+0xb4>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4a0a      	ldr	r2, [pc, #40]	; (800318c <prvHeapInit+0xb8>)
 8003162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a09      	ldr	r2, [pc, #36]	; (8003190 <prvHeapInit+0xbc>)
 800316a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <prvHeapInit+0xc0>)
 800316e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003172:	601a      	str	r2, [r3, #0]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	20000da0 	.word	0x20000da0
 8003184:	200049a0 	.word	0x200049a0
 8003188:	200049a8 	.word	0x200049a8
 800318c:	200049b0 	.word	0x200049b0
 8003190:	200049ac 	.word	0x200049ac
 8003194:	200049bc 	.word	0x200049bc

08003198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031a0:	4b28      	ldr	r3, [pc, #160]	; (8003244 <prvInsertBlockIntoFreeList+0xac>)
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e002      	b.n	80031ac <prvInsertBlockIntoFreeList+0x14>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d8f7      	bhi.n	80031a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	4413      	add	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d108      	bne.n	80031da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	441a      	add	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	441a      	add	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d118      	bne.n	8003220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <prvInsertBlockIntoFreeList+0xb0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d00d      	beq.n	8003216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	441a      	add	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e008      	b.n	8003228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <prvInsertBlockIntoFreeList+0xb0>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e003      	b.n	8003228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	429a      	cmp	r2, r3
 800322e:	d002      	beq.n	8003236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	200049a0 	.word	0x200049a0
 8003248:	200049a8 	.word	0x200049a8

0800324c <__libc_init_array>:
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	4d0d      	ldr	r5, [pc, #52]	; (8003284 <__libc_init_array+0x38>)
 8003250:	4c0d      	ldr	r4, [pc, #52]	; (8003288 <__libc_init_array+0x3c>)
 8003252:	1b64      	subs	r4, r4, r5
 8003254:	10a4      	asrs	r4, r4, #2
 8003256:	2600      	movs	r6, #0
 8003258:	42a6      	cmp	r6, r4
 800325a:	d109      	bne.n	8003270 <__libc_init_array+0x24>
 800325c:	4d0b      	ldr	r5, [pc, #44]	; (800328c <__libc_init_array+0x40>)
 800325e:	4c0c      	ldr	r4, [pc, #48]	; (8003290 <__libc_init_array+0x44>)
 8003260:	f000 f82e 	bl	80032c0 <_init>
 8003264:	1b64      	subs	r4, r4, r5
 8003266:	10a4      	asrs	r4, r4, #2
 8003268:	2600      	movs	r6, #0
 800326a:	42a6      	cmp	r6, r4
 800326c:	d105      	bne.n	800327a <__libc_init_array+0x2e>
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	f855 3b04 	ldr.w	r3, [r5], #4
 8003274:	4798      	blx	r3
 8003276:	3601      	adds	r6, #1
 8003278:	e7ee      	b.n	8003258 <__libc_init_array+0xc>
 800327a:	f855 3b04 	ldr.w	r3, [r5], #4
 800327e:	4798      	blx	r3
 8003280:	3601      	adds	r6, #1
 8003282:	e7f2      	b.n	800326a <__libc_init_array+0x1e>
 8003284:	08003300 	.word	0x08003300
 8003288:	08003300 	.word	0x08003300
 800328c:	08003300 	.word	0x08003300
 8003290:	08003304 	.word	0x08003304

08003294 <memcpy>:
 8003294:	440a      	add	r2, r1
 8003296:	4291      	cmp	r1, r2
 8003298:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800329c:	d100      	bne.n	80032a0 <memcpy+0xc>
 800329e:	4770      	bx	lr
 80032a0:	b510      	push	{r4, lr}
 80032a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032aa:	4291      	cmp	r1, r2
 80032ac:	d1f9      	bne.n	80032a2 <memcpy+0xe>
 80032ae:	bd10      	pop	{r4, pc}

080032b0 <memset>:
 80032b0:	4402      	add	r2, r0
 80032b2:	4603      	mov	r3, r0
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d100      	bne.n	80032ba <memset+0xa>
 80032b8:	4770      	bx	lr
 80032ba:	f803 1b01 	strb.w	r1, [r3], #1
 80032be:	e7f9      	b.n	80032b4 <memset+0x4>

080032c0 <_init>:
 80032c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c2:	bf00      	nop
 80032c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c6:	bc08      	pop	{r3}
 80032c8:	469e      	mov	lr, r3
 80032ca:	4770      	bx	lr

080032cc <_fini>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	bf00      	nop
 80032d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d2:	bc08      	pop	{r3}
 80032d4:	469e      	mov	lr, r3
 80032d6:	4770      	bx	lr
