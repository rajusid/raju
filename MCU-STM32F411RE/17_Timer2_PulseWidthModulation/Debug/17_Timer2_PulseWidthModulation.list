
17_Timer2_PulseWidthModulation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002fc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000494  08000494  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000494  08000494  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000494  08000494  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000494  08000494  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000498  08000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800049c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004a0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004a0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018db  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000055c  00000000  00000000  0002190f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00021e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00022050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000140b2  00000000  00000000  000221d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002581  00000000  00000000  0003628a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080555  00000000  00000000  0003880b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8d60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000055c  00000000  00000000  000b8db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800047c 	.word	0x0800047c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	0800047c 	.word	0x0800047c

080001d8 <tim2_pa5_output_PWM>:
 */

#include "Timer2_PulseWidthModulation.h"

void tim2_pa5_output_PWM(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 80001dc:	4b26      	ldr	r3, [pc, #152]	; (8000278 <tim2_pa5_output_PWM+0xa0>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a25      	ldr	r2, [pc, #148]	; (8000278 <tim2_pa5_output_PWM+0xa0>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 mode to alternate function*/
	GPIOA->MODER &=~(1U<<10);
 80001e8:	4b24      	ldr	r3, [pc, #144]	; (800027c <tim2_pa5_output_PWM+0xa4>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a23      	ldr	r2, [pc, #140]	; (800027c <tim2_pa5_output_PWM+0xa4>)
 80001ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 80001f4:	4b21      	ldr	r3, [pc, #132]	; (800027c <tim2_pa5_output_PWM+0xa4>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a20      	ldr	r2, [pc, #128]	; (800027c <tim2_pa5_output_PWM+0xa4>)
 80001fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001fe:	6013      	str	r3, [r2, #0]

	/*Set PA5 alternate function type to TIM2_CH1 (AF01)*/
	GPIOA->AFR[0] |=AFR5_TIM;
 8000200:	4b1e      	ldr	r3, [pc, #120]	; (800027c <tim2_pa5_output_PWM+0xa4>)
 8000202:	6a1b      	ldr	r3, [r3, #32]
 8000204:	4a1d      	ldr	r2, [pc, #116]	; (800027c <tim2_pa5_output_PWM+0xa4>)
 8000206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800020a:	6213      	str	r3, [r2, #32]

	/*Enable clock access to tim2*/
	RCC->APB1ENR |=TIM2EN;
 800020c:	4b1a      	ldr	r3, [pc, #104]	; (8000278 <tim2_pa5_output_PWM+0xa0>)
 800020e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000210:	4a19      	ldr	r2, [pc, #100]	; (8000278 <tim2_pa5_output_PWM+0xa0>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/
	TIM2->PSC =  4800 - 1 ;  //  16 000 000 / 1 600 = 10 000
 8000218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021c:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000220:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value*/
	TIM2->ARR =  10000 - 1;  // 10 000 / 10 000 = 1
 8000222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000226:	f242 720f 	movw	r2, #9999	; 0x270f
 800022a:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CCER = 1; /* enable PWM Ch1 */
 800022c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000230:	2201      	movs	r2, #1
 8000232:	621a      	str	r2, [r3, #32]

	TIM2->CCR1 = 3334 - 1; /* pulse width 1/3 of the period */
 8000234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000238:	f640 5205 	movw	r2, #3333	; 0xd05
 800023c:	635a      	str	r2, [r3, #52]	; 0x34

	TIM2->CCMR1 |= 0x60;/* Set pulse width modulation mode 1 */
 800023e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000248:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800024c:	6193      	str	r3, [r2, #24]

	/* Enable tim2 ch1 in PWM output mode */
	TIM2->CCER |= 1;
 800024e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000258:	f043 0301 	orr.w	r3, r3, #1
 800025c:	6213      	str	r3, [r2, #32]

	/*Clear counter*/
	TIM2->CNT = 0;
 800025e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000262:	2200      	movs	r2, #0
 8000264:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable timer*/
	TIM2->CR1 = CR1_CEN;
 8000266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026a:	2201      	movs	r2, #1
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	40023800 	.word	0x40023800
 800027c:	40020000 	.word	0x40020000

08000280 <main>:
#include <stdint.h>



int main()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=  4;                 /* enable GPIOC clock */
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <main+0xb4>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a2a      	ldr	r2, [pc, #168]	; (8000334 <main+0xb4>)
 800028c:	f043 0304 	orr.w	r3, r3, #4
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |=  1;                /* enable GPIOA clock */
 8000292:	4b28      	ldr	r3, [pc, #160]	; (8000334 <main+0xb4>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000296:	4a27      	ldr	r2, [pc, #156]	; (8000334 <main+0xb4>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	6313      	str	r3, [r2, #48]	; 0x30

    GPIOA->MODER &= ~0x00000C00;        /* clear pin mode */
 800029e:	4b26      	ldr	r3, [pc, #152]	; (8000338 <main+0xb8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a25      	ldr	r2, [pc, #148]	; (8000338 <main+0xb8>)
 80002a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002a8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  0x00000400;        /* set pin to output mode */
 80002aa:	4b23      	ldr	r3, [pc, #140]	; (8000338 <main+0xb8>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a22      	ldr	r2, [pc, #136]	; (8000338 <main+0xb8>)
 80002b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002b4:	6013      	str	r3, [r2, #0]

	GPIOC->MODER &= ~0x0C000000;        /* clear pin mode to input mode */
 80002b6:	4b21      	ldr	r3, [pc, #132]	; (800033c <main+0xbc>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a20      	ldr	r2, [pc, #128]	; (800033c <main+0xbc>)
 80002bc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80002c0:	6013      	str	r3, [r2, #0]

	tim2_pa5_output_PWM();
 80002c2:	f7ff ff89 	bl	80001d8 <tim2_pa5_output_PWM>
	uint8_t Button = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
				if (!(GPIOC->IDR & 0x2000)) /* if PC13 is high */
 80002ca:	4b1c      	ldr	r3, [pc, #112]	; (800033c <main+0xbc>)
 80002cc:	691b      	ldr	r3, [r3, #16]
 80002ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d109      	bne.n	80002ea <main+0x6a>
		        {
		            Button++;
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	3301      	adds	r3, #1
 80002da:	71fb      	strb	r3, [r7, #7]
		            while (!(GPIOC->IDR & 0x2000));
 80002dc:	bf00      	nop
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <main+0xbc>)
 80002e0:	691b      	ldr	r3, [r3, #16]
 80002e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f9      	beq.n	80002de <main+0x5e>

		        }

		        if (Button == 1)
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d110      	bne.n	8000312 <main+0x92>
		        {
		            TIM2->CCMR1 &= ~(1<<4); // clear bit 4
 80002f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002fa:	f023 0310 	bic.w	r3, r3, #16
 80002fe:	6193      	str	r3, [r2, #24]
		        	TIM2->CCMR1 |= 0x60;    // set pulse width modulation mode 1
 8000300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000304:	699b      	ldr	r3, [r3, #24]
 8000306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800030a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	e007      	b.n	8000322 <main+0xa2>
		        }
		        else
		        {
		        	TIM2->CCMR1 |= 0x70;    // set pulse width modulation mode 2
 8000312:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800031c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000320:	6193      	str	r3, [r2, #24]
		        }

		        /* Reset Button after afterwards */
		        if (Button > 0 && Button <= 1)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d002      	beq.n	800032e <main+0xae>
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d901      	bls.n	8000332 <main+0xb2>
		        {

		        }
		        else
		        {
		            Button = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	71fb      	strb	r3, [r7, #7]
				if (!(GPIOC->IDR & 0x2000)) /* if PC13 is high */
 8000332:	e7ca      	b.n	80002ca <main+0x4a>
 8000334:	40023800 	.word	0x40023800
 8000338:	40020000 	.word	0x40020000
 800033c:	40020800 	.word	0x40020800

08000340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000344:	e7fe      	b.n	8000344 <NMI_Handler+0x4>

08000346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034a:	e7fe      	b.n	800034a <HardFault_Handler+0x4>

0800034c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <MemManage_Handler+0x4>

08000352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000356:	e7fe      	b.n	8000356 <BusFault_Handler+0x4>

08000358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800035c:	e7fe      	b.n	800035c <UsageFault_Handler+0x4>

0800035e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800038c:	f000 f83e 	bl	800040c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}

08000394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <SystemInit+0x20>)
 800039a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039e:	4a05      	ldr	r2, [pc, #20]	; (80003b4 <SystemInit+0x20>)
 80003a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	e000ed00 	.word	0xe000ed00

080003b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003bc:	480d      	ldr	r0, [pc, #52]	; (80003f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003be:	490e      	ldr	r1, [pc, #56]	; (80003f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003c0:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c4:	e002      	b.n	80003cc <LoopCopyDataInit>

080003c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ca:	3304      	adds	r3, #4

080003cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d0:	d3f9      	bcc.n	80003c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d2:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003d4:	4c0b      	ldr	r4, [pc, #44]	; (8000404 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d8:	e001      	b.n	80003de <LoopFillZerobss>

080003da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003dc:	3204      	adds	r2, #4

080003de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e0:	d3fb      	bcc.n	80003da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003e2:	f7ff ffd7 	bl	8000394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003e6:	f000 f825 	bl	8000434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ea:	f7ff ff49 	bl	8000280 <main>
  bx  lr    
 80003ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003fc:	0800049c 	.word	0x0800049c
  ldr r2, =_sbss
 8000400:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000404:	20000024 	.word	0x20000024

08000408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC_IRQHandler>
	...

0800040c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <HAL_IncTick+0x20>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <HAL_IncTick+0x24>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4413      	add	r3, r2
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_IncTick+0x24>)
 800041e:	6013      	str	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000000 	.word	0x20000000
 8000430:	20000020 	.word	0x20000020

08000434 <__libc_init_array>:
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	4d0d      	ldr	r5, [pc, #52]	; (800046c <__libc_init_array+0x38>)
 8000438:	4c0d      	ldr	r4, [pc, #52]	; (8000470 <__libc_init_array+0x3c>)
 800043a:	1b64      	subs	r4, r4, r5
 800043c:	10a4      	asrs	r4, r4, #2
 800043e:	2600      	movs	r6, #0
 8000440:	42a6      	cmp	r6, r4
 8000442:	d109      	bne.n	8000458 <__libc_init_array+0x24>
 8000444:	4d0b      	ldr	r5, [pc, #44]	; (8000474 <__libc_init_array+0x40>)
 8000446:	4c0c      	ldr	r4, [pc, #48]	; (8000478 <__libc_init_array+0x44>)
 8000448:	f000 f818 	bl	800047c <_init>
 800044c:	1b64      	subs	r4, r4, r5
 800044e:	10a4      	asrs	r4, r4, #2
 8000450:	2600      	movs	r6, #0
 8000452:	42a6      	cmp	r6, r4
 8000454:	d105      	bne.n	8000462 <__libc_init_array+0x2e>
 8000456:	bd70      	pop	{r4, r5, r6, pc}
 8000458:	f855 3b04 	ldr.w	r3, [r5], #4
 800045c:	4798      	blx	r3
 800045e:	3601      	adds	r6, #1
 8000460:	e7ee      	b.n	8000440 <__libc_init_array+0xc>
 8000462:	f855 3b04 	ldr.w	r3, [r5], #4
 8000466:	4798      	blx	r3
 8000468:	3601      	adds	r6, #1
 800046a:	e7f2      	b.n	8000452 <__libc_init_array+0x1e>
 800046c:	08000494 	.word	0x08000494
 8000470:	08000494 	.word	0x08000494
 8000474:	08000494 	.word	0x08000494
 8000478:	08000498 	.word	0x08000498

0800047c <_init>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr

08000488 <_fini>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr
